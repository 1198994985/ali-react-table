(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("ERkP")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("aWzz")},,,,,,,,,,,,function(module,exports){module.exports=storybook_docs_dll},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("HUCg")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("7nmT")},,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return amount})),__webpack_require__.d(__webpack_exports__,"d",(function(){return time})),__webpack_require__.d(__webpack_exports__,"c",(function(){return ratio})),__webpack_require__.d(__webpack_exports__,"b",(function(){return lfl}));var numeral__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(83),numeral__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(numeral__WEBPACK_IMPORTED_MODULE_0__),moment__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(11),moment__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_1__),react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);const plain=v=>"-"===v||null==v?"-":String(v),amount0=v=>"-"===v||null==v?"-":numeral__WEBPACK_IMPORTED_MODULE_0___default()(v).format("0,0"),amount=amount0;function time(d){return moment__WEBPACK_IMPORTED_MODULE_1___default()(d,"YYYY-MM-DD HH:mm:ss.sss").format("YYYY年MM月DD日 HH:mm:ss")}const amount1=v=>"-"===v||null==v?"-":numeral__WEBPACK_IMPORTED_MODULE_0___default()(v).format("0,0.0"),amount2=v=>"-"===v||null==v?"-":numeral__WEBPACK_IMPORTED_MODULE_0___default()(v).format("0,0.00"),ratio=v=>"-"===v||null==v?"-":numeral__WEBPACK_IMPORTED_MODULE_0___default()(v).format("0.00%"),BeautifulUpIcon=Object(react__WEBPACK_IMPORTED_MODULE_2__.memo)(({size:size=12,style:style})=>react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("svg",{viewBox:"0 0 1024 1024",width:size,height:size,fill:"currentColor",style:style},react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("path",{d:"M682.667 512v426.667H341.333V512h-256L512 0l426.667 512h-256z"}))),BeautifulDownIcon=Object(react__WEBPACK_IMPORTED_MODULE_2__.memo)(({size:size=12,style:style})=>react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("svg",{viewBox:"0 0 1024 1024",width:size,height:size,fill:"currentColor",style:style},react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("path",{d:"M682.667 426.667V0H341.333v426.667h-256l426.667 512 426.667-512h-256z"}))),lfl=value=>{return null==value||"-"===value||isNaN(value)||value===1/0||value===-1/0?render("-"):render((value=Number(value))>0?react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_2___default.a.Fragment,null,react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("span",{style:{color:"#f4485c"}},numeral__WEBPACK_IMPORTED_MODULE_0___default()(value).format("0.00%")),react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(BeautifulUpIcon,{style:{marginLeft:4,color:"#f4485c"}})):value<0?react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_2___default.a.Fragment,null,react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("span",{style:{color:"#00a854"}},numeral__WEBPACK_IMPORTED_MODULE_0___default()(value).format("0.00%")),react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(BeautifulDownIcon,{style:{marginLeft:4,color:"#00a854"}})):react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("span",{style:{color:"#838383"}},"0"));function render(children){return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("div",{className:"lfl-cell",style:{display:"inline-flex",alignItems:"center",justifyContent:"flex-end"}},children)}},money=v=>"-"===v||null==v?"-":(v=Number(v))<0?"-"+money(-v):0===v?String(v):v<1e4?numeral__WEBPACK_IMPORTED_MODULE_0___default()(v).format("0,0"):v<1e5?numeral__WEBPACK_IMPORTED_MODULE_0___default()(v/1e4).format("0.0")+"万":v<1e8?numeral__WEBPACK_IMPORTED_MODULE_0___default()(v/1e4).format("0")+"万":v<1e9?numeral__WEBPACK_IMPORTED_MODULE_0___default()(v/1e8).format("0.0")+"亿":numeral__WEBPACK_IMPORTED_MODULE_0___default()(v/1e8).format("0")+"亿";try{time.displayName="time",time.__docgenInfo={description:"",displayName:"time",props:{toString:{defaultValue:null,description:"Returns a string representation of a string.",name:"toString",required:!1,type:{name:"() => string"}},charAt:{defaultValue:null,description:"Returns the character at the specified index.\n@param pos The zero-based index of the desired character.",name:"charAt",required:!0,type:{name:"(pos: number) => string"}},charCodeAt:{defaultValue:null,description:"Returns the Unicode value of the character at the specified location.\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",name:"charCodeAt",required:!0,type:{name:"(index: number) => number"}},concat:{defaultValue:null,description:"Returns a string that contains the concatenation of two or more strings.\n@param strings The strings to append to the end of the string.",name:"concat",required:!0,type:{name:"(...strings: string[]) => string"}},indexOf:{defaultValue:null,description:"Returns the position of the first occurrence of a substring.\n@param searchString The substring to search for in the string\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",name:"indexOf",required:!0,type:{name:"(searchString: string, position?: number) => number"}},lastIndexOf:{defaultValue:null,description:"Returns the last occurrence of a substring in the string.\n@param searchString The substring to search for.\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.",name:"lastIndexOf",required:!0,type:{name:"(searchString: string, position?: number) => number"}},localeCompare:{defaultValue:null,description:"Determines whether two strings are equivalent in the current locale.\nDetermines whether two strings are equivalent in the current or specified locale.\n@param that String to compare to target string\n@param that String to compare to target string\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.",name:"localeCompare",required:!0,type:{name:"{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }"}},match:{defaultValue:null,description:"Matches a string with a regular expression, and returns an array containing the results of that search.\nMatches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found.\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\n@param matcher An object that supports being matched against.",name:"match",required:!0,type:{name:"{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }"}},replace:{defaultValue:null,description:"Replaces text in a string, using a regular expression or search string.\nReplaces text in a string, using a regular expression or search string.\nReplaces text in a string, using an object that supports replacement within a string.\nReplaces text in a string, using an object that supports replacement within a string.\n@param searchValue A string to search for.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A string to search for.\n@param replacer A function that returns the replacement text.\n@param searchValue A object can search for and replace matches within a string.\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n@param searchValue A object can search for and replace matches within a string.\n@param replacer A function that returns the replacement text.",name:"replace",required:!0,type:{name:"{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }"}},search:{defaultValue:null,description:"Finds the first substring match in a regular expression search.\nFinds the first substring match in a regular expression search.\n@param regexp The regular expression pattern and applicable flags.\n@param searcher An object which supports searching within a string.",name:"search",required:!0,type:{name:"{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }"}},slice:{defaultValue:null,description:"Returns a section of a string.\n@param start The index to the beginning of the specified portion of stringObj.\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\rIf this value is not specified, the substring continues to the end of stringObj.",name:"slice",required:!0,type:{name:"(start?: number, end?: number) => string"}},split:{defaultValue:null,description:"Split a string into substrings using the specified separator and return them as an array.\nSplit a string into substrings using the specified separator and return them as an array.\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n@param limit A value used to limit the number of elements returned in the array.\n@param splitter An object that can split a string.\n@param limit A value used to limit the number of elements returned in the array.",name:"split",required:!0,type:{name:"{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }"}},substring:{defaultValue:null,description:"Returns the substring at the specified location within a String object.\n@param start The zero-based index number indicating the beginning of the substring.\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\rIf end is omitted, the characters from start through the end of the original string are returned.",name:"substring",required:!0,type:{name:"(start: number, end?: number) => string"}},toLowerCase:{defaultValue:null,description:"Converts all the alphabetic characters in a string to lowercase.",name:"toLowerCase",required:!0,type:{name:"() => string"}},toLocaleLowerCase:{defaultValue:null,description:"Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",name:"toLocaleLowerCase",required:!0,type:{name:"(locales?: string | string[]) => string"}},toUpperCase:{defaultValue:null,description:"Converts all the alphabetic characters in a string to uppercase.",name:"toUpperCase",required:!0,type:{name:"() => string"}},toLocaleUpperCase:{defaultValue:null,description:"Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",name:"toLocaleUpperCase",required:!0,type:{name:"(locales?: string | string[]) => string"}},trim:{defaultValue:null,description:"Removes the leading and trailing white space and line terminator characters from a string.",name:"trim",required:!0,type:{name:"() => string"}},length:{defaultValue:null,description:"Returns the length of a String object.",name:"length",required:!0,type:{name:"number"}},substr:{defaultValue:null,description:"Gets a substring beginning at the specified location and having the specified length.\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\n@param length The number of characters to include in the returned substring.",name:"substr",required:!0,type:{name:"(from: number, length?: number) => string"}},valueOf:{defaultValue:null,description:"Returns the primitive value of the specified object.",name:"valueOf",required:!1,type:{name:"() => string"}},codePointAt:{defaultValue:null,description:"Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\r\nthe String resulting from converting this object to a String.\r\nIf there is no element at that position, the result is undefined.\r\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",name:"codePointAt",required:!0,type:{name:"(pos: number) => number"}},includes:{defaultValue:null,description:"Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\r\ngreater than or equal to position; otherwise, returns false.\n@param searchString search string\n@param position If position is undefined, 0 is assumed, so as to search all of the String.",name:"includes",required:!0,type:{name:"(searchString: string, position?: number) => boolean"}},endsWith:{defaultValue:null,description:"Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\r\nendPosition – length(this). Otherwise returns false.",name:"endsWith",required:!0,type:{name:"(searchString: string, endPosition?: number) => boolean"}},normalize:{defaultValue:null,description:'Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\nReturns the String value result of normalizing the string into the normalization form\r\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n@param form Applicable values: "NFC", "NFD", "NFKC", or "NFKD", If not specified default\ris "NFC"\n@param form Applicable values: "NFC", "NFD", "NFKC", or "NFKD", If not specified default\ris "NFC"',name:"normalize",required:!0,type:{name:'{ (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string; (form?: string): string; }'}},repeat:{defaultValue:null,description:"Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.\n@param count number of copies to append",name:"repeat",required:!0,type:{name:"(count: number) => string"}},startsWith:{defaultValue:null,description:"Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\r\nposition. Otherwise returns false.",name:"startsWith",required:!0,type:{name:"(searchString: string, position?: number) => boolean"}},anchor:{defaultValue:null,description:"Returns an <a> HTML anchor element and sets the name attribute to the text value\n@param name",name:"anchor",required:!0,type:{name:"(name: string) => string"}},big:{defaultValue:null,description:"Returns a <big> HTML element",name:"big",required:!0,type:{name:"() => string"}},blink:{defaultValue:null,description:"Returns a <blink> HTML element",name:"blink",required:!0,type:{name:"() => string"}},bold:{defaultValue:null,description:"Returns a <b> HTML element",name:"bold",required:!0,type:{name:"() => string"}},fixed:{defaultValue:null,description:"Returns a <tt> HTML element",name:"fixed",required:!0,type:{name:"() => string"}},fontcolor:{defaultValue:null,description:"Returns a <font> HTML element and sets the color attribute value",name:"fontcolor",required:!0,type:{name:"(color: string) => string"}},fontsize:{defaultValue:null,description:"Returns a <font> HTML element and sets the size attribute value\nReturns a <font> HTML element and sets the size attribute value",name:"fontsize",required:!0,type:{name:"{ (size: number): string; (size: string): string; }"}},italics:{defaultValue:null,description:"Returns an <i> HTML element",name:"italics",required:!0,type:{name:"() => string"}},link:{defaultValue:null,description:"Returns an <a> HTML element and sets the href attribute value",name:"link",required:!0,type:{name:"(url: string) => string"}},small:{defaultValue:null,description:"Returns a <small> HTML element",name:"small",required:!0,type:{name:"() => string"}},strike:{defaultValue:null,description:"Returns a <strike> HTML element",name:"strike",required:!0,type:{name:"() => string"}},sub:{defaultValue:null,description:"Returns a <sub> HTML element",name:"sub",required:!0,type:{name:"() => string"}},sup:{defaultValue:null,description:"Returns a <sup> HTML element",name:"sup",required:!0,type:{name:"() => string"}},"__@iterator":{defaultValue:null,description:"Iterator",name:"__@iterator",required:!0,type:{name:"() => IterableIterator<string>"}},padStart:{defaultValue:null,description:'Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string\'s length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is " " (U+0020).',name:"padStart",required:!0,type:{name:"(maxLength: number, fillString?: string) => string"}},padEnd:{defaultValue:null,description:'Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.\n@param maxLength The length of the resulting string once the current string has been padded.\rIf this parameter is smaller than the current string\'s length, the current string will be returned as it is.\n@param fillString The string to pad the current string with.\rIf this string is too long, it will be truncated and the left-most part will be applied.\rThe default value for this parameter is " " (U+0020).',name:"padEnd",required:!0,type:{name:"(maxLength: number, fillString?: string) => string"}},trimLeft:{defaultValue:null,description:"Removes whitespace from the left end of a string.",name:"trimLeft",required:!0,type:{name:"() => string"}},trimRight:{defaultValue:null,description:"Removes whitespace from the right end of a string.",name:"trimRight",required:!0,type:{name:"() => string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/assets/format.tsx#time"]={docgenInfo:time.__docgenInfo,name:"time",path:"stories/assets/format.tsx#time"})}catch(__react_docgen_typescript_loader_error){}try{plain.displayName="plain",plain.__docgenInfo={description:"",displayName:"plain",props:{toString:{defaultValue:null,description:"Returns a string representation of a string.\nReturns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",name:"toString",required:!1,type:{name:"(() => string) | ((radix?: number) => string)"}},valueOf:{defaultValue:null,description:"Returns the primitive value of the specified object.\nReturns the primitive value of the specified object.",name:"valueOf",required:!1,type:{name:"(() => string) | (() => number)"}},toLocaleString:{defaultValue:null,description:"Returns a date converted to a string using the current locale.\nConverts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",name:"toLocaleString",required:!1,type:{name:"(() => string) | ((locales?: string | string[], options?: NumberFormatOptions) => string)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/assets/format.tsx#plain"]={docgenInfo:plain.__docgenInfo,name:"plain",path:"stories/assets/format.tsx#plain"})}catch(__react_docgen_typescript_loader_error){}try{amount0.displayName="amount0",amount0.__docgenInfo={description:"数字格式化：千分位 & 保留到个位数",displayName:"amount0",props:{toString:{defaultValue:null,description:"Returns a string representation of a string.\nReturns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",name:"toString",required:!1,type:{name:"(() => string) | ((radix?: number) => string)"}},valueOf:{defaultValue:null,description:"Returns the primitive value of the specified object.\nReturns the primitive value of the specified object.",name:"valueOf",required:!1,type:{name:"(() => string) | (() => number)"}},toLocaleString:{defaultValue:null,description:"Returns a date converted to a string using the current locale.\nConverts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",name:"toLocaleString",required:!1,type:{name:"(() => string) | ((locales?: string | string[], options?: NumberFormatOptions) => string)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/assets/format.tsx#amount0"]={docgenInfo:amount0.__docgenInfo,name:"amount0",path:"stories/assets/format.tsx#amount0"})}catch(__react_docgen_typescript_loader_error){}try{amount.displayName="amount",amount.__docgenInfo={description:"",displayName:"amount",props:{toString:{defaultValue:null,description:"Returns a string representation of a string.\nReturns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",name:"toString",required:!1,type:{name:"(() => string) | ((radix?: number) => string)"}},valueOf:{defaultValue:null,description:"Returns the primitive value of the specified object.\nReturns the primitive value of the specified object.",name:"valueOf",required:!1,type:{name:"(() => string) | (() => number)"}},toLocaleString:{defaultValue:null,description:"Returns a date converted to a string using the current locale.\nConverts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",name:"toLocaleString",required:!1,type:{name:"(() => string) | ((locales?: string | string[], options?: NumberFormatOptions) => string)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/assets/format.tsx#amount"]={docgenInfo:amount.__docgenInfo,name:"amount",path:"stories/assets/format.tsx#amount"})}catch(__react_docgen_typescript_loader_error){}try{amount1.displayName="amount1",amount1.__docgenInfo={description:"数字格式化：千分位 & 保留到一位小数",displayName:"amount1",props:{toString:{defaultValue:null,description:"Returns a string representation of a string.\nReturns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",name:"toString",required:!1,type:{name:"(() => string) | ((radix?: number) => string)"}},valueOf:{defaultValue:null,description:"Returns the primitive value of the specified object.\nReturns the primitive value of the specified object.",name:"valueOf",required:!1,type:{name:"(() => string) | (() => number)"}},toLocaleString:{defaultValue:null,description:"Returns a date converted to a string using the current locale.\nConverts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",name:"toLocaleString",required:!1,type:{name:"(() => string) | ((locales?: string | string[], options?: NumberFormatOptions) => string)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/assets/format.tsx#amount1"]={docgenInfo:amount1.__docgenInfo,name:"amount1",path:"stories/assets/format.tsx#amount1"})}catch(__react_docgen_typescript_loader_error){}try{amount2.displayName="amount2",amount2.__docgenInfo={description:"数字格式化：千分位 & 保留两位小数",displayName:"amount2",props:{toString:{defaultValue:null,description:"Returns a string representation of a string.\nReturns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",name:"toString",required:!1,type:{name:"(() => string) | ((radix?: number) => string)"}},valueOf:{defaultValue:null,description:"Returns the primitive value of the specified object.\nReturns the primitive value of the specified object.",name:"valueOf",required:!1,type:{name:"(() => string) | (() => number)"}},toLocaleString:{defaultValue:null,description:"Returns a date converted to a string using the current locale.\nConverts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",name:"toLocaleString",required:!1,type:{name:"(() => string) | ((locales?: string | string[], options?: NumberFormatOptions) => string)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/assets/format.tsx#amount2"]={docgenInfo:amount2.__docgenInfo,name:"amount2",path:"stories/assets/format.tsx#amount2"})}catch(__react_docgen_typescript_loader_error){}try{ratio.displayName="ratio",ratio.__docgenInfo={description:"",displayName:"ratio",props:{toString:{defaultValue:null,description:"Returns a string representation of a string.\nReturns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",name:"toString",required:!1,type:{name:"(() => string) | ((radix?: number) => string)"}},valueOf:{defaultValue:null,description:"Returns the primitive value of the specified object.\nReturns the primitive value of the specified object.",name:"valueOf",required:!1,type:{name:"(() => string) | (() => number)"}},toLocaleString:{defaultValue:null,description:"Returns a date converted to a string using the current locale.\nConverts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",name:"toLocaleString",required:!1,type:{name:"(() => string) | ((locales?: string | string[], options?: NumberFormatOptions) => string)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/assets/format.tsx#ratio"]={docgenInfo:ratio.__docgenInfo,name:"ratio",path:"stories/assets/format.tsx#ratio"})}catch(__react_docgen_typescript_loader_error){}try{lfl.displayName="lfl",lfl.__docgenInfo={description:"环比/同比格式化函数，注意 lfl 并不是一个 React 组件. 注意 lfl 生成的 div 样式",displayName:"lfl",props:{toString:{defaultValue:null,description:"Returns a string representation of a string.\nReturns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",name:"toString",required:!1,type:{name:"(() => string) | ((radix?: number) => string)"}},valueOf:{defaultValue:null,description:"Returns the primitive value of the specified object.\nReturns the primitive value of the specified object.",name:"valueOf",required:!1,type:{name:"(() => string) | (() => number)"}},toLocaleString:{defaultValue:null,description:"Returns a date converted to a string using the current locale.\nConverts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",name:"toLocaleString",required:!1,type:{name:"(() => string) | ((locales?: string | string[], options?: NumberFormatOptions) => string)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/assets/format.tsx#lfl"]={docgenInfo:lfl.__docgenInfo,name:"lfl",path:"stories/assets/format.tsx#lfl"})}catch(__react_docgen_typescript_loader_error){}try{money.displayName="money",money.__docgenInfo={description:"",displayName:"money",props:{toString:{defaultValue:null,description:"Returns a string representation of a string.\nReturns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",name:"toString",required:!1,type:{name:"(() => string) | ((radix?: number) => string)"}},valueOf:{defaultValue:null,description:"Returns the primitive value of the specified object.\nReturns the primitive value of the specified object.",name:"valueOf",required:!1,type:{name:"(() => string) | (() => number)"}},toLocaleString:{defaultValue:null,description:"Returns a date converted to a string using the current locale.\nConverts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",name:"toLocaleString",required:!1,type:{name:"(() => string) | ((locales?: string | string[], options?: NumberFormatOptions) => string)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/assets/format.tsx#money"]={docgenInfo:money.__docgenInfo,name:"money",path:"stories/assets/format.tsx#money"})}catch(__react_docgen_typescript_loader_error){}},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("1t7P")},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return cols})),__webpack_require__.d(__webpack_exports__,"b",(function(){return testProvColumns})),__webpack_require__.d(__webpack_exports__,"c",(function(){return useAllDataSource})),__webpack_require__.d(__webpack_exports__,"e",(function(){return useProvinceDataSource})),__webpack_require__.d(__webpack_exports__,"d",(function(){return useCityDataSource}));var lodash__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(78),lodash__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0),_cdn_data__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(63),_format__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(17);const rawCols={provinceName:{code:"provinceName",name:"省份",width:150},cityName:{code:"cityName",name:"城市",width:150},confirmedCount:{code:"confirmedCount",name:"确诊",width:100,render:_format__WEBPACK_IMPORTED_MODULE_3__.a,align:"right"},suspectedCount:{code:"suspectedCount",name:"疑似",width:100,render:_format__WEBPACK_IMPORTED_MODULE_3__.a,align:"right"},curedCount:{code:"curedCount",name:"治愈",width:100,render:_format__WEBPACK_IMPORTED_MODULE_3__.a,align:"right"},deadCount:{code:"deadCount",name:"死亡",width:100,render:_format__WEBPACK_IMPORTED_MODULE_3__.a,align:"right"},updateTime:{code:"updateTime",name:"最后更新时间",width:180,render:_format__WEBPACK_IMPORTED_MODULE_3__.d}},lockProvCol={lock:!0,...rawCols.provinceName},lockCityCol={lock:!0,...rawCols.cityName},lockTimeCol={lock:!0,...rawCols.updateTime},indCols=[rawCols.confirmedCount,rawCols.curedCount,rawCols.deadCount],cols={...rawCols,indCols:indCols,lockProvCol:lockProvCol,lockCityCol:lockCityCol,lockTimeCol:lockTimeCol},testProvColumns=[cols.provinceName,...cols.indCols,cols.updateTime];function useAllDataSource(){const[{dataSource:dataSource,isLoading:isLoading},setState]=Object(react__WEBPACK_IMPORTED_MODULE_1__.useState)({dataSource:[],isLoading:!0});return Object(react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{Object(_cdn_data__WEBPACK_IMPORTED_MODULE_2__.c)().then(data=>{setState({dataSource:lodash__WEBPACK_IMPORTED_MODULE_0___default.a.sortBy(data.map(rawItem=>({provinceName:rawItem.provinceName,cityName:rawItem.cityName,confirmedCount:Number(rawItem.city_confirmedCount),suspectedCount:Number(rawItem.city_suspectedCount),curedCount:Number(rawItem.city_curedCount),deadCount:Number(rawItem.city_deadCount),updateTime:rawItem.updateTime})),d=>d.updateTime),isLoading:!1})})},[]),{dataSource:dataSource,isLoading:isLoading}}function useProvinceDataSource(){const[{dataSource:dataSource,isLoading:isLoading},setState]=Object(react__WEBPACK_IMPORTED_MODULE_1__.useState)({dataSource:[],isLoading:!0});return Object(react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{Object(_cdn_data__WEBPACK_IMPORTED_MODULE_2__.c)().then(data=>{const provinceItems=lodash__WEBPACK_IMPORTED_MODULE_0___default.a.uniqBy(data,d=>d.provinceName+"--"+d.updateTime).map(d=>({provinceName:d.provinceName,confirmedCount:Number(d.province_confirmedCount),suspectedCount:Number(d.province_suspectedCount),curedCount:Number(d.province_curedCount),deadCount:Number(d.province_deadCount),updateTime:d.updateTime}));setState({dataSource:lodash__WEBPACK_IMPORTED_MODULE_0___default.a.orderBy(Object.values(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.groupBy(provinceItems,d=>d.provinceName)).map(data=>lodash__WEBPACK_IMPORTED_MODULE_0___default.a.maxBy(data,d=>d.updateTime)),d=>-d.confirmedCount),isLoading:!1})})},[]),{dataSource:dataSource,isLoading:isLoading}}function useCityDataSource(){const[{dataSource:dataSource,isLoading:isLoading},setState]=Object(react__WEBPACK_IMPORTED_MODULE_1__.useState)({dataSource:[],isLoading:!0});return Object(react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{Object(_cdn_data__WEBPACK_IMPORTED_MODULE_2__.c)().then(data=>{const items=Object.values(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.groupBy(data,d=>d.provinceName)).map(byProv=>{const rawProvItem=lodash__WEBPACK_IMPORTED_MODULE_0___default.a.maxBy(byProv,d=>d.updateTime),cityItems=Object.values(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.groupBy(byProv,d=>d.cityName)).map(byCity=>{const rawCityItem=lodash__WEBPACK_IMPORTED_MODULE_0___default.a.maxBy(byCity,d=>d.updateTime);return{provinceName:rawCityItem.provinceName,cityName:rawCityItem.cityName,confirmedCount:Number(rawCityItem.city_confirmedCount),suspectedCount:Number(rawCityItem.city_suspectedCount),curedCount:Number(rawCityItem.city_curedCount),deadCount:Number(rawCityItem.city_deadCount),updateTime:rawCityItem.updateTime}});return{provinceName:rawProvItem.provinceName,confirmedCount:Number(rawProvItem.province_confirmedCount),suspectedCount:Number(rawProvItem.province_suspectedCount),curedCount:Number(rawProvItem.province_curedCount),deadCount:Number(rawProvItem.province_deadCount),updateTime:rawProvItem.updateTime,children:cityItems}});setState({dataSource:lodash__WEBPACK_IMPORTED_MODULE_0___default.a.sortBy(items,d=>-d.confirmedCount).flat(),isLoading:!1})})},[]),{dataSource:dataSource,isLoading:isLoading}}},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("IAdD")},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return Classes})),__webpack_require__.d(__webpack_exports__,"b",(function(){return Styled}));var styled_components__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(29);const Classes={artTableWrapper:"art-table-wrapper",artTable:"art-table",lockShadow:"art-lock-shadow",mainSection:"art-main-section",leftSection:"art-left-section",rightSection:"art-right-section",tableInner:"art-table-inner",tableHeaderWrapper:"art-table-header-wrapper",tableHeader:"art-table-header",tableBody:"art-table-body",tableRow:"art-table-row",tableHeaderRow:"art-table-header-row",tableCell:"art-table-cell",tableHeaderCell:"art-table-header-cell",virtualBlank:"art-virtual-blank",stickyScroll:"art-sticky-scroll",stickyScrollItem:"art-sticky-scroll-item",emptyTableCell:"art-empty-table-cell",emptyWrapper:"art-empty-wrapper",emptyImage:"art-empty-image",emptyTips:"art-empty-tips",loadingWrapper:"art-loading-wrapper",loadingIndicatorWrapper:"art-loading-indicator-wrapper",loadingIndicator:"art-loading-indicator",loadingIndicatorIcon:"art-loading-indicator-icon",loadingContentWrapper:"art-loading-content-wrapper"},Z_lock=20,Z_scrollItem=30,Z_header=5,Z_virtual=3,Z_tableInner=2,Z_shadow=1,ArtTableWrapper=styled_components__WEBPACK_IMPORTED_MODULE_0__.b.div`
  --color: #333;
  --bgcolor: white;
  --header-color: #5a6c84;
  --header-bgcolor: #e9edf2;
  --border-color: #dfe3e8;

  --row-height: 48px;
  --row-hover-color: #f5f5f5;
  --header-row-height: 32px;

  --cell-border: 1px solid var(--border-color);
  --cell-border-horizontal: var(--cell-border);
  --cell-border-vertical: var(--cell-border);

  --header-cell-border: 1px solid var(--border-color);
  --header-cell-border-horizontal: var(--header-cell-border);
  --header-cell-border-vertical: var(--header-cell-border);

  --cell-border-top: var(--cell-border-horizontal);
  --cell-border-bottom: var(--cell-border-horizontal);
  --cell-border-left: var(--cell-border-vertical);
  --cell-border-right: var(--cell-border-vertical);

  --header-cell-border-top: var(--header-cell-border-horizontal);
  --header-cell-border-bottom: var(--header-cell-border-horizontal);
  --header-cell-border-left: var(--header-cell-border-vertical);
  --header-cell-border-right: var(--header-cell-border-vertical);

  background: var(--bgcolor);
  box-sizing: border-box;
  * {
    box-sizing: border-box;
  }

  // 表格外边框由 art-table-wrapper 提供，而不是由单元格提供
  &.use-outer-border {
    border: 1px solid var(--border-color);

    .${Classes.tableCell}.first, .${Classes.tableHeaderCell}.first {
      border-left: none;
    }
    .${Classes.tableCell}.last, .${Classes.tableHeaderCell}.last {
      border-right: none;
    }
    .${Classes.tableHeaderRow}.first .${Classes.tableHeaderCell}, .${Classes.tableRow}.first .${Classes.tableCell} {
      border-top: none;
    }
    .${Classes.tableRow}.last .${Classes.tableCell} {
      border-bottom: none;
    }
  }

  // 表格 header 总是从 body 中同步滚动 scrollLeft
  .${Classes.tableHeader} {
    overflow: hidden;
  }

  .${Classes.virtualBlank} {
    background: var(--bgcolor);
    // 这里是为了遮盖 z-index=1 的 lock-shadow
    z-index: ${Z_virtual};
  }
`,MainSection=styled_components__WEBPACK_IMPORTED_MODULE_0__.b.div`
  // 表格的基本样式
  .${Classes.tableBody} {
    overflow: auto;
  }
  .${Classes.tableHeader} {
    overflow: hidden;
  }
`,EmptyTableCell=styled_components__WEBPACK_IMPORTED_MODULE_0__.b.td`
  height: 200px;

  .use-outer-border & {
    border: none;
  }
`,ArtTable=styled_components__WEBPACK_IMPORTED_MODULE_0__.b.div`
  // 表格的主要样式
  cursor: default;
  color: var(--color);
  font-size: 12px;
  line-height: 1.28571;
  position: relative;

  &.has-header {
    .${Classes.tableRow}.first td {
      border-top: none;
    }
  }

  &.sticky {
    .${Classes.tableHeaderWrapper} {
      position: sticky;
      top: 0;
      z-index: ${Z_header};
    }
  }

  .${Classes.tableHeaderWrapper} {
    background: var(--header-bgcolor);
  }

  .${Classes.tableRow} {
    &.hovered {
      background: var(--row-hover-color);
    }
  }

  table {
    width: 100%;
    table-layout: fixed;
    background: var(--bgcolor);
  }

  .${Classes.tableCell} {
    height: var(--row-height);
  }
  td,
  th {
    padding: 8px 12px;
    text-overflow: ellipsis;
    word-break: break-all;
    overflow: hidden;
  }

  // 表头单元格的基本样式
  th {
    height: var(--header-row-height);
    color: var(--header-color);
    font-weight: 400;
    background: var(--header-bgcolor);
    text-align: left;
  }

  // 表格的边框样式
  table {
    border-collapse: collapse;
    border-spacing: 0;
  }

  td {
    border-left: var(--cell-border-left);
    border-right: var(--cell-border-right);
    border-top: var(--cell-border-top);
    border-bottom: var(--cell-border-bottom);
  }

  th {
    border-left: var(--header-cell-border-left);
    border-right: var(--header-cell-border-right);
    border-top: var(--header-cell-border-top);
    border-bottom: var(--header-cell-border-bottom);
  }
`,LockSectionBase=styled_components__WEBPACK_IMPORTED_MODULE_0__.b.div`
  z-index: ${Z_lock};

  table {
    width: auto;
    overflow: hidden;
  }

  .${Classes.tableBody} {
    overflow: hidden;
  }
`,LeftSection=Object(styled_components__WEBPACK_IMPORTED_MODULE_0__.b)(LockSectionBase)`
  position: absolute;
  left: 0;
  top: 0;

  &.${Classes.lockShadow} {
    &::before {
      content: '';
      position: absolute;
      top: 6px;
      width: 10px;
      bottom: 6px;
      z-index: ${Z_shadow};
      right: 0;
      box-shadow: 0 0 5px 1px rgba(0, 0, 0, 0.3);
    }
    > .${Classes.tableInner} {
      position: relative;
      // 这里是为了遮盖 z-index=1 的 lock-shadow
      z-index: ${Z_tableInner};
    }
  }
`,RightSection=Object(styled_components__WEBPACK_IMPORTED_MODULE_0__.b)(LockSectionBase)`
  position: absolute;
  right: 0;
  top: 0;

  &.${Classes.lockShadow} {
    &::before {
      content: '';
      position: absolute;
      top: 6px;
      width: 10px;
      bottom: 6px;
      z-index: ${Z_shadow};
      left: 0;
      box-shadow: 0 0 5px 1px rgba(0, 0, 0, 0.3);
    }
    > .${Classes.tableInner} {
      position: relative;
      z-index: ${Z_tableInner};
    }
  }
`,EmptyWrapper=styled_components__WEBPACK_IMPORTED_MODULE_0__.b.div`
  color: #99a3b3;
  font-size: 12px;
  text-align: center;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);

  .${Classes.emptyImage} {
    width: 50px;
    height: 50px;
  }

  .${Classes.emptyTips} {
    margin-top: 16px;
    line-height: 1.5;
  }
`,Styled={ArtTableWrapper:ArtTableWrapper,ArtTable:ArtTable,MainSection:MainSection,LeftSection:LeftSection,RightSection:RightSection,StickyScroll:styled_components__WEBPACK_IMPORTED_MODULE_0__.b.div`
  overflow: auto;
  position: sticky;
  bottom: 0;
  z-index: ${Z_scrollItem};
  margin-top: -17px;

  .${Classes.stickyScrollItem} {
    // 必须有高度才能出现滚动条
    height: 1px;
    visibility: hidden;
  }
`,EmptyWrapper:EmptyWrapper,EmptyTableCell:EmptyTableCell}},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("+KXO")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("ho0z")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("vrRf")},,,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"d",(function(){return STYLED_REF_PROP})),__webpack_require__.d(__webpack_exports__,"c",(function(){return OVERSCAN_SIZE})),__webpack_require__.d(__webpack_exports__,"b",(function(){return LOADING_ICON_SIZE})),__webpack_require__.d(__webpack_exports__,"a",(function(){return AUTO_VIRTUAL_THRESHOLD})),__webpack_require__.d(__webpack_exports__,"j",(function(){return sum})),__webpack_require__.d(__webpack_exports__,"e",(function(){return batchAdjustLeftCellSizes})),__webpack_require__.d(__webpack_exports__,"f",(function(){return batchAdjustRightCellSizes})),__webpack_require__.d(__webpack_exports__,"l",(function(){return throttledWindowResize$})),__webpack_require__.d(__webpack_exports__,"g",(function(){return getScrollbarSize})),__webpack_require__.d(__webpack_exports__,"k",(function(){return syncScrollLeft})),__webpack_require__.d(__webpack_exports__,"h",(function(){return query})),__webpack_require__.d(__webpack_exports__,"i",(function(){return queryAll}));var styled_components_browser_esm=__webpack_require__(29),fromEvent=__webpack_require__(510),scheduler_async=__webpack_require__(509),merge=__webpack_require__(916),throttleTime=__webpack_require__(918),map=__webpack_require__(174),mapTo=__webpack_require__(912),scan=__webpack_require__(913),Observable=__webpack_require__(62),Subject=__webpack_require__(917);class StateObservable_StateObservable extends Observable.a{constructor(input$,initialState){super(subscriber=>{const subscription=this.__notifier.subscribe(subscriber);return subscription&&!subscription.closed&&subscriber.next(this.value),subscription}),this.__notifier=new Subject.a,this.value=initialState,input$.subscribe(value=>{value!==this.value&&(this.value=value,this.__notifier.next(value))})}}const STYLED_VERSION=null!=styled_components_browser_esm.a?"v5":"v3",STYLED_REF_PROP="v3"===STYLED_VERSION?"innerRef":"ref",OVERSCAN_SIZE=100,LOADING_ICON_SIZE=40,AUTO_VIRTUAL_THRESHOLD=80;function sum(arr){let result=0;return arr.forEach(x=>{result+=x}),result}function batchAdjustLeftCellSizes(leftTableRows,mainTableRows){const leftRowCount=leftTableRows.length,sizes=[];for(let i=0;i<leftRowCount;i++){const leftCellCount=leftTableRows.item(i).cells.length,mainRow=mainTableRows.item(i);for(let j=0;j<leftCellCount;j++){const cell=mainRow.cells.item(j);sizes.push({h:cell.offsetHeight,w:cell.offsetWidth})}}let n=0;for(let i=0;i<leftRowCount;i++){const leftRow=leftTableRows.item(i),cellCount=leftRow.cells.length;for(let j=0;j<cellCount;j++){const cell=leftRow.cells.item(j),size=sizes[n];n+=1,cell.style.width=size.w+"px",cell.style.height=size.h+"px"}}}function batchAdjustRightCellSizes(rightTableRows,mainTableRows){const rightRowCount=rightTableRows.length,sizes=[];for(let i=0;i<rightRowCount;i++){const rightCellCount=rightTableRows.item(i).cells.length,mainRow=mainTableRows.item(i),mainCellCount=mainRow.cells.length;for(let j=0;j<rightCellCount;j++){const mainCell=mainRow.cells.item(mainCellCount-1-j);sizes.push({h:mainCell.offsetHeight,w:mainCell.offsetWidth})}}let n=0;for(let i=0;i<rightRowCount;i++){const rightRow=rightTableRows.item(i),rightCellCount=rightRow.cells.length;for(let j=0;j<rightCellCount;j++){const rightCell=rightRow.cells.item(rightCellCount-1-j),size=sizes[n];n+=1,rightCell.style.width=size.w+"px",rightCell.style.height=size.h+"px"}}}const throttledWindowResize$=Object(fromEvent.a)(window,"resize").pipe(Object(throttleTime.a)(150,scheduler_async.a,{leading:!0,trailing:!0}));function getScrollbarSizeImpl(){const scrollDiv=document.createElement("div");scrollDiv.style.position="absolute",scrollDiv.style.width="100px",scrollDiv.style.height="100px",scrollDiv.style.overflow="scroll",scrollDiv.style.top="-9999px",document.body.appendChild(scrollDiv);const scrollbarWidth=scrollDiv.offsetWidth-scrollDiv.clientWidth,scrollbarHeight=scrollDiv.offsetHeight-scrollDiv.clientHeight;return document.body.removeChild(scrollDiv),{width:scrollbarWidth,height:scrollbarHeight}}const scrollBarSize$=new StateObservable_StateObservable(throttledWindowResize$.pipe(Object(map.a)(()=>getScrollbarSizeImpl())),getScrollbarSizeImpl());function getScrollbarSize(){return scrollBarSize$.value}function syncScrollLeft(x,y){const otherScrollTarget=target=>"x"===target?"y":"x";return Object(merge.a)(Object(fromEvent.a)(x,"scroll").pipe(Object(mapTo.a)("x")),Object(fromEvent.a)(y,"scroll").pipe(Object(mapTo.a)("y"))).pipe(Object(scan.a)((acc,target)=>acc.skip===target?{skip:null,fire:!1,target:target}:{skip:otherScrollTarget(target),fire:!0,target:target},{skip:null,fire:!1,target:null})).subscribe(({fire:fire,target:target})=>{fire&&("x"===target?y.scrollLeft=x.scrollLeft:x.scrollLeft=y.scrollLeft)})}function query(elem,className){return null==elem?void 0:elem.querySelector("."+className)}function queryAll(elem,className){return null==elem?void 0:elem.querySelectorAll("."+className)}try{sum.displayName="sum",sum.__docgenInfo={description:"",displayName:"sum",props:{length:{defaultValue:null,description:"Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",name:"length",required:!0,type:{name:"number"}},toString:{defaultValue:null,description:"Returns a string representation of an array.",name:"toString",required:!1,type:{name:"() => string"}},toLocaleString:{defaultValue:null,description:"Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",name:"toLocaleString",required:!1,type:{name:"() => string"}},pop:{defaultValue:null,description:"Removes the last element from an array and returns it.",name:"pop",required:!0,type:{name:"() => number"}},push:{defaultValue:null,description:"Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",name:"push",required:!0,type:{name:"(...items: number[]) => number"}},concat:{defaultValue:null,description:"Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",name:"concat",required:!0,type:{name:"{ (...items: ConcatArray<number>[]): number[]; (...items: (number | ConcatArray<number>)[]): number[]; }"}},join:{defaultValue:null,description:"Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",name:"join",required:!0,type:{name:"(separator?: string) => string"}},reverse:{defaultValue:null,description:"Reverses the elements in an Array.",name:"reverse",required:!0,type:{name:"() => number[]"}},shift:{defaultValue:null,description:"Removes the first element from an array and returns it.",name:"shift",required:!0,type:{name:"() => number"}},slice:{defaultValue:null,description:"Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.",name:"slice",required:!0,type:{name:"(start?: number, end?: number) => number[]"}},sort:{defaultValue:null,description:"Sorts an array.\n@param compareFn Function used to determine the order of the elements. It is expected to return\ra negative value if first argument is less than second argument, zero if they're equal and a positive\rvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r```ts\r[11,2,22,1].sort((a, b) => a - b)\r```",name:"sort",required:!0,type:{name:"(compareFn?: (a: number, b: number) => number) => number[]"}},splice:{defaultValue:null,description:"Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",name:"splice",required:!0,type:{name:"{ (start: number, deleteCount?: number): number[]; (start: number, deleteCount: number, ...items: number[]): number[]; }"}},unshift:{defaultValue:null,description:"Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",name:"unshift",required:!0,type:{name:"(...items: number[]) => number"}},indexOf:{defaultValue:null,description:"Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",name:"indexOf",required:!0,type:{name:"(searchElement: number, fromIndex?: number) => number"}},lastIndexOf:{defaultValue:null,description:"Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",name:"lastIndexOf",required:!0,type:{name:"(searchElement: number, fromIndex?: number) => number"}},every:{defaultValue:null,description:"Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",name:"every",required:!0,type:{name:"(callbackfn: (value: number, index: number, array: number[]) => unknown, thisArg?: any) => boolean"}},some:{defaultValue:null,description:"Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",name:"some",required:!0,type:{name:"(callbackfn: (value: number, index: number, array: number[]) => unknown, thisArg?: any) => boolean"}},forEach:{defaultValue:null,description:"Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"forEach",required:!0,type:{name:"(callbackfn: (value: number, index: number, array: number[]) => void, thisArg?: any) => void"}},map:{defaultValue:null,description:"Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"map",required:!0,type:{name:"<U>(callbackfn: (value: number, index: number, array: number[]) => U, thisArg?: any) => U[]"}},filter:{defaultValue:null,description:"Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"filter",required:!0,type:{name:"{ <S extends number>(callbackfn: (value: number, index: number, array: number[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: number, index: number, array: number[]) => unknown, thisArg?: any): number[]; }"}},reduce:{defaultValue:null,description:"Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",name:"reduce",required:!0,type:{name:"{ (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number): number; (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number, initialValue: number): number; <U>(callbackfn: (previousValue: U, currentValue: number, ..."}},reduceRight:{defaultValue:null,description:"Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",name:"reduceRight",required:!0,type:{name:"{ (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number): number; (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number, initialValue: number): number; <U>(callbackfn: (previousValue: U, currentValue: number, ..."}},find:{defaultValue:null,description:"Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",name:"find",required:!0,type:{name:"{ <S extends number>(predicate: (this: void, value: number, index: number, obj: number[]) => value is S, thisArg?: any): S; (predicate: (value: number, index: number, obj: number[]) => unknown, thisArg?: any): number; }"}},findIndex:{defaultValue:null,description:"Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",name:"findIndex",required:!0,type:{name:"(predicate: (value: number, index: number, obj: number[]) => unknown, thisArg?: any) => number"}},fill:{defaultValue:null,description:"Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",name:"fill",required:!0,type:{name:"(value: number, start?: number, end?: number) => number[]"}},copyWithin:{defaultValue:null,description:"Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",name:"copyWithin",required:!0,type:{name:"(target: number, start: number, end?: number) => number[]"}},"__@iterator":{defaultValue:null,description:"Iterator",name:"__@iterator",required:!0,type:{name:"() => IterableIterator<number>"}},entries:{defaultValue:null,description:"Returns an iterable of key, value pairs for every entry in the array",name:"entries",required:!0,type:{name:"() => IterableIterator<[number, number]>"}},keys:{defaultValue:null,description:"Returns an iterable of keys in the array",name:"keys",required:!0,type:{name:"() => IterableIterator<number>"}},values:{defaultValue:null,description:"Returns an iterable of values in the array",name:"values",required:!0,type:{name:"() => IterableIterator<number>"}},"__@unscopables":{defaultValue:null,description:"Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",name:"__@unscopables",required:!0,type:{name:"() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"}},includes:{defaultValue:null,description:"Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",name:"includes",required:!0,type:{name:"(searchElement: number, fromIndex?: number) => boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/base-table/utils.tsx#sum"]={docgenInfo:sum.__docgenInfo,name:"sum",path:"src/base-table/utils.tsx#sum"})}catch(__react_docgen_typescript_loader_error){}try{syncScrollLeft.displayName="syncScrollLeft",syncScrollLeft.__docgenInfo={description:"同步两个元素之间的 scrollLeft\n在 x.onScroll 中设置 y.scrollLeft 将会触发 y.onScroll (反之亦然)\n为了避免相互调用，在设置 scrollLeft 该方法会用 .skip 记录接下来需要忽略的 scroll 事件",displayName:"syncScrollLeft",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/base-table/utils.tsx#syncScrollLeft"]={docgenInfo:syncScrollLeft.__docgenInfo,name:"syncScrollLeft",path:"src/base-table/utils.tsx#syncScrollLeft"})}catch(__react_docgen_typescript_loader_error){}try{STYLED_VERSION.displayName="STYLED_VERSION",STYLED_VERSION.__docgenInfo={description:"styled-components 类库的版本，ali-react-table 同时支持 v3 和 v5",displayName:"STYLED_VERSION",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/base-table/utils.tsx#STYLED_VERSION"]={docgenInfo:STYLED_VERSION.__docgenInfo,name:"STYLED_VERSION",path:"src/base-table/utils.tsx#STYLED_VERSION"})}catch(__react_docgen_typescript_loader_error){}},,function(module,__webpack_exports__,__webpack_require__){"use strict";var classnames=__webpack_require__(8),classnames_default=__webpack_require__.n(classnames),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),Subscription=__webpack_require__(71),noop=__webpack_require__(909),filter=__webpack_require__(914),map=__webpack_require__(174),distinctUntilChanged=__webpack_require__(915),internals=__webpack_require__(59),styles=__webpack_require__(21);function EmptyTable({colgroup:colgroup,colSpan:colSpan,isLoading:isLoading,emptyContent:emptyContent}){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("table",null,colgroup,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("tbody",null,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("tr",null,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(styles.b.EmptyTableCell,{className:styles.a.emptyTableCell,colSpan:colSpan},!isLoading&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(styles.b.EmptyWrapper,{className:styles.a.emptyWrapper},emptyContent)))))}EmptyTable.defaultProps={emptyContent:delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Fragment,null,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("img",{alt:"empty-image",className:styles.a.emptyImage,src:"//img.alicdn.com/tfs/TB1l1LcM3HqK1RjSZJnXXbNLpXa-50-50.svg"}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:styles.a.emptyTips},"没有符合查询条件的数据",delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("br",null),"请修改条件后重新查询"))};try{empty.displayName="empty",empty.__docgenInfo={description:"",displayName:"empty",props:{colgroup:{defaultValue:null,description:"",name:"colgroup",required:!0,type:{name:"any"}},colSpan:{defaultValue:null,description:"",name:"colSpan",required:!0,type:{name:"number"}},isLoading:{defaultValue:null,description:"",name:"isLoading",required:!0,type:{name:"boolean"}},emptyContent:{defaultValue:null,description:"",name:"emptyContent",required:!0,type:{name:"ReactNode"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/base-table/empty.tsx#empty"]={docgenInfo:empty.__docgenInfo,name:"empty",path:"src/base-table/empty.tsx#empty"})}catch(__react_docgen_typescript_loader_error){}var isLeafNode=__webpack_require__(56),collectNodes=__webpack_require__(219),utils=__webpack_require__(30);function resolveVirtualEnabled(virtualEnum,defaultValue){return null==virtualEnum||"auto"===virtualEnum?defaultValue:virtualEnum}function getLeftNestedLockCount(columns){let nestedCount=0;for(const col of columns){if(!isLock(col))break;nestedCount+=1}return nestedCount;function isLock(col){return Object(isLeafNode.a)(col)?col.lock:col.lock||col.children.some(isLock)}}function getDerivedStateFromProps(props,state){const{useVirtual:useVirtualProp,columns:columnsProp,dataSource:dataSourceProp,defaultColumnWidth:defaultColumnWidth}=props,columns=function processColumns(columns,defaultColumnWidth){return function dfs(columns){const result=[];for(let column of columns)if(null==column.width&&null!=defaultColumnWidth&&(column={...column,width:defaultColumnWidth}),Object(isLeafNode.a)(column))column.hidden||result.push(column);else{const nextChildren=dfs(column.children);nextChildren.length>0&&result.push({...column,children:nextChildren})}return result}(columns)}(columnsProp,defaultColumnWidth),leftNestedLockCount=getLeftNestedLockCount(columns),mainFlat=Object(collectNodes.a)(columns,"leaf-only");if(leftNestedLockCount===columns.length)return{flat:{left:[],right:[],main:mainFlat,center:mainFlat},nested:{left:[],right:[],main:columns,center:columns},useVirtual:{horizontal:!1,vertical:!1,header:!1}};const leftNested=columns.slice(0,leftNestedLockCount),rightNestedLockCount=getLeftNestedLockCount(columns.slice().reverse()),centerNested=columns.slice(leftNestedLockCount,columns.length-rightNestedLockCount),rightNested=columns.slice(columns.length-rightNestedLockCount),shouldEnableHozVirtual=mainFlat.length>=utils.a&&mainFlat.every(col=>null!=col.width),shouldEnableVerVirtual=dataSourceProp.length>=utils.a,useVirtual="object"!=typeof useVirtualProp?{horizontal:resolveVirtualEnabled(useVirtualProp,shouldEnableHozVirtual),vertical:resolveVirtualEnabled(useVirtualProp,shouldEnableVerVirtual),header:resolveVirtualEnabled(useVirtualProp,!1)}:{horizontal:resolveVirtualEnabled(useVirtualProp.horizontal,shouldEnableHozVirtual),vertical:resolveVirtualEnabled(useVirtualProp.vertical,shouldEnableVerVirtual),header:resolveVirtualEnabled(useVirtualProp.header,shouldEnableVerVirtual)};return{flat:{left:Object(collectNodes.a)(leftNested,"leaf-only"),main:mainFlat,right:Object(collectNodes.a)(rightNested,"leaf-only"),center:Object(collectNodes.a)(centerNested,"leaf-only")},nested:{left:leftNested,main:columns,right:rightNested,center:centerNested},useVirtual:useVirtual}}try{getDerivedStateFromProps.displayName="getDerivedStateFromProps",getDerivedStateFromProps.__docgenInfo={description:"",displayName:"getDerivedStateFromProps",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/base-table/getDerivedStateFromProps.tsx#getDerivedStateFromProps"]={docgenInfo:getDerivedStateFromProps.__docgenInfo,name:"getDerivedStateFromProps",path:"src/base-table/getDerivedStateFromProps.tsx#getDerivedStateFromProps"})}catch(__react_docgen_typescript_loader_error){}var getTreeDepth=__webpack_require__(908);function range(n){const array=[];for(let i=0;i<n;i++)array.push(i);return array}function calculateLeveledAndFlat(inputNested,rowCount){const leveled=[];for(let depth=0;depth<rowCount;depth++)leveled.push([]);const flat=[];return function dfs(input,depth){let leafCount=0;for(let i=0;i<input.length;i++){const indexedCol=input[i];if(Object(isLeafNode.a)(indexedCol)){leafCount+=1;const wrapped={type:"normal",width:indexedCol.col.width,col:indexedCol.col,colIndex:indexedCol.colIndex,colSpan:1,isLeaf:!0};leveled[depth].push(wrapped),flat.push(wrapped)}else{const dfsRes=dfs(indexedCol.children,depth+1);leafCount+=dfsRes.leafCount,dfsRes.leafCount>0&&leveled[depth].push({type:"normal",width:indexedCol.col.width,col:indexedCol.col,colIndex:indexedCol.colIndex,colSpan:dfsRes.leafCount,isLeaf:!1})}}return{leafCount:leafCount}}(inputNested,0),{flat:flat,leveled:leveled}}function attachColIndex(inputNested,colIndexOffset){return function dfs(input,startColIndex){const result=[];let leafCount=0;for(let i=0;i<input.length;i++){const col=input[i],colIndex=startColIndex+leafCount;if(Object(isLeafNode.a)(col))leafCount+=1,result.push({colIndex:colIndex,col:col});else{const sub=dfs(col.children,colIndex);leafCount+=sub.leafCount,sub.leafCount>0&&result.push({col:col,colIndex:colIndex,children:sub.result})}}return{result:result,leafCount:leafCount}}(inputNested,colIndexOffset).result}function calculateRenderInfo({flat:flat,nested:nested,side:side,hoz:hoz,useVirtual:useVirtual},rowCount){if("main"===side&&useVirtual.header){const leftPart=calculateLeveledAndFlat(attachColIndex(nested.left,0),rowCount),centerPart=calculateLeveledAndFlat(function filterNestedCenter(centerNested,hoz,leftFlatCount){return function dfs(cols,startColIndex){let leafCount=0;const filtered=[];for(const col of cols){const colIndex=startColIndex+leafCount;if(Object(isLeafNode.a)(col))leafCount+=1,leftFlatCount+hoz.leftIndex<=colIndex&&colIndex<leftFlatCount+hoz.rightIndex&&filtered.push({colIndex:colIndex,col:col});else{const dfsRes=dfs(col.children,colIndex);leafCount+=dfsRes.leafCount,dfsRes.filtered.length>0&&filtered.push({colIndex:colIndex,col:col,children:dfsRes.filtered})}}return{filtered:filtered,leafCount:leafCount}}(centerNested,leftFlatCount).filtered}(nested.center,hoz,flat.left.length),rowCount),rightPart=calculateLeveledAndFlat(attachColIndex(nested.right,flat.left.length+flat.center.length),rowCount);return{flat:[...leftPart.flat,{type:"blank",width:hoz.leftBlank,blankSide:"left"},...centerPart.flat,{type:"blank",width:hoz.rightBlank,blankSide:"right"},...rightPart.flat],leveled:range(rowCount).map(depth=>[...leftPart.leveled[depth],{type:"blank",width:hoz.leftBlank,blankSide:"left"},...centerPart.leveled[depth],{type:"blank",width:hoz.rightBlank,blankSide:"right"},...rightPart.leveled[depth]])}}const colIndexOffset="right"===side?flat.left.length+flat.center.length:0;return calculateLeveledAndFlat(attachColIndex(nested[side],colIndexOffset),rowCount)}function TableHeader(props){const{nested:nested,flat:flat}=props,colCount=flat.main.length,rowCount=Object(getTreeDepth.a)(nested.main)+1,renderInfo=calculateRenderInfo(props,rowCount),tbody=renderInfo.leveled.map((wrappedCols,level)=>{const headerCells=wrappedCols.map(wrapped=>{var _a,_b;if("normal"===wrapped.type){const headerCellProps=null!==(_a=wrapped.col.headerCellProps)&&void 0!==_a?_a:{};return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("th",Object.assign({key:wrapped.colIndex},headerCellProps,{className:classnames_default()(styles.a.tableHeaderCell,{first:0===wrapped.colIndex,last:wrapped.colIndex+wrapped.colSpan===colCount},headerCellProps.className),colSpan:wrapped.colSpan,rowSpan:wrapped.isLeaf?rowCount-level:void 0,style:{textAlign:wrapped.col.align,...headerCellProps.style}}),null!==(_b=wrapped.col.title)&&void 0!==_b?_b:wrapped.col.name)}return wrapped.width>0?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("th",{key:wrapped.blankSide}):null});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("tr",{key:level,className:classnames_default()(styles.a.tableHeaderRow,{first:0===level,last:level===rowCount-1})},headerCells)});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:styles.a.tableHeader},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("table",null,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("colgroup",null,renderInfo.flat.map(wrapped=>"blank"===wrapped.type?wrapped.width>0?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("col",{key:wrapped.blankSide,style:{width:wrapped.width}}):null:delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("col",{key:wrapped.colIndex,style:{width:wrapped.width}}))),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("tbody",null,tbody)))}try{header.displayName="header",header.__docgenInfo={description:"",displayName:"header",props:{nested:{defaultValue:null,description:"",name:"nested",required:!0,type:{name:"any"}},flat:{defaultValue:null,description:"",name:"flat",required:!0,type:{name:"any"}},useVirtual:{defaultValue:null,description:"",name:"useVirtual",required:!0,type:{name:"any"}},side:{defaultValue:null,description:"",name:"side",required:!0,type:{name:"any"}},hoz:{defaultValue:null,description:"",name:"hoz",required:!0,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/base-table/header.tsx#header"]={docgenInfo:header.__docgenInfo,name:"header",path:"src/base-table/header.tsx#header"})}catch(__react_docgen_typescript_loader_error){}class ItemSizeStore_ItemSizeStore{constructor(){this.cache=[]}static getFullRenderRange(itemCount){return{topIndex:0,topBlank:0,bottomIndex:itemCount,bottomBlank:0}}getRenderRangeWhenBelowView(itemCount){const start={topIndex:0,topBlank:0},end=this.getEnd(0,start,itemCount);return{...start,...end}}getRenderRangeWhenAboveView(itemCount){const totalSize=this.getEstimatedTotalSize(itemCount),start=this.getStart(totalSize,itemCount),end=this.getEnd(totalSize,start,itemCount);return{...start,...end}}getRenderRangeWhenInView(offset,maxRenderHeight,itemCount){const start=this.getStart(offset,itemCount),end=this.getEnd(offset+maxRenderHeight,start,itemCount);return{...start,...end}}binarySearchStart(searchOffset){let min=0,max=this.cache.length-1;for(;min<max;){const middle=Math.ceil((min+max)/2);this.cache[middle].offset<=searchOffset?min=middle:max=middle-1}return max}getStart(offset,itemCount){if(0===this.cache.length)return{topIndex:0,topBlank:0};const maxBottom=this.getMaxBottom();if(maxBottom<offset){const lack=offset-maxBottom,maxLackCount=itemCount-this.cache.length,lackCount=Math.min(Math.floor(lack/40),maxLackCount);for(let i=0,cntOffset=maxBottom;i<lackCount;i+=1,cntOffset+=40)this.cache.push({offset:cntOffset,size:40});const topIndex=this.cache.length-1,topBlank=this.cache[topIndex].offset;return this.overscanUpwards(topIndex,topBlank)}{const topIndex=this.binarySearchStart(offset),topBlank=this.cache[topIndex].offset;return this.overscanUpwards(topIndex,topBlank)}}overscanUpwards(topIndex,topBlank){let overscanSize=0,overscanCount=0;for(;overscanCount<topIndex&&overscanSize<utils.c;)overscanCount+=1,overscanSize+=this.getItemSize(topIndex-overscanCount);return{topIndex:topIndex-overscanCount,topBlank:topBlank-overscanSize}}getEnd(endOffset,startInfo,itemCount){let bottomIndex=startInfo.topIndex,offset=startInfo.topBlank;for(;bottomIndex<itemCount&&offset<endOffset;)offset+=this.getItemSize(bottomIndex),bottomIndex+=1;const bottomBlank=this.getEstimatedTotalSize(itemCount)-offset;return this.overscanDownwards(bottomIndex,bottomBlank,itemCount)}overscanDownwards(bottomIndex,bottomBlank,itemCount){let overscanSize=0,overscanCount=0;for(;overscanCount<itemCount-bottomIndex&&overscanSize<utils.c;)overscanSize+=this.getItemSize(bottomIndex+overscanCount),overscanCount+=1;return{bottomIndex:bottomIndex+overscanCount,bottomBlank:bottomBlank-overscanSize}}getItemSize(index){return index<this.cache.length?this.cache[index].size:40}setMaxItemCount(itemCount){itemCount<this.cache.length&&(this.cache.length=itemCount)}updateItem(index,offset,size){this.cache[index]={offset:offset,size:size}}getEstimatedTotalSize(itemCount){let measuredTotalSize=0,measuredCount=0;const size=this.cache.length;if(size>0){const lastItem=this.cache[size-1];measuredTotalSize=lastItem.offset+lastItem.size,measuredCount=size}return measuredTotalSize+40*(itemCount-measuredCount)}getMaxBottom(){if(0===this.cache.length)return 0;const item=this.cache[this.cache.length-1];return item.offset+item.size}}var SpanManager=__webpack_require__(212),ResizeObserver_es=__webpack_require__(500),Observable=__webpack_require__(62),merge=__webpack_require__(916),fromEvent=__webpack_require__(510);function getRect(ele){return ele===window?{left:0,top:0,bottom:window.innerHeight,right:window.innerWidth}:ele.getBoundingClientRect()}function getClipRect(target,flowRoot){const targetRect=getRect(target),rootRect=getRect(flowRoot);return{offsetY:Math.max(0,rootRect.top-targetRect.top),offsetX:Math.max(0,rootRect.left-targetRect.left),clipRect:{left:Math.max(targetRect.left,rootRect.left),top:Math.max(targetRect.top,rootRect.top),right:Math.min(targetRect.right,rootRect.right),bottom:Math.min(targetRect.bottom,rootRect.bottom)}}}class VisibleClipRectObservable_VisibleClipRectObservable extends Observable.a{constructor(target,flowRoot){super(subscriber=>{const subscription=Object(merge.a)(Object(fromEvent.a)(flowRoot,"scroll"),Object(fromEvent.a)(flowRoot,"resize")).subscribe(callback),resizeObserver=new ResizeObserver_es.a(callback);function callback(){subscriber.next(getClipRect(target,flowRoot))}return resizeObserver.observe(target),()=>{subscription.unsubscribe(),resizeObserver.disconnect()}})}}try{VisibleClipRectObservable_VisibleClipRectObservable.displayName="VisibleClipRectObservable",VisibleClipRectObservable_VisibleClipRectObservable.__docgenInfo={description:"基于 ResizeObserver 和 scroll event 封装的 RxJS observable；\n用于监听一个元素的在页面中的「可见范围」的不断变化",displayName:"VisibleClipRectObservable",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/base-table/helpers/VisibleClipRectObservable.ts#VisibleClipRectObservable"]={docgenInfo:VisibleClipRectObservable_VisibleClipRectObservable.__docgenInfo,name:"VisibleClipRectObservable",path:"src/base-table/helpers/VisibleClipRectObservable.ts#VisibleClipRectObservable"})}catch(__react_docgen_typescript_loader_error){}const LoadingIndicatorIcon=({size:size})=>delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("svg",{className:styles.a.loadingIndicatorIcon,style:{margin:"auto",display:"block",shapeRendering:"auto"},width:size,height:size,viewBox:"0 0 100 100",preserveAspectRatio:"xMidYMid"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("circle",{cx:"50",cy:"50",r:"40",fill:"none",stroke:"#23a7fa",strokeDasharray:"188 64",strokeLinecap:"round",strokeWidth:"10"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("animateTransform",{attributeName:"transform",dur:"1.5s",keyTimes:"0;1",repeatCount:"indefinite",type:"rotate",values:"0 50 50;360 50 50"})));function Loading({visible:visible,children:children}){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:styles.a.loadingWrapper,style:{position:"relative"}},visible&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:styles.a.loadingIndicatorWrapper,style:{position:"absolute",left:0,right:0,top:0,bottom:0}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:styles.a.loadingIndicator,style:{position:"sticky",zIndex:1,top:utils.b,left:0,right:0}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(LoadingIndicatorIcon,{size:utils.b}))),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:styles.a.loadingContentWrapper,style:{filter:visible?"blur(1px)":"none"}},children))}Loading.defaultProps={visible:!0};try{loading.displayName="loading",loading.__docgenInfo={description:"",displayName:"loading",props:{visible:{defaultValue:null,description:"",name:"visible",required:!0,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/base-table/loading.tsx#loading"]={docgenInfo:loading.__docgenInfo,name:"loading",path:"src/base-table/loading.tsx#loading"})}catch(__react_docgen_typescript_loader_error){}let table_BaseTable=(()=>{class BaseTable extends delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Component{constructor(props){super(props),this.store=new ItemSizeStore_ItemSizeStore,this.artTableRef=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createRef(),this.artTableWrapperRef=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createRef(),this.rootSubscription=new Subscription.a,this.hoveredTableRows=[],this.onWheelInOverflowHiddenPart=e=>{const{scrollLeft:x,scrollTop:y}=this.doms.mainBody;this.syncScroll(x+e.deltaX,y+e.deltaY)},this.syncScrollFromMainBody=()=>{const{scrollLeft:x,scrollTop:y}=this.doms.mainBody;this.syncScroll(x,y)},this.onRowEnterOrLeave=(rowIndex,kind)=>{var _a,_b;if(this.hoveredTableRows.forEach(tr=>{tr.classList.remove("hovered")}),"leave"===kind)return void(this.hoveredTableRows=[]);const rowSelector=`*[data-rowindex="${rowIndex}"]`,mainRow=this.doms.mainBody.querySelector(rowSelector),leftLockRow=null===(_a=this.doms.leftBody)||void 0===_a?void 0:_a.querySelector(rowSelector),rightLockRow=null===(_b=this.doms.rightBody)||void 0===_b?void 0:_b.querySelector(rowSelector);this.hoveredTableRows=[mainRow,leftLockRow,rightLockRow].filter(Boolean),this.hoveredTableRows.forEach(tr=>{tr.classList.add("hovered")})},this.adjustSize=()=>{this.adjustLoadingPosition(),this.adjustNeedRenderLock(),this.adjustSizeOfLockCells(),this.adjustSizeOfLockBodies(),this.adjustSizeOfLockHeaderCells()},this.state={...getDerivedStateFromProps(props),hasScroll:!0,needRenderLock:!0,offsetY:0,maxRenderHeight:Number(window.innerHeight),offsetX:0,maxRenderWidth:window.innerWidth}}updateStickyScroll(){const{stickyScroll:stickyScroll,mainBody:mainBody,stickyScrollItem:stickyScrollItem}=this.doms;if(!mainBody)return;const refTable=mainBody.querySelector("table");if(!refTable)return;const bodyWidth=mainBody.offsetWidth,tableWidth=refTable.offsetWidth,scrollbarSize=Object(utils.g)();stickyScroll.style.marginTop=`-${scrollbarSize.height}px`,mainBody.scrollHeight>mainBody.clientHeight?stickyScroll.style.width=bodyWidth-scrollbarSize.width+"px":stickyScroll.style.width="auto",bodyWidth>=tableWidth?this.state.hasScroll&&this.setState({hasScroll:!1}):!this.state.hasScroll&&scrollbarSize.height>5&&this.setState({hasScroll:!0}),stickyScrollItem.style.width=tableWidth+"px"}renderTableSection(side,renderRange){const{hasHeader:hasHeader}=this.props,onWheel="main"!==side?this.onWheelInOverflowHiddenPart:null,onScroll="main"===side?this.syncScrollFromMainBody:null;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:classnames_default()(styles.a.tableInner)},hasHeader&&this.renderTableHeader(side,renderRange),this.renderTableBody(side,renderRange,onWheel,onScroll))}renderTableHeader(side,{horizontal:hoz}){const{stickyTop:stickyTop}=this.props,{flat:flat,nested:nested,useVirtual:useVirtual}=this.state;return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:classnames_default()(styles.a.tableHeaderWrapper),style:{top:stickyTop},onWheel:this.onWheelInOverflowHiddenPart},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(TableHeader,{nested:nested,flat:flat,hoz:hoz,side:side,useVirtual:useVirtual}))}updateOffsetX(nextOffsetX){this.state.useVirtual.horizontal&&Math.abs(nextOffsetX-this.state.offsetX)>=utils.c/2&&this.setState({offsetX:nextOffsetX})}syncScroll(x,y){this.updateOffsetX(x);const header=this.doms.mainHeader,scrollNode=this.doms.mainBody;if(header&&(header.scrollLeft=x),scrollNode.scrollLeft=x,scrollNode.scrollTop=y,this.isLock()){const{rightBody:rightBody,leftBody:leftBody,rightSection:rightSection,leftSection:leftSection}=this.doms;leftBody&&(leftBody.scrollTop=y),rightBody&&(rightBody.scrollTop=y),this.state.needRenderLock?x<=0?(null==leftSection||leftSection.classList.remove(styles.a.lockShadow),null==rightSection||rightSection.classList.add(styles.a.lockShadow)):x>=scrollNode.scrollWidth-scrollNode.clientWidth?(null==leftSection||leftSection.classList.add(styles.a.lockShadow),null==rightSection||rightSection.classList.remove(styles.a.lockShadow)):(null==leftSection||leftSection.classList.add(styles.a.lockShadow),null==rightSection||rightSection.classList.add(styles.a.lockShadow)):(null==leftSection||leftSection.classList.remove(styles.a.lockShadow),null==rightSection||rightSection.classList.remove(styles.a.lockShadow))}}getVerticalRenderRange(){const{dataSource:dataSource}=this.props,{useVirtual:useVirtual,offsetY:offsetY,maxRenderHeight:maxRenderHeight}=this.state,itemCount=dataSource.length;return useVirtual.vertical?maxRenderHeight<=0?offsetY<=0?this.store.getRenderRangeWhenBelowView(itemCount):this.store.getRenderRangeWhenAboveView(itemCount):this.store.getRenderRangeWhenInView(offsetY,maxRenderHeight,itemCount):ItemSizeStore_ItemSizeStore.getFullRenderRange(itemCount)}getHorizontalRenderRange(){const{offsetX:offsetX,maxRenderWidth:maxRenderWidth,useVirtual:useVirtual,flat:flat}=this.state;if(!useVirtual.horizontal)return{leftIndex:0,leftBlank:0,rightIndex:flat.main.length,rightBlank:0};let leftIndex=0,centerCount=0,leftBlank=0,centerRenderWidth=0;const overscannedOffsetX=Math.max(0,offsetX-utils.c);for(;leftIndex<flat.center.length;){const col=flat.center[leftIndex];if(!(col.width+leftBlank<overscannedOffsetX))break;leftIndex+=1,leftBlank+=col.width}const minCenterRenderWidth=maxRenderWidth+(overscannedOffsetX-leftBlank)+2*utils.c;for(;leftIndex+centerCount<flat.center.length;){const col=flat.center[leftIndex+centerCount];if(!(col.width+centerRenderWidth<minCenterRenderWidth))break;centerRenderWidth+=col.width,centerCount+=1}const rightBlankCount=flat.center.length-leftIndex-centerCount;return{leftIndex:leftIndex,leftBlank:leftBlank,rightIndex:leftIndex+centerCount,rightBlank:Object(utils.j)(flat.center.slice(flat.center.length-rightBlankCount).map(col=>col.width))}}getRenderRange(){return{vertical:this.getVerticalRenderRange(),horizontal:this.getHorizontalRenderRange()}}getFlatHozWrappedCols(side,hoz){const{flat:flat}=this.state;if("main"!==side){const colIndexShift="right"===side?flat.main.length-flat.right.length:0;return flat[side].map((col,i)=>({type:"normal",col:col,colIndex:i+colIndexShift}))}return[...flat.left.map((col,i)=>({type:"normal",col:col,colIndex:i})),hoz.leftBlank>0&&{type:"blank",blankSide:"left",width:hoz.leftBlank},...flat.center.slice(hoz.leftIndex,hoz.rightIndex).map((col,i)=>({type:"normal",col:col,colIndex:flat.left.length+hoz.leftIndex+i})),hoz.rightBlank>0&&{type:"blank",blankSide:"right",width:hoz.rightBlank},...flat.right.map((col,i)=>({type:"normal",col:col,colIndex:flat.main.length-flat.right.length+i}))].filter(Boolean)}renderTableBody(side,renderRange,onWheel,onScroll){const{onRowEnterOrLeave:onRowEnterOrLeave}=this,{vertical:ver,horizontal:hoz}=renderRange,{isLoading:isLoading,dataSource:dataSource,getRowProps:getRowProps,primaryKey:primaryKey,emptyContent:emptyContent}=this.props,{flat:flat}=this.state,colCount=flat.main.length,leftFlatCount=flat.left.length,wrappedCols=this.getFlatHozWrappedCols(side,hoz),colgroup=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("colgroup",null,wrappedCols.map(wrapped=>"blank"===wrapped.type?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("col",{key:wrapped.blankSide,style:{width:wrapped.width}}):delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("col",{key:wrapped.colIndex,style:{width:wrapped.col.width}})));if(ver.bottomIndex-ver.topIndex==0)return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:styles.a.tableBody,onWheel:onWheel,onScroll:onScroll},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(EmptyTable,{colgroup:colgroup,colSpan:wrappedCols.length,isLoading:isLoading,emptyContent:emptyContent}));const spanManager=new SpanManager.a,rows=dataSource.slice(ver.topIndex,ver.bottomIndex).map((function renderRow(record,i){const rowIndex=ver.topIndex+i;spanManager.stripUpwards(rowIndex);const rowProps=getRowProps(record,rowIndex),rowClass=classnames_default()(styles.a.tableRow,{first:0===rowIndex,last:rowIndex===dataSource.length-1,even:rowIndex%2==0,odd:rowIndex%2==1},null==rowProps?void 0:rowProps.className);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("tr",Object.assign({},rowProps,{className:rowClass,key:Object(internals.b)(primaryKey,record,rowIndex),"data-rowindex":rowIndex,onMouseEnter:e=>{var _a;onRowEnterOrLeave(rowIndex,"enter"),null===(_a=null==rowProps?void 0:rowProps.onMouseEnter)||void 0===_a||_a.call(rowProps,e)},onMouseLeave:e=>{var _a;onRowEnterOrLeave(rowIndex,"leave"),null===(_a=null==rowProps?void 0:rowProps.onMouseLeave)||void 0===_a||_a.call(rowProps,e)}}),wrappedCols.map(wrapped=>"blank"===wrapped.type?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("td",{key:wrapped.blankSide}):function renderCell(record,rowIndex,column,colIndex){var _a;if(spanManager.testSkip(rowIndex,colIndex))return null;const cellProps=Object(internals.a)(column,record,rowIndex);let colSpan=1,rowSpan=1;if(column.getSpanRect){const value=Object(internals.c)(column,record,rowIndex),spanRect=column.getSpanRect(value,record,rowIndex);colSpan=null==spanRect?1:spanRect.right-colIndex,rowSpan=null==spanRect?1:spanRect.bottom-rowIndex}else null!=cellProps.colSpan&&(colSpan=cellProps.colSpan),null!=cellProps.rowSpan&&(rowSpan=cellProps.rowSpan);rowSpan=Math.min(rowSpan,ver.bottomIndex-rowIndex),colSpan=Math.min(colSpan,leftFlatCount+hoz.rightIndex-colIndex);const hasSpan=colSpan>1||rowSpan>1;hasSpan&&spanManager.add(rowIndex,colIndex,colSpan,rowSpan);const cls=classnames_default()(styles.a.tableCell,{first:0===colIndex,last:colIndex===colCount-1});column.align&&(cellProps.style=null!==(_a=cellProps.style)&&void 0!==_a?_a:{},cellProps.style.textAlign=column.align);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("td",{key:colIndex,className:cls,...cellProps,...hasSpan?{colSpan:colSpan,rowSpan:rowSpan}:null},Object(internals.d)(column,record,rowIndex))}(record,rowIndex,wrapped.col,wrapped.colIndex)))}));return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:styles.a.tableBody,onWheel:onWheel,onScroll:onScroll},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{key:"top-blank",className:classnames_default()(styles.a.virtualBlank,"top"),style:{height:ver.topBlank}}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("table",null,colgroup,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("tbody",null,rows)),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{key:"bottom-blank",className:classnames_default()(styles.a.virtualBlank,"bottom"),style:{height:ver.bottomBlank}}))}isLock(){const{nested:nested}=this.state;return nested.left.length>0||nested.right.length>0}render(){const{dataSource:dataSource,className:className,style:style,hasHeader:hasHeader,useOuterBorder:useOuterBorder,isLoading:isLoading,isStickyHead:isStickyHead}=this.props,tableClass=classnames_default()(styles.a.artTable,{sticky:isStickyHead,empty:0===dataSource.length,lock:this.isLock(),"has-header":hasHeader}),renderRange=this.getRenderRange(),artTableProps={className:tableClass,[utils.d]:this.artTableRef},artTable=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(styles.b.ArtTable,Object.assign({},artTableProps),this.renderLeftSection(renderRange),this.renderMainSection(renderRange),this.renderRightSection(renderRange));return(node=>{const artTableWrapperProps={className:classnames_default()(styles.a.artTableWrapper,className,{"use-outer-border":useOuterBorder}),style:style,[utils.d]:this.artTableWrapperRef};return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(styles.b.ArtTableWrapper,Object.assign({},artTableWrapperProps),node)})((node=>delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Fragment,null,node,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(styles.b.StickyScroll,{className:styles.a.stickyScroll,style:{display:this.state.hasScroll?"block":"none",bottom:this.props.stickyBottom}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:styles.a.stickyScrollItem}))))((node=artTable,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(Loading,{visible:isLoading},node))));var node}renderLeftSection(renderRange){const{dataSource:dataSource}=this.props,{nested:nested,needRenderLock:needRenderLock}=this.state;return needRenderLock&&0!==nested.left.length&&0!==dataSource.length?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(styles.b.LeftSection,{className:styles.a.leftSection},this.renderTableSection("left",renderRange)):null}renderMainSection(renderRange){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(styles.b.MainSection,{className:classnames_default()(styles.a.mainSection)},this.renderTableSection("main",renderRange))}renderRightSection(renderRange){const{dataSource:dataSource}=this.props,{nested:nested,needRenderLock:needRenderLock}=this.state;return needRenderLock&&0!==nested.right.length&&0!==dataSource.length?delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(styles.b.RightSection,{className:styles.a.rightSection},this.renderTableSection("right",renderRange)):null}didMountOrUpdate(prevProps){this.adjustSize(),this.updateItemSizeStore(prevProps),this.syncScrollFromMainBody(),this.updateStickyScroll()}componentDidMount(){this.updateDoms(),this.didMountOrUpdate(),this.initSubscriptions()}resolveFlowRoot(){const{flowRoot:flowRoot}=this.props,wrapper=this.artTableWrapperRef.current;if("auto"===flowRoot){return"visible"!==getComputedStyle(wrapper).overflowY?wrapper:window}return"self"===flowRoot?wrapper:"function"==typeof flowRoot?flowRoot():flowRoot}initSubscriptions(){const{mainBody:mainBody,stickyScroll:stickyScroll}=this.doms;this.rootSubscription.add(Object(utils.k)(mainBody,stickyScroll)),this.rootSubscription.add(utils.l.subscribe(()=>{this.updateStickyScroll(),this.adjustSize()}));const rafId=requestAnimationFrame(()=>{const resoledFlowRoot=this.resolveFlowRoot(),sizeAndOffset$=new VisibleClipRectObservable_VisibleClipRectObservable(mainBody,resoledFlowRoot).pipe(Object(filter.a)(()=>{const{horizontal:horizontal,vertical:vertical}=this.state.useVirtual;return horizontal||vertical}),Object(map.a)(({clipRect:clipRect,offsetY:offsetY})=>({maxRenderHeight:clipRect.bottom-clipRect.top,maxRenderWidth:clipRect.right-clipRect.left,offsetY:offsetY})),Object(distinctUntilChanged.a)((x,y)=>Math.abs(x.maxRenderWidth-y.maxRenderWidth)<utils.c/2&&Math.abs(x.maxRenderHeight-y.maxRenderHeight)<utils.c/2&&Math.abs(x.offsetY-y.offsetY)<utils.c/2));this.rootSubscription.add(sizeAndOffset$.subscribe(sizeAndOffset=>{this.setState(sizeAndOffset)}))});this.rootSubscription.add(()=>{cancelAnimationFrame(rafId)})}componentDidUpdate(prevProps){this.updateDoms(),this.didMountOrUpdate(prevProps)}componentWillUnmount(){this.rootSubscription.unsubscribe()}updateDoms(){const artTableWrapper=this.artTableWrapperRef.current,artTable=this.artTableRef.current,mainSection=Object(utils.h)(artTable,styles.a.mainSection),leftSection=Object(utils.h)(artTable,styles.a.leftSection),rightSection=Object(utils.h)(artTable,styles.a.rightSection);this.doms={artTableWrapper:artTableWrapper,artTable:artTable,mainSection:mainSection,mainHeader:Object(utils.h)(mainSection,styles.a.tableHeader),mainBody:Object(utils.h)(mainSection,styles.a.tableBody),leftSection:leftSection,leftHeader:Object(utils.h)(leftSection,styles.a.tableHeader),leftBody:Object(utils.h)(leftSection,styles.a.tableBody),rightSection:rightSection,rightHeader:Object(utils.h)(rightSection,styles.a.tableHeader),rightBody:Object(utils.h)(rightSection,styles.a.tableBody),stickyScroll:Object(utils.h)(artTableWrapper,styles.a.stickyScroll),stickyScrollItem:Object(utils.h)(artTableWrapper,styles.a.stickyScrollItem)}}updateItemSizeStore(prevProps){var _a;null!=prevProps&&prevProps.dataSource.length!==this.props.dataSource.length&&this.store.setMaxItemCount(this.props.dataSource.length);const virtualTop=this.doms.mainBody.querySelector(`.${styles.a.virtualBlank}.top`),virtualTopHeight=null!==(_a=null==virtualTop?void 0:virtualTop.clientHeight)&&void 0!==_a?_a:0;Object(utils.i)(this.doms.mainBody,styles.a.tableRow).forEach(tr=>{const rowIndex=Number(tr.dataset.rowindex);this.store.updateItem(rowIndex,tr.offsetTop+virtualTopHeight,tr.offsetHeight)})}adjustLoadingPosition(){const{mainSection:mainSection,artTableWrapper:artTableWrapper}=this.doms,loadingIndicator=Object(utils.h)(artTableWrapper,styles.a.loadingIndicator);if(!loadingIndicator)return;const{clipRect:clipRect}=getClipRect(mainSection,this.resolveFlowRoot()),height=clipRect.bottom-clipRect.top;loadingIndicator.style.top=height/2-utils.b/2+"px",loadingIndicator.style.marginTop=height/2-utils.b/2+"px"}adjustSizeOfLockCells(){if(!this.isLock())return;const mainTableRows=Object(utils.i)(this.doms.mainBody,styles.a.tableRow);if(this.doms.leftBody){const leftTableRows=Object(utils.i)(this.doms.leftBody,styles.a.tableRow);Object(utils.e)(leftTableRows,mainTableRows)}if(this.doms.rightBody){const rightTableRows=Object(utils.i)(this.doms.rightBody,styles.a.tableRow);Object(utils.f)(rightTableRows,mainTableRows)}}adjustSizeOfLockBodies(){if(this.isLock()){const{mainBody:mainBody,rightSection:rightSection}=this.doms;let width=0;mainBody.scrollHeight>mainBody.clientHeight&&(width=Object(utils.g)().width),rightSection&&(rightSection.style.right=width+"px")}}adjustSizeOfLockHeaderCells(){if(!this.isLock())return;const mainTableRows=Object(utils.i)(this.doms.mainHeader,styles.a.tableHeaderRow);if(this.doms.leftHeader){const leftTableRows=Object(utils.i)(this.doms.leftHeader,styles.a.tableHeaderRow);Object(utils.e)(leftTableRows,mainTableRows)}if(this.doms.rightHeader){const rightTableRows=Object(utils.i)(this.doms.rightHeader,styles.a.tableHeaderRow);Object(utils.f)(rightTableRows,mainTableRows)}}adjustNeedRenderLock(){let nextNeedRenderLock;const{dataSource:dataSource}=this.props,{needRenderLock:needRenderLock}=this.state,{mainBody:mainBody,artTable:artTable}=this.doms;if(this.isLock()&&dataSource.length>0){const firstRow=Object(utils.h)(mainBody,styles.a.tableRow);if(null==firstRow)return;nextNeedRenderLock=Array.from(firstRow.cells).reduce((sum,cell)=>sum+cell.offsetWidth,0)>artTable.clientWidth}else nextNeedRenderLock=!1;needRenderLock!==nextNeedRenderLock&&this.setState({needRenderLock:nextNeedRenderLock})}}return BaseTable.defaultProps={isStickyHead:!0,stickyTop:0,stickyBottom:0,useVirtual:"auto",hasHeader:!0,isLoading:!1,getRowProps:noop.a,flowRoot:"auto"},BaseTable.getDerivedStateFromProps=getDerivedStateFromProps,BaseTable})();__webpack_exports__.a=table_BaseTable},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("jQ/y")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("7x/C")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("UvmB")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("z84I")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("plBw")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("lTEL")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("87if")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("kYxP")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("2G9S")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("M+/F")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("LW0h")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("aLgo")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("jwue")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("+oxZ")},function(module,__webpack_exports__,__webpack_require__){"use strict";var _biz_common_transforms__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(169);__webpack_require__.d(__webpack_exports__,"a",(function(){return _biz_common_transforms__WEBPACK_IMPORTED_MODULE_0__}));try{alireacttablebiz.displayName="alireacttablebiz",alireacttablebiz.__docgenInfo={description:"比较函数，支持字符串、数字和 null。\n对于字符串将比较两者的字典序；对数字将比较两者大小；null 值在比较时总是小于另一个值。",displayName:"alireacttablebiz",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/ali-react-table-biz.ts#alireacttablebiz"]={docgenInfo:alireacttablebiz.__docgenInfo,name:"alireacttablebiz",path:"src/ali-react-table-biz.ts#alireacttablebiz"})}catch(__react_docgen_typescript_loader_error){}try{useColumnHoverTransform.displayName="useColumnHoverTransform",useColumnHoverTransform.__docgenInfo={description:"",displayName:"useColumnHoverTransform",props:{hoverColor:{defaultValue:null,description:"",name:"hoverColor",required:!1,type:{name:"string"}},defaultHoverColIndex:{defaultValue:null,description:"",name:"defaultHoverColIndex",required:!1,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/ali-react-table-biz.ts#useColumnHoverTransform"]={docgenInfo:useColumnHoverTransform.__docgenInfo,name:"useColumnHoverTransform",path:"src/ali-react-table-biz.ts#useColumnHoverTransform"})}catch(__react_docgen_typescript_loader_error){}try{useColumnHoverRangeTransform.displayName="useColumnHoverRangeTransform",useColumnHoverRangeTransform.__docgenInfo={description:"",displayName:"useColumnHoverRangeTransform",props:{hoverColor:{defaultValue:null,description:"",name:"hoverColor",required:!1,type:{name:"string"}},headerHoverColor:{defaultValue:null,description:"",name:"headerHoverColor",required:!1,type:{name:"string"}},defaultHoverRange:{defaultValue:null,description:"",name:"defaultHoverRange",required:!1,type:{name:"HoverRange"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/ali-react-table-biz.ts#useColumnHoverRangeTransform"]={docgenInfo:useColumnHoverRangeTransform.__docgenInfo,name:"useColumnHoverRangeTransform",path:"src/ali-react-table-biz.ts#useColumnHoverRangeTransform"})}catch(__react_docgen_typescript_loader_error){}try{useColumnResizeTransform.displayName="useColumnResizeTransform",useColumnResizeTransform.__docgenInfo={description:"",displayName:"useColumnResizeTransform",props:{defaultSizes:{defaultValue:null,description:"",name:"defaultSizes",required:!0,type:{name:"number[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/ali-react-table-biz.ts#useColumnResizeTransform"]={docgenInfo:useColumnResizeTransform.__docgenInfo,name:"useColumnResizeTransform",path:"src/ali-react-table-biz.ts#useColumnResizeTransform"})}catch(__react_docgen_typescript_loader_error){}try{useSortTransform.displayName="useSortTransform",useSortTransform.__docgenInfo={description:"",displayName:"useSortTransform",props:{defaultSorts:{defaultValue:null,description:"",name:"defaultSorts",required:!1,type:{name:"SortItem[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/ali-react-table-biz.ts#useSortTransform"]={docgenInfo:useSortTransform.__docgenInfo,name:"useSortTransform",path:"src/ali-react-table-biz.ts#useSortTransform"})}catch(__react_docgen_typescript_loader_error){}try{useTreeModeTransform.displayName="useTreeModeTransform",useTreeModeTransform.__docgenInfo={description:"",displayName:"useTreeModeTransform",props:{defaultOpenKeys:{defaultValue:null,description:"",name:"defaultOpenKeys",required:!1,type:{name:"string[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/ali-react-table-biz.ts#useTreeModeTransform"]={docgenInfo:useTreeModeTransform.__docgenInfo,name:"useTreeModeTransform",path:"src/ali-react-table-biz.ts#useTreeModeTransform"})}catch(__react_docgen_typescript_loader_error){}},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("cARO")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("DZ+c")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("EgRP")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("KqXw")},function(module,__webpack_exports__,__webpack_require__){"use strict";function isLeafNode(node){return null==node.children||0===node.children.length}__webpack_require__.d(__webpack_exports__,"a",(function(){return isLeafNode}));try{isLeafNode.displayName="isLeafNode",isLeafNode.__docgenInfo={description:"",displayName:"isLeafNode",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/common-utils/isLeafNode.ts#isLeafNode"]={docgenInfo:isLeafNode.__docgenInfo,name:"isLeafNode",path:"src/common-utils/isLeafNode.ts#isLeafNode"})}catch(__react_docgen_typescript_loader_error){}},,,function(module,__webpack_exports__,__webpack_require__){"use strict";function safeRenderHeader(column){var _a;return null!==(_a=column.title)&&void 0!==_a?_a:column.name}function safeGetValue(column,record,rowIndex){return column.getValue?column.getValue(record,rowIndex):record[column.code]}function safeGetRowKey(primaryKey,record,rowIndex){let key;return"string"==typeof primaryKey?key=record[primaryKey]:"function"==typeof primaryKey&&(key=primaryKey(record,rowIndex)),null==key&&(key=String(rowIndex)),key}function safeGetCellProps(column,record,rowIndex){if(column.getCellProps){const value=safeGetValue(column,record,rowIndex);return column.getCellProps(value,record,rowIndex)||{}}return{}}function safeRender(column,record,rowIndex){const value=safeGetValue(column,record,rowIndex);return column.render?column.render(value,record,rowIndex):value}__webpack_require__.d(__webpack_exports__,"e",(function(){return safeRenderHeader})),__webpack_require__.d(__webpack_exports__,"c",(function(){return safeGetValue})),__webpack_require__.d(__webpack_exports__,"b",(function(){return safeGetRowKey})),__webpack_require__.d(__webpack_exports__,"a",(function(){return safeGetCellProps})),__webpack_require__.d(__webpack_exports__,"d",(function(){return safeRender}));try{safeRenderHeader.displayName="safeRenderHeader",safeRenderHeader.__docgenInfo={description:"",displayName:"safeRenderHeader",props:{children:{defaultValue:null,description:"该列的子节点",name:"children",required:!1,type:{name:"ArtColumn[]"}},name:{defaultValue:null,description:"列的名称",name:"name",required:!0,type:{name:"string"}},code:{defaultValue:null,description:"在数据中的字段 code",name:"code",required:!1,type:{name:"string"}},title:{defaultValue:null,description:"列标题的展示名称；在页面中进行展示时，该字段将覆盖 name 字段",name:"title",required:!1,type:{name:"ReactNode"}},width:{defaultValue:null,description:"列的宽度，如果该列是锁定的，则宽度为必传项",name:"width",required:!1,type:{name:"number"}},align:{defaultValue:null,description:"单元格中的文本或内容的 对其方向",name:"align",required:!1,type:{name:"ArtColumnAlign"}},hidden:{defaultValue:null,description:"是否隐藏",name:"hidden",required:!1,type:{name:"boolean"}},lock:{defaultValue:null,description:"是否锁列",name:"lock",required:!1,type:{name:"boolean"}},headerCellProps:{defaultValue:null,description:"表头单元格的 props",name:"headerCellProps",required:!1,type:{name:"any"}},features:{defaultValue:null,description:"功能开关",name:"features",required:!1,type:{name:"{ [key: string]: any; }"}},getValue:{defaultValue:null,description:"自定义取数方法",name:"getValue",required:!1,type:{name:"(record: any, rowIndex: number) => any"}},render:{defaultValue:null,description:"自定义渲染方法",name:"render",required:!1,type:{name:"(value: any, record: any, rowIndex: number) => ReactNode"}},getCellProps:{defaultValue:null,description:"自定义的获取单元格 props 的方法",name:"getCellProps",required:!1,type:{name:"(value: any, record: any, rowIndex: number) => any"}},getSpanRect:{defaultValue:null,description:"自定义的获取单元格 SpanRect 方法",name:"getSpanRect",required:!1,type:{name:"(value: any, record: any, rowIndex: number) => SpanRect"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/common-utils/internals.ts#safeRenderHeader"]={docgenInfo:safeRenderHeader.__docgenInfo,name:"safeRenderHeader",path:"src/common-utils/internals.ts#safeRenderHeader"})}catch(__react_docgen_typescript_loader_error){}},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("hCOa")},function(module,__webpack_exports__,__webpack_require__){"use strict";function applyTransforms(input,...transforms){return transforms.reduce((v,fn)=>fn(v),input)}__webpack_require__.d(__webpack_exports__,"a",(function(){return applyTransforms}))},,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return getAppTrafficData})),__webpack_require__.d(__webpack_exports__,"b",(function(){return getIncomeData})),__webpack_require__.d(__webpack_exports__,"c",(function(){return getNCoV2019Data}));var csv_parse_lib_sync__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(496),csv_parse_lib_sync__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(csv_parse_lib_sync__WEBPACK_IMPORTED_MODULE_0__);const cdnLinks_mockBizData="https://gw.alipayobjects.com/os/bmw-prod/2eb02d0b-993f-4531-8424-a8df1899299e.json",cdnLinks_mockSellData="https://gw.alipayobjects.com/os/bmw-prod/22986070-97e7-43a2-a3e4-200742c3d913.json",cdnLinks_ncov2019Data="https://gw.alipayobjects.com/os/basement_prod/8e44b543-0764-411f-adfc-0dae716ef96a.csv";let appTrafficCache=null;function getAppTrafficData(){return appTrafficCache||(appTrafficCache=fetch(cdnLinks_mockBizData).then(res=>res.json())),appTrafficCache}let incomeCache=null;function getIncomeData(){return incomeCache||(incomeCache=fetch(cdnLinks_mockSellData).then(res=>res.json())),incomeCache}let ncov2019Cache=null;function getNCoV2019Data(){return ncov2019Cache||(ncov2019Cache=fetch(cdnLinks_ncov2019Data).then(res=>res.text()).then(csvString=>csv_parse_lib_sync__WEBPACK_IMPORTED_MODULE_0___default()(csvString,{columns:!0,skip_empty_lines:!0}))),ncov2019Cache}},,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return FusionStyles}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),react_helmet__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(501);function FusionStyles(){return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_helmet__WEBPACK_IMPORTED_MODULE_1__.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("link",{rel:"stylesheet",href:"//alifd.alicdn.com/npm/@alifd/next/1.19.21/next.css"}))}},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("lSUb")},function(module,__webpack_exports__,__webpack_require__){"use strict";const factorySymbol=Symbol("factory-symbol");function proto(baseRecord,ensureArray="auto"){const baseKeys=Object.keys(baseRecord);function process(record){const result=Object.assign({},record);return baseKeys.forEach(key=>{var _a;if(result[key]===proto.empty)return void delete result[key];const base=baseRecord[key];!function isProtoFactory(v){return v&&v[factorySymbol]}(base)?result[key]=null!==(_a=result[key])&&void 0!==_a?_a:base:result[key]=base(result[key])}),result}function factory(arg){return("auto"===ensureArray?Array.isArray(arg):ensureArray)?null==arg?[]:arg.map(process):process(arg)}return factory[factorySymbol]=!0,factory.extends=extRecord=>{const extFactory=proto(extRecord,ensureArray);return arg=>factory(extFactory(arg))},factory}proto.empty=Symbol("proto.empty"),proto.string=v=>{if(null!=v&&"string"!=typeof v)throw new Error("must be string");return v},proto.string[factorySymbol]=!0,proto.number=v=>{if(null!=v&&"number"!=typeof v)throw new Error("must be number");return v},proto.number[factorySymbol]=!0,proto.notNull=v=>{if(null==v)throw new Error("must be not null");return v},proto.notNull[factorySymbol]=!0,proto.object=baseRecord=>proto(baseRecord,!1),proto.array=baseRecord=>proto(baseRecord,!0),__webpack_exports__.a=proto},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("NyMY")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("aokA")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("lN5B")},,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("nsO7")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("fRV1")},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("MvUL")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("Ysgh")},,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return buildDrillTree}));var _common_utils__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(279),_simpleEncode__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(125);function buildDrillTree(data,codes,{encode:encode=_simpleEncode__WEBPACK_IMPORTED_MODULE_1__.a,totalValue:totalValue="总计",includeTopWrapper:includeTopWrapper=!1,isExpand:isExpand=(()=>!0),enforceExpandTotalNode:enforceExpandTotalNode=!0}={}){const emptyPath=[],totalKey=encode(emptyPath);let array,hasChild=!1;if(0===codes.length?array=[]:enforceExpandTotalNode||isExpand(totalKey)?array=function dfs(slice,path){const depth=path.length,array=[],code=codes[depth],groups=Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__.a)(slice,row=>row[code]);for(const groupKey of Object.keys(groups)){path.push(groupKey);const node={key:encode(path),value:groupKey,path:path.slice()};array.push(node);const group=groups[groupKey];group.length>0&&depth<codes.length-1&&(isExpand(node.key)?node.children=dfs(group,path):node.hasChild=!0),path.pop()}return array}(data,[]):(array=[],hasChild=data.length>0),includeTopWrapper){const rootNode={key:totalKey,value:totalValue,path:emptyPath,children:array};return hasChild&&(rootNode.hasChild=hasChild),[rootNode]}return includeTopWrapper?[{key:totalKey,value:totalValue,path:emptyPath,children:array}]:array}try{buildDrillTree.displayName="buildDrillTree",buildDrillTree.__docgenInfo={description:"根据指定的 code 序列计算下钻树",displayName:"buildDrillTree",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/pivot/pivot-utils/buildDrillTree.ts#buildDrillTree"]={docgenInfo:buildDrillTree.__docgenInfo,name:"buildDrillTree",path:"src/pivot/pivot-utils/buildDrillTree.ts#buildDrillTree"})}catch(__react_docgen_typescript_loader_error){}},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("KOtZ")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("7xRU")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("Yct5")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("yH/f")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("1Iuc")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("cxan")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("jQ3i")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("vbDw")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("F63i")},,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"b",(function(){return ROW_KEY})),__webpack_require__.d(__webpack_exports__,"a",(function(){return CrossTableClasses}));const ROW_KEY="rowKey",CrossTableClasses={leftHeaderCell:"left-header-cell",topHeaderCell:"top-header-cell"}},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("1IsZ")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("A3UQ")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("ZVkB")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("x4t0")},,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";function simpleEncode(path){return 0===path.length?"key:@total@":"key:"+path.join(" ")}__webpack_require__.d(__webpack_exports__,"a",(function(){return simpleEncode}));try{simpleEncode.displayName="simpleEncode",simpleEncode.__docgenInfo={description:"",displayName:"simpleEncode",props:{length:{defaultValue:null,description:"Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",name:"length",required:!0,type:{name:"number"}},toString:{defaultValue:null,description:"Returns a string representation of an array.",name:"toString",required:!1,type:{name:"() => string"}},toLocaleString:{defaultValue:null,description:"Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",name:"toLocaleString",required:!1,type:{name:"() => string"}},pop:{defaultValue:null,description:"Removes the last element from an array and returns it.",name:"pop",required:!0,type:{name:"() => string"}},push:{defaultValue:null,description:"Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",name:"push",required:!0,type:{name:"(...items: string[]) => number"}},concat:{defaultValue:null,description:"Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",name:"concat",required:!0,type:{name:"{ (...items: ConcatArray<string>[]): string[]; (...items: (string | ConcatArray<string>)[]): string[]; }"}},join:{defaultValue:null,description:"Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",name:"join",required:!0,type:{name:"(separator?: string) => string"}},reverse:{defaultValue:null,description:"Reverses the elements in an Array.",name:"reverse",required:!0,type:{name:"() => string[]"}},shift:{defaultValue:null,description:"Removes the first element from an array and returns it.",name:"shift",required:!0,type:{name:"() => string"}},slice:{defaultValue:null,description:"Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.",name:"slice",required:!0,type:{name:"(start?: number, end?: number) => string[]"}},sort:{defaultValue:null,description:"Sorts an array.\n@param compareFn Function used to determine the order of the elements. It is expected to return\ra negative value if first argument is less than second argument, zero if they're equal and a positive\rvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r```ts\r[11,2,22,1].sort((a, b) => a - b)\r```",name:"sort",required:!0,type:{name:"(compareFn?: (a: string, b: string) => number) => string[]"}},splice:{defaultValue:null,description:"Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",name:"splice",required:!0,type:{name:"{ (start: number, deleteCount?: number): string[]; (start: number, deleteCount: number, ...items: string[]): string[]; }"}},unshift:{defaultValue:null,description:"Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",name:"unshift",required:!0,type:{name:"(...items: string[]) => number"}},indexOf:{defaultValue:null,description:"Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",name:"indexOf",required:!0,type:{name:"(searchElement: string, fromIndex?: number) => number"}},lastIndexOf:{defaultValue:null,description:"Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",name:"lastIndexOf",required:!0,type:{name:"(searchElement: string, fromIndex?: number) => number"}},every:{defaultValue:null,description:"Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",name:"every",required:!0,type:{name:"(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"}},some:{defaultValue:null,description:"Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",name:"some",required:!0,type:{name:"(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"}},forEach:{defaultValue:null,description:"Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"forEach",required:!0,type:{name:"(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void"}},map:{defaultValue:null,description:"Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"map",required:!0,type:{name:"<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]"}},filter:{defaultValue:null,description:"Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"filter",required:!0,type:{name:"{ <S extends string>(callbackfn: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[]; }"}},reduce:{defaultValue:null,description:"Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",name:"reduce",required:!0,type:{name:"{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."}},reduceRight:{defaultValue:null,description:"Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",name:"reduceRight",required:!0,type:{name:"{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."}},find:{defaultValue:null,description:"Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",name:"find",required:!0,type:{name:"{ <S extends string>(predicate: (this: void, value: string, index: number, obj: string[]) => value is S, thisArg?: any): S; (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string; }"}},findIndex:{defaultValue:null,description:"Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",name:"findIndex",required:!0,type:{name:"(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any) => number"}},fill:{defaultValue:null,description:"Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",name:"fill",required:!0,type:{name:"(value: string, start?: number, end?: number) => string[]"}},copyWithin:{defaultValue:null,description:"Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",name:"copyWithin",required:!0,type:{name:"(target: number, start: number, end?: number) => string[]"}},"__@iterator":{defaultValue:null,description:"Iterator",name:"__@iterator",required:!0,type:{name:"() => IterableIterator<string>"}},entries:{defaultValue:null,description:"Returns an iterable of key, value pairs for every entry in the array",name:"entries",required:!0,type:{name:"() => IterableIterator<[number, string]>"}},keys:{defaultValue:null,description:"Returns an iterable of keys in the array",name:"keys",required:!0,type:{name:"() => IterableIterator<number>"}},values:{defaultValue:null,description:"Returns an iterable of values in the array",name:"values",required:!0,type:{name:"() => IterableIterator<string>"}},"__@unscopables":{defaultValue:null,description:"Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",name:"__@unscopables",required:!0,type:{name:"() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"}},includes:{defaultValue:null,description:"Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",name:"includes",required:!0,type:{name:"(searchElement: string, fromIndex?: number) => boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/pivot/pivot-utils/simpleEncode.ts#simpleEncode"]={docgenInfo:simpleEncode.__docgenInfo,name:"simpleEncode",path:"src/pivot/pivot-utils/simpleEncode.ts#simpleEncode"})}catch(__react_docgen_typescript_loader_error){}},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("+wNj")},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"b",(function(){return useColumnHoverTransform})),__webpack_require__.d(__webpack_exports__,"a",(function(){return useColumnHoverRangeTransform})),__webpack_require__.d(__webpack_exports__,"c",(function(){return useSortTransform})),__webpack_require__.d(__webpack_exports__,"d",(function(){return useTreeModeTransform}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),_common_transforms__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(203),_common_transforms__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(170),_common_transforms__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(204),_common_transforms__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(172),_common_transforms__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(171);function useColumnHoverTransform({hoverColor:hoverColor,defaultHoverColIndex:defaultHoverColIndex=-1}={}){const[hoverColIndex,onChangeHoverColIndex]=Object(react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultHoverColIndex);return Object(_common_transforms__WEBPACK_IMPORTED_MODULE_1__.b)({hoverColor:hoverColor,hoverColIndex:hoverColIndex,onChangeHoverColIndex:onChangeHoverColIndex})}function useColumnHoverRangeTransform({hoverColor:hoverColor,headerHoverColor:headerHoverColor,defaultHoverRange:defaultHoverRange={start:0,end:0}}={}){const[hoverRange,onChangeHoverRange]=Object(react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultHoverRange);return Object(_common_transforms__WEBPACK_IMPORTED_MODULE_2__.c)({hoverColor:hoverColor,headerHoverColor:headerHoverColor,hoverRange:hoverRange,onChangeHoverRange:onChangeHoverRange})}function useColumnResizeTransform({defaultSizes:defaultSizes,...others}){const[sizes,onChangeSizes]=Object(react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultSizes);return Object(_common_transforms__WEBPACK_IMPORTED_MODULE_3__.b)({sizes:sizes,onChangeSizes:onChangeSizes,...others})}function useSortTransform({defaultSorts:defaultSorts=[],...others}={}){const[sorts,onChangeSorts]=Object(react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultSorts);return Object(_common_transforms__WEBPACK_IMPORTED_MODULE_4__.c)({sorts:sorts,onChangeSorts:onChangeSorts,...others})}function useTreeModeTransform({isLeafNode:isLeafNode,indentSize:indentSize,primaryKey:primaryKey,defaultOpenKeys:defaultOpenKeys=[]}){const[openKeys,onChangeOpenKeys]=Object(react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultOpenKeys);return Object(_common_transforms__WEBPACK_IMPORTED_MODULE_5__.c)({indentSize:indentSize,primaryKey:primaryKey,isLeafNode:isLeafNode,openKeys:openKeys,onChangeOpenKeys:onChangeOpenKeys})}try{useColumnHoverTransform.displayName="useColumnHoverTransform",useColumnHoverTransform.__docgenInfo={description:"",displayName:"useColumnHoverTransform",props:{hoverColor:{defaultValue:null,description:"",name:"hoverColor",required:!1,type:{name:"string"}},defaultHoverColIndex:{defaultValue:{value:-1},description:"",name:"defaultHoverColIndex",required:!1,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/transform-hooks.ts#useColumnHoverTransform"]={docgenInfo:useColumnHoverTransform.__docgenInfo,name:"useColumnHoverTransform",path:"src/biz/transform-hooks.ts#useColumnHoverTransform"})}catch(__react_docgen_typescript_loader_error){}try{useColumnHoverRangeTransform.displayName="useColumnHoverRangeTransform",useColumnHoverRangeTransform.__docgenInfo={description:"",displayName:"useColumnHoverRangeTransform",props:{hoverColor:{defaultValue:null,description:"",name:"hoverColor",required:!1,type:{name:"string"}},headerHoverColor:{defaultValue:null,description:"",name:"headerHoverColor",required:!1,type:{name:"string"}},defaultHoverRange:{defaultValue:{value:"{ start: 0, end: 0 }"},description:"",name:"defaultHoverRange",required:!1,type:{name:"HoverRange"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/transform-hooks.ts#useColumnHoverRangeTransform"]={docgenInfo:useColumnHoverRangeTransform.__docgenInfo,name:"useColumnHoverRangeTransform",path:"src/biz/transform-hooks.ts#useColumnHoverRangeTransform"})}catch(__react_docgen_typescript_loader_error){}try{useColumnResizeTransform.displayName="useColumnResizeTransform",useColumnResizeTransform.__docgenInfo={description:"",displayName:"useColumnResizeTransform",props:{defaultSizes:{defaultValue:null,description:"",name:"defaultSizes",required:!0,type:{name:"number[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/transform-hooks.ts#useColumnResizeTransform"]={docgenInfo:useColumnResizeTransform.__docgenInfo,name:"useColumnResizeTransform",path:"src/biz/transform-hooks.ts#useColumnResizeTransform"})}catch(__react_docgen_typescript_loader_error){}try{useSortTransform.displayName="useSortTransform",useSortTransform.__docgenInfo={description:"",displayName:"useSortTransform",props:{defaultSorts:{defaultValue:{value:"[]"},description:"",name:"defaultSorts",required:!1,type:{name:"SortItem[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/transform-hooks.ts#useSortTransform"]={docgenInfo:useSortTransform.__docgenInfo,name:"useSortTransform",path:"src/biz/transform-hooks.ts#useSortTransform"})}catch(__react_docgen_typescript_loader_error){}try{useTreeModeTransform.displayName="useTreeModeTransform",useTreeModeTransform.__docgenInfo={description:"",displayName:"useTreeModeTransform",props:{defaultOpenKeys:{defaultValue:{value:"[]"},description:"",name:"defaultOpenKeys",required:!1,type:{name:"string[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/transform-hooks.ts#useTreeModeTransform"]={docgenInfo:useTreeModeTransform.__docgenInfo,name:"useTreeModeTransform",path:"src/biz/transform-hooks.ts#useTreeModeTransform"})}catch(__react_docgen_typescript_loader_error){}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return transformColumn}));var _common_utils__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(56);function transformColumn(fn){return({columns:columns,dataSource:dataSource})=>({dataSource:dataSource,columns:function dfs(columns,parentStartColIndex){let flatColCount=0;const result=[];for(const col of columns){const startColIndex=parentStartColIndex+flatColCount;let unNormalized;if(Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__.a)(col))unNormalized=fn(col,{range:{start:startColIndex,end:startColIndex+1},dataSource:dataSource}),flatColCount+=1;else{const dfsResult=dfs(col.children,startColIndex);unNormalized=fn({...col,children:dfsResult.result},{range:{start:startColIndex,end:startColIndex+dfsResult.flatColCount},dataSource:dataSource}),flatColCount+=dfsResult.flatColCount}result.push(...(input=unNormalized,null==input?[]:Array.isArray(input)?input:[input]))}var input;return{result:result,flatColCount:flatColCount}}(columns,0).result})}try{transformColumn.displayName="transformColumn",transformColumn.__docgenInfo={description:"",displayName:"transformColumn",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/utils/transformColumn.ts#transformColumn"]={docgenInfo:transformColumn.__docgenInfo,name:"transformColumn",path:"src/biz/utils/transformColumn.ts#transformColumn"})}catch(__react_docgen_typescript_loader_error){}},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("JtPf")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("hBpG")},,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("IGGJ")},,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return CustomColumnsDialog}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),styled_components__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(29),_common_utils__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(56);const TreeDiv=styled_components__WEBPACK_IMPORTED_MODULE_1__.b.div`
  .group {
    margin: 8px 0;
    .group {
      margin: 4px 0;
    }
  }

  .line {
    height: 28px;
    display: flex;
    align-items: center;

    .checkbox {
      flex: 0 0 50%;
    }
  }

  .group-header {
    height: 32px;
    display: flex;
    align-items: center;
  }

  .group-content {
    margin-left: 16px;
  }
`,Header=styled_components__WEBPACK_IMPORTED_MODULE_1__.b.header`
  flex: 0 0 40px;
  display: flex;
  align-items: center;
  border-bottom: 1px solid var(--bd-color);
  padding: 0 20px;

  .actions {
    margin-left: auto;
    margin-right: 20px;
    > .action {
      margin-left: 8px;
      color: var(--action-color);
      cursor: pointer;
      font-size: 14px;
    }
  }
`,Footer=styled_components__WEBPACK_IMPORTED_MODULE_1__.b.footer`
  flex: 0 0 48px;
  display: flex;
  justify-content: center;
  align-items: center;
  border-top: 1px solid var(--bd-color);
  margin-top: auto;
`;function makeStyledDrawer(Drawer){return Object(styled_components__WEBPACK_IMPORTED_MODULE_1__.b)(Drawer)`
    --action-color: #5584ff;
    --bd-color: #e8e8e8;

    .hippo-drawer-header,
    .next-dialog-header {
      display: none;
    }

    .next-drawer-body,
    .hippo-drawer-body,
    .next-dialog-body {
      padding: 0;
      display: flex;
      flex-flow: column;
      height: 100%;

      > main {
        overflow: auto;
        padding: 20px;
      }
    }
  `}CustomColumnsDialog.defaultProps={showCheckAll:!0,showUncheckAll:!0};const StyledDiv=makeStyledDrawer("div");function CustomColumnsDialog({trigger:trigger,defaultVisible:defaultVisible,defaultCheckedCodes:defaultCheckedCodes,enforceCheckedCodes:enforceCheckedCodes,checkedCodes:checkedCodes,onChangeCheckedCodes:onChangeCheckedCodes,columns:columns,components:components,style:style,className:className,showCheckAll:showCheckAll,showUncheckAll:showUncheckAll,drawerProps:drawerProps,drawerComponent:drawerComponentProp}){const{Button:Button,Checkbox:Checkbox,PageDialog:PageDialog,Drawer:Drawer}=components;const DrawerComponent=null!=Drawer?Drawer:PageDialog,[visible,setVisible]=Object(react__WEBPACK_IMPORTED_MODULE_0__.useState)(Boolean(defaultVisible)),onClose=()=>setVisible(!1),[editingCheckedCodes,updateEditingCheckedCodes]=Object(react__WEBPACK_IMPORTED_MODULE_0__.useState)(checkedCodes),editingCheckedCodeSet=new Set(editingCheckedCodes);Object(react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{visible&&updateEditingCheckedCodes(checkedCodes)},[visible]);const onCheck=(targetCodes,action)=>{if("check"===action)updateEditingCheckedCodes(editingCheckedCodes.concat(targetCodes.filter(code=>!editingCheckedCodeSet.has(code))));else{const targetCodeSet=new Set(targetCodes);updateEditingCheckedCodes(editingCheckedCodes.filter(code=>!targetCodeSet.has(code)))}};const dfsResult=function dfs(columns){let lineCount=0,tempLine=[];const nodes=[],codes=[];let allCheck=!0,anyCheck=!1;for(let colIndex=0;colIndex<columns.length;colIndex++){const col=columns[colIndex];if(Object(_common_utils__WEBPACK_IMPORTED_MODULE_2__.a)(col)){if(col.code){const enforce=enforceCheckedCodes&&enforceCheckedCodes.includes(col.code),checked=editingCheckedCodeSet.has(col.code);enforce||(codes.push(col.code),checked?anyCheck=!0:allCheck=!1),addToTempLine(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Checkbox,{key:colIndex,className:"checkbox",checked:checked||enforce,disabled:enforce,onChange:()=>onCheck([col.code],checked?"uncheck":"check")},col.name))}}else{const sub=dfs(col.children);sub.allCheck||(allCheck=!1),sub.anyCheck&&(anyCheck=!0),codes.push(...sub.codes),flushTempLine(!0),nodes.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"group",key:colIndex},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"group-header"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Checkbox,{className:"checkbox",checked:sub.allCheck,indeterminate:!sub.allCheck&&sub.anyCheck,onChange:()=>onCheck(sub.codes,sub.allCheck?"uncheck":"check")},col.name)),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"group-content"},sub.nodes)))}}return flushTempLine(!0),{nodes:nodes,allCheck:allCheck,anyCheck:anyCheck,codes:codes};function addToTempLine(node){flushTempLine(!1),tempLine.push(node)}function flushTempLine(force){(force&&tempLine.length>0||tempLine.length>=2)&&(nodes.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"line",key:"line-"+lineCount},tempLine)),lineCount+=1,tempLine=[])}}(columns),props={title:null,footer:null,visible:visible,onClose:onClose,className:className,style:{width:500,...style},...drawerProps},content=react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Header,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{style:{fontSize:14}},"自定义显示列"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"actions"},defaultCheckedCodes&&react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"action",onClick:()=>updateEditingCheckedCodes(defaultCheckedCodes)},"恢复默认"),showCheckAll&&react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"action",onClick:()=>onCheck(dfsResult.codes,"check")},"全选"),showUncheckAll&&react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",{className:"action",onClick:()=>onCheck(dfsResult.codes,"uncheck")},"全不选"))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("main",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TreeDiv,null,dfsResult.nodes)),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Footer,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Button,{type:"primary",onClick:()=>{onChangeCheckedCodes(editingCheckedCodes),onClose()}},"确认"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Button,{style:{marginLeft:8},onClick:onClose},"取消")));return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment,null,trigger(()=>setVisible(!0)),drawerComponentProp?react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(drawerComponentProp,props,content):react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(StyledDiv,{as:DrawerComponent,...props},content))}CustomColumnsDialog.makeStyledDrawer=makeStyledDrawer;try{CustomColumnsDialog.displayName="CustomColumnsDialog",CustomColumnsDialog.__docgenInfo={description:"自定义列对话框，支持 hippo（已经完成） / fusion（开发中） 两种组件体系",displayName:"CustomColumnsDialog",props:{defaultVisible:{defaultValue:null,description:"",name:"defaultVisible",required:!1,type:{name:"boolean"}},trigger:{defaultValue:null,description:"",name:"trigger",required:!0,type:{name:"(onOpen: () => void) => ReactNode"}},defaultCheckedCodes:{defaultValue:null,description:"",name:"defaultCheckedCodes",required:!1,type:{name:"string[]"}},enforceCheckedCodes:{defaultValue:null,description:"",name:"enforceCheckedCodes",required:!1,type:{name:"string[]"}},checkedCodes:{defaultValue:null,description:"",name:"checkedCodes",required:!0,type:{name:"string[]"}},onChangeCheckedCodes:{defaultValue:null,description:"",name:"onChangeCheckedCodes",required:!0,type:{name:"(cols: string[]) => void"}},columns:{defaultValue:null,description:"",name:"columns",required:!0,type:{name:"ArtColumn[]"}},components:{defaultValue:null,description:"",name:"components",required:!0,type:{name:"any"}},drawerProps:{defaultValue:null,description:"",name:"drawerProps",required:!1,type:{name:"any"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},showCheckAll:{defaultValue:null,description:"",name:"showCheckAll",required:!0,type:{name:"boolean"}},showUncheckAll:{defaultValue:null,description:"",name:"showUncheckAll",required:!0,type:{name:"boolean"}},drawerComponent:{defaultValue:null,description:"",name:"drawerComponent",required:!1,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/CustomColumnsDialog.tsx#CustomColumnsDialog"]={docgenInfo:CustomColumnsDialog.__docgenInfo,name:"CustomColumnsDialog",path:"src/biz/CustomColumnsDialog.tsx#CustomColumnsDialog"})}catch(__react_docgen_typescript_loader_error){}},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("kvVz")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("oXkQ")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("5o43")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("WNMA")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("ax0f")},,,,,,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"autoRowSpan",(function(){return autoRowSpan})),__webpack_require__.d(__webpack_exports__,"buildTree",(function(){return buildTree_buildTree})),__webpack_require__.d(__webpack_exports__,"columnHover",(function(){return columnHover.b})),__webpack_require__.d(__webpack_exports__,"ColumnHoverOptions",(function(){return columnHover.ColumnHoverOptions})),__webpack_require__.d(__webpack_exports__,"columnRangeHover",(function(){return common_transforms_columnRangeHover.c})),__webpack_require__.d(__webpack_exports__,"ColumnRangeHoverOptions",(function(){return common_transforms_columnRangeHover.ColumnRangeHoverOptions})),__webpack_require__.d(__webpack_exports__,"HoverRange",(function(){return common_transforms_columnRangeHover.HoverRange})),__webpack_require__.d(__webpack_exports__,"columnResize",(function(){return columnResize.b})),__webpack_require__.d(__webpack_exports__,"ColumnResizeOptions",(function(){return columnResize.ColumnResizeOptions})),__webpack_require__.d(__webpack_exports__,"flatten",(function(){return flatten})),__webpack_require__.d(__webpack_exports__,"orderField",(function(){return orderField_orderField})),__webpack_require__.d(__webpack_exports__,"sort",(function(){return sort.c})),__webpack_require__.d(__webpack_exports__,"SortHeaderCellProps",(function(){return sort.SortHeaderCellProps})),__webpack_require__.d(__webpack_exports__,"SortOptions",(function(){return sort.SortOptions})),__webpack_require__.d(__webpack_exports__,"tips",(function(){return tips})),__webpack_require__.d(__webpack_exports__,"TipsOptions",(function(){})),__webpack_require__.d(__webpack_exports__,"treeMode",(function(){return treeMode.c})),__webpack_require__.d(__webpack_exports__,"treeMetaSymbol",(function(){return treeMode.b})),__webpack_require__.d(__webpack_exports__,"TreeModeOptions",(function(){return treeMode.TreeModeOptions})),__webpack_require__.d(__webpack_exports__,"visible",(function(){return visible.a}));var internals=__webpack_require__(59),isLeafNode=__webpack_require__(56),transformColumn=__webpack_require__(128);function isIdentity(x,y){return x===y}function autoRowSpan(){return Object(transformColumn.a)((col,{dataSource:dataSource,range:range})=>{var _a;if(!(null===(_a=col.features)||void 0===_a?void 0:_a.autoRowSpan))return col;if(!Object(isLeafNode.a)(col))return col;const shouldMergeCell="function"==typeof col.features.autoRowSpan?col.features.autoRowSpan:isIdentity,spanRects=[];let lastBottom=0,prevValue=null;for(let rowIndex=0;rowIndex<dataSource.length;rowIndex++){const value=Object(internals.c)(col,dataSource[rowIndex],rowIndex);if(0===rowIndex||!shouldMergeCell(prevValue,value)){const spanRect={top:lastBottom,bottom:rowIndex,left:range.start,right:range.end};for(let i=lastBottom;i<rowIndex;i++)spanRects.push(spanRect);lastBottom=rowIndex}prevValue=value}for(let i=lastBottom;i<dataSource.length;i++)spanRects.push({top:lastBottom,bottom:dataSource.length,left:range.start,right:range.end});return{...col,getSpanRect:(value,row,rowIndex)=>spanRects[rowIndex]}})}var others=__webpack_require__(177);function buildTree(idProp,parentIdProp,items){const wrapperMap=new Map,ensure=id=>{if(wrapperMap.has(id))return wrapperMap.get(id);const wrapper={id:id,parent:null,item:null,children:[]};return wrapperMap.set(id,wrapper),wrapper};for(const item of items){const parentWrapper=ensure(item[parentIdProp]),itemWrapper=ensure(item[idProp]);itemWrapper.parent=parentWrapper,parentWrapper.children.push(itemWrapper),itemWrapper.item=item}return function unwrapRecursively(wrapperArray){const result=[];for(const wrapper of wrapperArray)0===wrapper.children.length?result.push(wrapper.item):result.push({...wrapper.item,children:unwrapRecursively(wrapper.children)});return result}(Object(others.a)(Array.from(wrapperMap.values()).filter(wrapper=>null==wrapper.parent),wrapper=>wrapper.children))}try{buildTree.displayName="buildTree",buildTree.__docgenInfo={description:"根据 idProp 与 parentIdProp 从对象数组中构建对应的树\n当 A[parentIdProp] === B[idProp] 时，对象A会被移动到对象B的children。\n当一个对象的 parentIdProp 不与其他对象的 idProp 字段相等时，该对象被作为树的顶层节点\n@example const array = [\n  { id: 'node-1', parent: 'root' },\n  { id: 'node-2', parent: 'root' },\n  { id: 'node-3', parent: 'node-2' },\n  { id: 'node-4', parent: 'node-2' },\n  { id: 'node-5', parent: 'node-4' },\n]\nconst tree = buildTree('id', 'parent', array)\nexpect(tree).toEqual([\n  { id: 'node-1', parent: 'root' },\n  {\n    id: 'node-2',\n    parent: 'root',\n    children: [\n      { id: 'node-3', parent: 'node-2' },\n      {\n        id: 'node-4',\n        parent: 'node-2',\n        children: [{ id: 'node-5', parent: 'node-3' }],\n      },\n    ],\n  },\n])",displayName:"buildTree",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/utils/buildTree.tsx#buildTree"]={docgenInfo:buildTree.__docgenInfo,name:"buildTree",path:"src/biz/utils/buildTree.tsx#buildTree"})}catch(__react_docgen_typescript_loader_error){}function buildTree_buildTree(idProp,parentIdProp){return({columns:columns,dataSource:dataSource})=>({columns:columns,dataSource:buildTree(idProp,parentIdProp,dataSource)})}var columnHover=__webpack_require__(203),common_transforms_columnRangeHover=__webpack_require__(170),columnResize=__webpack_require__(204);function flatten(){return Object(transformColumn.a)(column=>{var _a;return Object(isLeafNode.a)(column)?column:(null===(_a=column.features)||void 0===_a?void 0:_a.flatten)?column.children:column})}function orderField_orderField(startOrder=1){return Object(transformColumn.a)(column=>{var _a,_b;return(null===(_a=column.features)||void 0===_a?void 0:_a.order)||(null===(_b=column.features)||void 0===_b?void 0:_b.orderField)?{...column,getValue:(record,index)=>index+startOrder}:column})}try{orderField_orderField.displayName="orderField",orderField_orderField.__docgenInfo={description:"",displayName:"orderField",props:{toString:{defaultValue:null,description:"Returns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",name:"toString",required:!1,type:{name:"(radix?: number) => string"}},toFixed:{defaultValue:null,description:"Returns a string representing a number in fixed-point notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",name:"toFixed",required:!0,type:{name:"(fractionDigits?: number) => string"}},toExponential:{defaultValue:null,description:"Returns a string containing a number represented in exponential notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",name:"toExponential",required:!0,type:{name:"(fractionDigits?: number) => string"}},toPrecision:{defaultValue:null,description:"Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n@param precision Number of significant digits. Must be in the range 1 - 21, inclusive.",name:"toPrecision",required:!0,type:{name:"(precision?: number) => string"}},valueOf:{defaultValue:null,description:"Returns the primitive value of the specified object.",name:"valueOf",required:!1,type:{name:"() => number"}},toLocaleString:{defaultValue:null,description:"Converts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",name:"toLocaleString",required:!1,type:{name:"(locales?: string | string[], options?: NumberFormatOptions) => string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/common-transforms/orderField.ts#orderField"]={docgenInfo:orderField_orderField.__docgenInfo,name:"orderField",path:"src/biz/common-transforms/orderField.ts#orderField"})}catch(__react_docgen_typescript_loader_error){}var sort=__webpack_require__(172),es=__webpack_require__(53),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll);const HeaderCellWithTips=__webpack_require__(29).b.div`
  display: flex;
  align-items: center;

  .tip-icon-wrapper {
    margin-left: 2px;
  }

  .tip-icon {
    display: flex;
    fill: currentColor;
  }
`;function tips({Balloon:Balloon}){return Object(transformColumn.a)(col=>{var _a;if(!(null===(_a=col.features)||void 0===_a?void 0:_a.tips))return col;const justifyContent="right"===col.align?"flex-end":"center"===col.align?"center":"flex-start";return{...col,title:delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(HeaderCellWithTips,{style:{justifyContent:justifyContent}},Object(internals.e)(col),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(Balloon,{closable:!1,trigger:delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"tip-icon-wrapper"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(es.h,{className:"tip-icon"}))},col.features.tips))}})}try{tips.displayName="tips",tips.__docgenInfo={description:"",displayName:"tips",props:{Balloon:{defaultValue:null,description:"",name:"Balloon",required:!0,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/common-transforms/tips.tsx#tips"]={docgenInfo:tips.__docgenInfo,name:"tips",path:"src/biz/common-transforms/tips.tsx#tips"})}catch(__react_docgen_typescript_loader_error){}var treeMode=__webpack_require__(171),visible=__webpack_require__(275);try{columnRangeHover.displayName="columnRangeHover",columnRangeHover.__docgenInfo={description:"",displayName:"columnRangeHover",props:{hoverColor:{defaultValue:null,description:"",name:"hoverColor",required:!1,type:{name:"string"}},headerHoverColor:{defaultValue:null,description:"",name:"headerHoverColor",required:!1,type:{name:"string"}},hoverRange:{defaultValue:null,description:"",name:"hoverRange",required:!0,type:{name:"HoverRange"}},onChangeHoverRange:{defaultValue:null,description:"",name:"onChangeHoverRange",required:!0,type:{name:"(nextColIndexRange: HoverRange) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/common-transforms/index.ts#columnRangeHover"]={docgenInfo:columnRangeHover.__docgenInfo,name:"columnRangeHover",path:"src/biz/common-transforms/index.ts#columnRangeHover"})}catch(__react_docgen_typescript_loader_error){}try{orderField.displayName="orderField",orderField.__docgenInfo={description:"",displayName:"orderField",props:{toString:{defaultValue:null,description:"Returns a string representation of an object.\n@param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.",name:"toString",required:!1,type:{name:"(radix?: number) => string"}},toFixed:{defaultValue:null,description:"Returns a string representing a number in fixed-point notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",name:"toFixed",required:!0,type:{name:"(fractionDigits?: number) => string"}},toExponential:{defaultValue:null,description:"Returns a string containing a number represented in exponential notation.\n@param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",name:"toExponential",required:!0,type:{name:"(fractionDigits?: number) => string"}},toPrecision:{defaultValue:null,description:"Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n@param precision Number of significant digits. Must be in the range 1 - 21, inclusive.",name:"toPrecision",required:!0,type:{name:"(precision?: number) => string"}},valueOf:{defaultValue:null,description:"Returns the primitive value of the specified object.",name:"valueOf",required:!1,type:{name:"() => number"}},toLocaleString:{defaultValue:null,description:"Converts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",name:"toLocaleString",required:!1,type:{name:"(locales?: string | string[], options?: NumberFormatOptions) => string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/common-transforms/index.ts#orderField"]={docgenInfo:orderField.__docgenInfo,name:"orderField",path:"src/biz/common-transforms/index.ts#orderField"})}catch(__react_docgen_typescript_loader_error){}try{commontransforms.displayName="commontransforms",commontransforms.__docgenInfo={description:"",displayName:"commontransforms",props:{length:{defaultValue:null,description:"Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",name:"length",required:!0,type:{name:"number"}},toString:{defaultValue:null,description:"Returns a string representation of an array.",name:"toString",required:!1,type:{name:"() => string"}},toLocaleString:{defaultValue:null,description:"Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",name:"toLocaleString",required:!1,type:{name:"() => string"}},pop:{defaultValue:null,description:"Removes the last element from an array and returns it.",name:"pop",required:!0,type:{name:"() => string"}},push:{defaultValue:null,description:"Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",name:"push",required:!0,type:{name:"(...items: string[]) => number"}},concat:{defaultValue:null,description:"Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",name:"concat",required:!0,type:{name:"{ (...items: ConcatArray<string>[]): string[]; (...items: (string | ConcatArray<string>)[]): string[]; }"}},join:{defaultValue:null,description:"Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",name:"join",required:!0,type:{name:"(separator?: string) => string"}},reverse:{defaultValue:null,description:"Reverses the elements in an Array.",name:"reverse",required:!0,type:{name:"() => string[]"}},shift:{defaultValue:null,description:"Removes the first element from an array and returns it.",name:"shift",required:!0,type:{name:"() => string"}},slice:{defaultValue:null,description:"Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.",name:"slice",required:!0,type:{name:"(start?: number, end?: number) => string[]"}},sort:{defaultValue:null,description:"Sorts an array.\n@param compareFn Function used to determine the order of the elements. It is expected to return\ra negative value if first argument is less than second argument, zero if they're equal and a positive\rvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r```ts\r[11,2,22,1].sort((a, b) => a - b)\r```",name:"sort",required:!0,type:{name:"(compareFn?: (a: string, b: string) => number) => string[]"}},splice:{defaultValue:null,description:"Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",name:"splice",required:!0,type:{name:"{ (start: number, deleteCount?: number): string[]; (start: number, deleteCount: number, ...items: string[]): string[]; }"}},unshift:{defaultValue:null,description:"Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",name:"unshift",required:!0,type:{name:"(...items: string[]) => number"}},indexOf:{defaultValue:null,description:"Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",name:"indexOf",required:!0,type:{name:"(searchElement: string, fromIndex?: number) => number"}},lastIndexOf:{defaultValue:null,description:"Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",name:"lastIndexOf",required:!0,type:{name:"(searchElement: string, fromIndex?: number) => number"}},every:{defaultValue:null,description:"Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",name:"every",required:!0,type:{name:"(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"}},some:{defaultValue:null,description:"Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",name:"some",required:!0,type:{name:"(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"}},forEach:{defaultValue:null,description:"Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"forEach",required:!0,type:{name:"(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void"}},map:{defaultValue:null,description:"Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"map",required:!0,type:{name:"<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]"}},filter:{defaultValue:null,description:"Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"filter",required:!0,type:{name:"{ <S extends string>(callbackfn: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[]; }"}},reduce:{defaultValue:null,description:"Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",name:"reduce",required:!0,type:{name:"{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."}},reduceRight:{defaultValue:null,description:"Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",name:"reduceRight",required:!0,type:{name:"{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."}},find:{defaultValue:null,description:"Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",name:"find",required:!0,type:{name:"{ <S extends string>(predicate: (this: void, value: string, index: number, obj: string[]) => value is S, thisArg?: any): S; (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string; }"}},findIndex:{defaultValue:null,description:"Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",name:"findIndex",required:!0,type:{name:"(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any) => number"}},fill:{defaultValue:null,description:"Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",name:"fill",required:!0,type:{name:"(value: string, start?: number, end?: number) => string[]"}},copyWithin:{defaultValue:null,description:"Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",name:"copyWithin",required:!0,type:{name:"(target: number, start: number, end?: number) => string[]"}},"__@iterator":{defaultValue:null,description:"Iterator",name:"__@iterator",required:!0,type:{name:"() => IterableIterator<string>"}},entries:{defaultValue:null,description:"Returns an iterable of key, value pairs for every entry in the array",name:"entries",required:!0,type:{name:"() => IterableIterator<[number, string]>"}},keys:{defaultValue:null,description:"Returns an iterable of keys in the array",name:"keys",required:!0,type:{name:"() => IterableIterator<number>"}},values:{defaultValue:null,description:"Returns an iterable of values in the array",name:"values",required:!0,type:{name:"() => IterableIterator<string>"}},"__@unscopables":{defaultValue:null,description:"Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",name:"__@unscopables",required:!0,type:{name:"() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"}},includes:{defaultValue:null,description:"Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",name:"includes",required:!0,type:{name:"(searchElement: string, fromIndex?: number) => boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/common-transforms/index.ts#commontransforms"]={docgenInfo:commontransforms.__docgenInfo,name:"commontransforms",path:"src/biz/common-transforms/index.ts#commontransforms"})}catch(__react_docgen_typescript_loader_error){}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"c",(function(){return columnRangeHover}));var _common_utils__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(56),_utils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(128);const EMPTY_RANGE={start:-1,end:-1};function attachColumnHoverCellProps(cellProps={},{onChangeHoverRange:onChangeHoverRange,hoverRange:hoverRange,colRange:colRange,hoverColor:hoverColor}){var _a;const colIndexMatched=colRange.end>hoverRange.start&&hoverRange.end>colRange.start;return{...cellProps,onMouseEnter(e){var _a;null===(_a=cellProps.onMouseEnter)||void 0===_a||_a.call(cellProps,e),onChangeHoverRange(colRange)},onMouseLeave(e){var _a;null===(_a=cellProps.onMouseLeave)||void 0===_a||_a.call(cellProps,e),onChangeHoverRange(EMPTY_RANGE)},style:{...cellProps.style,backgroundColor:colIndexMatched?hoverColor:null===(_a=null==cellProps?void 0:cellProps.style)||void 0===_a?void 0:_a.backgroundColor}}}function columnRangeHover({hoverColor:hoverColor="#f5f5f5",headerHoverColor:headerHoverColor="#ddd",hoverRange:hoverRange,onChangeHoverRange:onChangeHoverRange}){return Object(_utils__WEBPACK_IMPORTED_MODULE_1__.a)((col,{range:colRange})=>{if(!Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__.a)(col))return null==headerHoverColor?col:{...col,headerCellProps:attachColumnHoverCellProps(col.headerCellProps,{onChangeHoverRange:onChangeHoverRange,hoverColor:headerHoverColor,colRange:colRange,hoverRange:hoverRange})};const prevGetCellProps=col.getCellProps;return{...col,headerCellProps:attachColumnHoverCellProps(col.headerCellProps,{onChangeHoverRange:onChangeHoverRange,hoverColor:headerHoverColor,colRange:colRange,hoverRange:hoverRange}),getCellProps(value,record,rowIndex){var _a;return attachColumnHoverCellProps(null!==(_a=null==prevGetCellProps?void 0:prevGetCellProps(value,record,rowIndex))&&void 0!==_a?_a:{},{onChangeHoverRange:onChangeHoverRange,hoverColor:hoverColor,colRange:colRange,hoverRange:hoverRange})}}})}try{columnRangeHover.displayName="columnRangeHover",columnRangeHover.__docgenInfo={description:"",displayName:"columnRangeHover",props:{hoverColor:{defaultValue:{value:"#f5f5f5"},description:"",name:"hoverColor",required:!1,type:{name:"string"}},headerHoverColor:{defaultValue:{value:"#ddd"},description:"",name:"headerHoverColor",required:!1,type:{name:"string"}},hoverRange:{defaultValue:null,description:"",name:"hoverRange",required:!0,type:{name:"HoverRange"}},onChangeHoverRange:{defaultValue:null,description:"",name:"onChangeHoverRange",required:!0,type:{name:"(nextColIndexRange: HoverRange) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/common-transforms/columnRangeHover.ts#columnRangeHover"]={docgenInfo:columnRangeHover.__docgenInfo,name:"columnRangeHover",path:"src/biz/common-transforms/columnRangeHover.ts#columnRangeHover"})}catch(__react_docgen_typescript_loader_error){}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"b",(function(){return treeMetaSymbol})),__webpack_require__.d(__webpack_exports__,"c",(function(){return treeMode}));var _carbon_icons_react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(53),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__),styled_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(29),_common_utils__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(56),_common_utils_internals__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(59);const ExpansionCell=styled_components__WEBPACK_IMPORTED_MODULE_2__.b.div`
  display: flex;
  align-items: center;
  cursor: pointer;
  height: 100%;
  padding: 0 12px;

  &.leaf {
    cursor: default;
  }

  .expansion-icon {
    fill: #999;
    flex: 0 0 16px;
    transition: transform 200ms;

    &.expanded {
      transform-origin: center center;
      transform: rotate(90deg);
    }
  }
`,treeMetaSymbol=Symbol("treeMetaSymbol");function treeMode({onChangeOpenKeys:onChangeOpenKeys,openKeys:openKeys,primaryKey:primaryKey,indentSize:indentSize=16,isLeafNode:isLeafNode=_common_utils__WEBPACK_IMPORTED_MODULE_3__.a}){const openKeySet=new Set(openKeys);return({columns:columns,dataSource:dataSource})=>({columns:function processColumns(columns){if(0===columns.length)return columns;const[firstCol,...others]=columns;return[{...firstCol,render:(value,record,recordIndex)=>{const content=Object(_common_utils_internals__WEBPACK_IMPORTED_MODULE_4__.d)(firstCol,record,recordIndex);if(null==record[treeMetaSymbol])return content;const{depth:depth,isLeaf:isLeaf,rowKey:rowKey,expanded:expanded}=record[treeMetaSymbol];if(isLeaf)return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ExpansionCell,{className:"expansion-cell leaf"},react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{style:{marginLeft:10+depth*indentSize}},content));const marginLeft=depth*indentSize-6;return expanded?react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ExpansionCell,{className:"expansion-cell expanded",onClick:()=>{onChangeOpenKeys(openKeys.filter(key=>key!==rowKey),rowKey,"collapse")}},react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_carbon_icons_react__WEBPACK_IMPORTED_MODULE_0__.b,{className:"expansion-icon expanded",style:{marginLeft:marginLeft}}),content):react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ExpansionCell,{className:"expansion-cell collapsed",onClick:()=>{onChangeOpenKeys([...openKeys,rowKey],rowKey,"expand")}},react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_carbon_icons_react__WEBPACK_IMPORTED_MODULE_0__.b,{className:"expansion-icon collapsed",style:{marginLeft:marginLeft}}),content)},getCellProps:()=>({style:{padding:0}})},...others]}(columns),dataSource:function processDataSource(input){const result=[];return function dfs(nodes,depth){if(null==nodes)return;for(const node of nodes){const rowKey=node[primaryKey],expanded=openKeySet.has(rowKey),isLeaf=isLeafNode(node,{depth:depth,expanded:expanded,rowKey:rowKey}),treeMeta={depth:depth,isLeaf:isLeaf,expanded:expanded,rowKey:rowKey};result.push({[treeMetaSymbol]:treeMeta,...node}),!isLeaf&&expanded&&dfs(node.children,depth+1)}}(input,0),result}(dataSource)})}try{treeMode.displayName="treeMode",treeMode.__docgenInfo={description:"",displayName:"treeMode",props:{primaryKey:{defaultValue:null,description:"",name:"primaryKey",required:!0,type:{name:"string"}},openKeys:{defaultValue:null,description:"",name:"openKeys",required:!0,type:{name:"string[]"}},onChangeOpenKeys:{defaultValue:null,description:"",name:"onChangeOpenKeys",required:!0,type:{name:'(nextKeys: string[], key: string, action: "expand" | "collapse") => void'}},indentSize:{defaultValue:{value:16},description:"",name:"indentSize",required:!1,type:{name:"number"}},isLeafNode:{defaultValue:null,description:"",name:"isLeafNode",required:!1,type:{name:"(node: any, nodeMeta: { depth: number; expanded: boolean; rowKey: string; }) => boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/common-transforms/treeMode.tsx#treeMode"]={docgenInfo:treeMode.__docgenInfo,name:"treeMode",path:"src/biz/common-transforms/treeMode.tsx#treeMode"})}catch(__react_docgen_typescript_loader_error){}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"c",(function(){return sort}));var es=__webpack_require__(53),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),styled_components_browser_esm=__webpack_require__(29),isLeafNode=__webpack_require__(56),collectNodes=__webpack_require__(219),internals=__webpack_require__(59);function layeredSort(array,compare){return function dfs(rows){if(!Array.isArray(array))return array;return rows.map(row=>Object(isLeafNode.a)(row)?row:{...row,children:dfs(row.children)}).sort(compare)}(array)}try{layeredSort.displayName="layeredSort",layeredSort.__docgenInfo={description:"对树状结构的数据进行排序.\nlayeredSort 是一个递归的过程，针对树上的每一个父节点，该函数都会重新对其子节点数组（children) 进行排序.",displayName:"layeredSort",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/utils/layeredSort.ts#layeredSort"]={docgenInfo:layeredSort.__docgenInfo,name:"layeredSort",path:"src/biz/utils/layeredSort.ts#layeredSort"})}catch(__react_docgen_typescript_loader_error){}function smartCompare(x,y){return null==x?-1:null==y?1:"number"==typeof x&&"number"==typeof y?x-y:x<y?-1:x>y?1:0}try{smartCompare.displayName="smartCompare",smartCompare.__docgenInfo={description:"比较函数，支持字符串、数字和 null。\n对于字符串将比较两者的字典序；对数字将比较两者大小；null 值在比较时总是小于另一个值。",displayName:"smartCompare",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/utils/smartCompare.ts#smartCompare"]={docgenInfo:smartCompare.__docgenInfo,name:"smartCompare",path:"src/biz/utils/smartCompare.ts#smartCompare"})}catch(__react_docgen_typescript_loader_error){}function SortIcon({size:size=32,style:style,className:className,order:order}){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("svg",{style:style,className:className,focusable:"false",preserveAspectRatio:"xMidYMid meet",width:size,height:size,viewBox:"0 0 32 32","aria-hidden":"true"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("path",{fill:"asc"===order?"#23A3FF":"#bfbfbf",transform:"translate(0, 4)",d:"M8 8L16 0 24 8z"}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("path",{fill:"desc"===order?"#23A3FF":"#bfbfbf",transform:"translate(0, -4)",d:"M24 24L16 32 8 24z "}))}const NumberIconMap={1:es.i,2:es.j,3:es.k,4:es.l,5:es.m,6:es.n,7:es.o,8:es.p,9:es.q},EmptyIcon=()=>null;function DefaultSortHeaderCell({children:children,column:column,onToggle:onToggle,sortOrder:sortOrder,sortIndex:sortIndex,sortOptions:sortOptions}){const justifyContent="right"===column.align?"flex-end":"center"===column.align?"center":"flex-start";let NumberIcon=EmptyIcon;return"multiple"===sortOptions.mode&&null!=NumberIconMap[sortIndex+1]&&(NumberIcon=NumberIconMap[sortIndex+1]),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(TableHeaderCell,{onClick:onToggle,style:{justifyContent:justifyContent}},children,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(SortIcon,{style:{marginLeft:2,flexShrink:0},size:16,order:sortOrder}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(NumberIcon,{style:{fill:"#666",flexShrink:0}}))}const TableHeaderCell=styled_components_browser_esm.b.div`
  cursor: pointer;
  display: flex;
  align-items: center;
`;function sort({sorts:inputSorts,onChangeSorts:inputOnChangeSorts,orders:orders=["desc","asc","none"],mode:mode="multiple",SortHeaderCell:SortHeaderCell,keepDataSource:keepDataSource}){const filteredInputSorts=inputSorts.filter(s=>"none"!==s.order),sorts="multiple"===mode?filteredInputSorts:filteredInputSorts.slice(0,1),onChangeSorts="multiple"===mode?inputOnChangeSorts:nextSorts=>{const len=nextSorts.length;inputOnChangeSorts(nextSorts.slice(len-1))},sortOptions={sorts:sorts,onChangeSorts:onChangeSorts,orders:orders,mode:mode,keepDataSource:keepDataSource},sortMap=new Map(sorts.map((sort,index)=>[sort.code,{index:index,...sort}]));return({dataSource:dataSource,columns:columns})=>({columns:function processColumns(columns){return columns.map((function dfs(col){var _a;const result={...col};if(col.code&&((null===(_a=col.features)||void 0===_a?void 0:_a.sortable)||sortMap.has(col.code))){let sortIndex=-1,sortOrder="none";if(sortMap.has(col.code)){const{order:order,index:index}=sortMap.get(col.code);sortOrder=order,sortIndex=index}const SortHeaderCellComponent=null!=SortHeaderCell?SortHeaderCell:DefaultSortHeaderCell;result.title=delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(SortHeaderCellComponent,{onToggle:()=>function toggle(code){const sort=sortMap.get(code);if(null==sort)onChangeSorts(sorts.concat([{code:code,order:orders[0]}]));else{const index=sorts.findIndex(s=>s.code===code),nextSorts=sorts.slice(0,index+1),nextOrder=function getNextOrder(order){const idx=orders.indexOf(order);return orders[idx===orders.length-1?0:idx+1]}(sort.order);"none"===nextOrder?nextSorts.pop():nextSorts[index].order=nextOrder,onChangeSorts(nextSorts)}}(col.code),sortOrder:sortOrder,column:col,sortIndex:sortIndex,sortOptions:sortOptions},Object(internals.e)(col))}Object(isLeafNode.a)(col)||(result.children=col.children.map(dfs));return result}))}(columns),dataSource:function processDataSource(dataSource){if(keepDataSource)return dataSource;const sortColumnsMap=new Map(Object(collectNodes.a)(columns,"leaf-only").filter(col=>{var _a;return null!=(null===(_a=col.features)||void 0===_a?void 0:_a.sortable)}).map(col=>[col.code,col]));return layeredSort(dataSource,(x,y)=>{for(const{code:code,order:order}of sorts){const column=sortColumnsMap.get(code);if(null==column)continue;const sortable=column.features.sortable,cmp=("function"==typeof sortable?sortable:smartCompare)(Object(internals.c)(column,x,-1),Object(internals.c)(column,y,-1));if(0!==cmp)return cmp*("asc"===order?1:-1)}return 0})}(dataSource)})}try{sort.displayName="sort",sort.__docgenInfo={description:"",displayName:"sort",props:{sorts:{defaultValue:null,description:"排序字段列表",name:"sorts",required:!0,type:{name:"SortItem[]"}},onChangeSorts:{defaultValue:null,description:"更新排序字段列表的回调函数",name:"onChangeSorts",required:!0,type:{name:"(nextSorts: SortItem[]) => void"}},orders:{defaultValue:{value:"['desc', 'asc', 'none']"},description:"排序切换顺序",name:"orders",required:!1,type:{name:"SortOrder[]"}},mode:{defaultValue:{value:"multiple"},description:"排序模式。单选 single，多选 multiple，默认为多选",name:"mode",required:!1,type:{name:'"multiple" | "single"'}},SortHeaderCell:{defaultValue:null,description:"自定义排序表头",name:"SortHeaderCell",required:!1,type:{name:"any"}},keepDataSource:{defaultValue:null,description:"是否保持 dataSource 不变",name:"keepDataSource",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/common-transforms/sort.tsx#sort"]={docgenInfo:sort.__docgenInfo,name:"sort",path:"src/biz/common-transforms/sort.tsx#sort"})}catch(__react_docgen_typescript_loader_error){}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return useOperationBar}));var _carbon_icons_react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(53),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__),styled_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(29),_common_utils__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(219),_common_transforms__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(275),_CustomColumnsDialog__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(146);const OperationBarDiv=styled_components__WEBPACK_IMPORTED_MODULE_2__.b.div`
  z-index: 50;
  height: 32px;
  display: flex;
  align-items: center;
  background-color: white;

  .item {
    margin-left: 16px;
    &:first-child {
      margin-left: 0;
    }
  }

  .group {
    display: flex;
    align-items: center;
  }

  .separator {
    margin-left: auto;
    margin-right: auto;
  }

  .action {
    display: flex;
    align-items: center;
    color: var(--action-color);
    cursor: pointer;
    padding: 4px;

    > .icon {
      fill: currentColor;
      margin-right: 2px;
    }
  }
`;function useOperationBar({features:features,columns:columns,components:components,actionColor:actionColor="#23a3ff"}){var _a;const{Checkbox:Checkbox}=components,codeGroups=Object(react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{const leafColumns=Object(_common_utils__WEBPACK_IMPORTED_MODULE_3__.a)(columns,"leaf-only");return{defaultVisible:leafColumns.filter(col=>{var _a;return null===(_a=col.features)||void 0===_a?void 0:_a.defaultVisible}).map(col=>col.code),enforceVisible:leafColumns.filter(col=>{var _a;return null===(_a=col.features)||void 0===_a?void 0:_a.enforceVisible}).map(col=>col.code)}},[columns]),[visibleCodes,onChangeVisibleCodes]=Object(react__WEBPACK_IMPORTED_MODULE_1__.useState)(codeGroups.defaultVisible),[map,setMap]=Object(react__WEBPACK_IMPORTED_MODULE_1__.useState)({}),transforms=[],nodes=[];for(let index=0;index<features.length;index++){const feat=features[index];if("separator"===feat.type)nodes.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{className:"item separator",key:index}));else if("custom-columns"===feat.type)nodes.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_CustomColumnsDialog__WEBPACK_IMPORTED_MODULE_5__.a,{key:index,columns:columns,drawerComponent:feat.drawerComponent,checkedCodes:visibleCodes,onChangeCheckedCodes:onChangeVisibleCodes,defaultCheckedCodes:codeGroups.defaultVisible,enforceCheckedCodes:codeGroups.enforceVisible,trigger:onOpen=>react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{className:"item action",onClick:onOpen},react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_carbon_icons_react__WEBPACK_IMPORTED_MODULE_0__.c,{className:"icon"}),"自定义列"),components:components,style:{"--action-color":actionColor}})),transforms.push(Object(_common_transforms__WEBPACK_IMPORTED_MODULE_4__.a)(visibleCodes.concat(codeGroups.enforceVisible)));else if("export"===feat.type)nodes.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{key:index,className:"item action",onClick:feat.onExport},react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_carbon_icons_react__WEBPACK_IMPORTED_MODULE_0__.d,{className:"icon"}),"导出"));else if("click"===feat.type)nodes.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{key:index,className:"item action",onClick:feat.onClick},feat.title));else if("toggle"===feat.type){const checked=null!==(_a=map[feat.key])&&void 0!==_a&&_a;nodes.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Checkbox,{key:index,className:"item",checked:checked,onChange:()=>setMap({...map,[feat.key]:!map[feat.key]})},feat.title)),feat.transform&&transforms.push(feat.transform(checked))}else{if("custom"!==feat.type)throw new Error("Unsupported action");feat.node&&nodes.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{className:"item",key:index},feat.node)),feat.transform&&transforms.push(feat.transform)}}return{transforms:transforms,nodes:nodes,view:Object(react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(props=>react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(OperationBarDiv,Object.assign({},props,{style:{"--action-color":actionColor,...props.style}})),[OperationBarDiv,actionColor])}}try{useOperationBar.displayName="useOperationBar",useOperationBar.__docgenInfo={description:"",displayName:"useOperationBar",props:{features:{defaultValue:null,description:"",name:"features",required:!0,type:{name:"TableOperationFeature[]"}},columns:{defaultValue:null,description:"",name:"columns",required:!0,type:{name:"ArtColumn[]"}},components:{defaultValue:null,description:"",name:"components",required:!0,type:{name:"any"}},actionColor:{defaultValue:{value:"#23a3ff"},description:"",name:"actionColor",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/operation-bar.tsx#useOperationBar"]={docgenInfo:useOperationBar.__docgenInfo,name:"useOperationBar",path:"src/biz/operation-bar.tsx#useOperationBar"})}catch(__react_docgen_typescript_loader_error){}},,,,function(module,__webpack_exports__,__webpack_require__){"use strict";function flatMap(array,callback){const result=[];return array.forEach((value,index)=>{result.push(...callback(value,index,array))}),result}function fromEntries(entries){const result={};for(const[key,value]of entries)result[key]=value;return result}__webpack_require__.d(__webpack_exports__,"a",(function(){return flatMap})),__webpack_require__.d(__webpack_exports__,"b",(function(){return fromEntries}));try{fromEntries.displayName="fromEntries",fromEntries.__docgenInfo={description:"",displayName:"fromEntries",props:{"__@iterator":{defaultValue:null,description:"",name:"__@iterator",required:!0,type:{name:"() => Iterator<readonly [string | number | symbol, T], any, undefined>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/common-utils/others.ts#fromEntries"]={docgenInfo:fromEntries.__docgenInfo,name:"fromEntries",path:"src/common-utils/others.ts#fromEntries"})}catch(__react_docgen_typescript_loader_error){}},,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("3yYM")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("j4Sf")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("LUwd")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("OZaJ")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("tVqn")},,,,,,,,,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"b",(function(){return columnHover}));var _common_utils__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(56),_utils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(128);function columnHover({hoverColor:hoverColor="#f5f5f5",hoverColIndex:hoverColIndex,onChangeHoverColIndex:onChangeHoverColIndex}){return Object(_utils__WEBPACK_IMPORTED_MODULE_1__.a)((col,{range:range})=>{const colIndexMatched=range.start<=hoverColIndex&&hoverColIndex<range.end;if(!Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__.a)(col))return col;const prevGetCellProps=col.getCellProps;return{...col,getCellProps(value,record,rowIndex){var _a;const prevCellProps=null!==(_a=null==prevGetCellProps?void 0:prevGetCellProps(value,record,rowIndex))&&void 0!==_a?_a:{};return{...prevCellProps,style:{...prevCellProps.style,backgroundColor:colIndexMatched?hoverColor:void 0},onMouseEnter(e){var _a;null===(_a=prevCellProps.onMouseEnter)||void 0===_a||_a.call(prevCellProps,e),onChangeHoverColIndex(range.start)},onMouseLeave(e){var _a;null===(_a=prevCellProps.onMouseLeave)||void 0===_a||_a.call(prevCellProps,e),onChangeHoverColIndex(-1)}}}}})}try{columnHover.displayName="columnHover",columnHover.__docgenInfo={description:"",displayName:"columnHover",props:{hoverColor:{defaultValue:{value:"#f5f5f5"},description:"",name:"hoverColor",required:!1,type:{name:"string"}},hoverColIndex:{defaultValue:null,description:"",name:"hoverColIndex",required:!0,type:{name:"number"}},onChangeHoverColIndex:{defaultValue:null,description:"",name:"onChangeHoverColIndex",required:!0,type:{name:"(nextColIndex: number) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/common-transforms/columnHover.tsx#columnHover"]={docgenInfo:columnHover.__docgenInfo,name:"columnHover",path:"src/biz/common-transforms/columnHover.tsx#columnHover"})}catch(__react_docgen_typescript_loader_error){}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"b",(function(){return columnResize}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),rxjs__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(510),rxjs_operators__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(910),rxjs_operators__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(174),styled_components__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(29),_common_utils_internals__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(59),_common_utils_isLeafNode__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(56),_utils_transformColumn__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(128);const ResizeHandle=styled_components__WEBPACK_IMPORTED_MODULE_4__.b.span`
  position: absolute;
  top: 0;
  bottom: 0;
  right: -5px;
  width: 10px;
  cursor: col-resize;
  z-index: 1;
`;function columnResize({sizes:sizes,onChangeSizes:onChangeSizes,minSize:minSize=40,maxSize:maxSize=1/0,appendExpander:appendExpander,disableUserSelectWhenResizing:disableUserSelectWhenResizing}){const startResize=(colIndex,e)=>{const startX=e.clientX,startSize=sizes[colIndex],nextSizes$=Object(rxjs__WEBPACK_IMPORTED_MODULE_1__.a)(window,"mousemove").pipe(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.a(Object(rxjs__WEBPACK_IMPORTED_MODULE_1__.a)(window,"mouseup")),rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.a(e=>{const movingX=e.clientX,nextSizes=sizes.slice();return nextSizes[colIndex]=function clamp(min,x,max){return Math.max(min,Math.min(max,x))}(minSize,startSize+(movingX-startX),maxSize),nextSizes}));let docElemStyle,prevUserSelect="";disableUserSelectWhenResizing&&(docElemStyle=document.documentElement.style,prevUserSelect=docElemStyle.userSelect,docElemStyle.userSelect="none",docElemStyle.cursor="col-resize"),nextSizes$.subscribe({next:onChangeSizes,complete(){disableUserSelectWhenResizing&&(docElemStyle.userSelect=prevUserSelect)}})},innerTransform=Object(_utils_transformColumn__WEBPACK_IMPORTED_MODULE_7__.a)((col,{range:range})=>{var _a;if(!Object(_common_utils_isLeafNode__WEBPACK_IMPORTED_MODULE_6__.a)(col))return col;const prevTitle=Object(_common_utils_internals__WEBPACK_IMPORTED_MODULE_5__.e)(col);return{...col,width:sizes[range.start],title:react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment,null,prevTitle,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ResizeHandle,{className:"resize-handle",onMouseDown:e=>startResize(range.start,e)})),headerCellProps:{...col.headerCellProps,style:{...null===(_a=col.headerCellProps)||void 0===_a?void 0:_a.style,overflow:"visible",position:"relative"}}}});return input=>{const{columns:columns,dataSource:dataSource}=innerTransform(input);return{columns:appendExpander?columns.concat([{name:""}]):columns,dataSource:dataSource}}}try{columnResize.displayName="columnResize",columnResize.__docgenInfo={description:"",displayName:"columnResize",props:{sizes:{defaultValue:null,description:"每一列的宽度",name:"sizes",required:!0,type:{name:"number[]"}},onChangeSizes:{defaultValue:null,description:"修改宽度的回调函数",name:"onChangeSizes",required:!0,type:{name:"(nextSizes: number[]) => void"}},minSize:{defaultValue:{value:40},description:"列的最小宽度，默认为 40",name:"minSize",required:!1,type:{name:"number"}},maxSize:{defaultValue:null,description:"列的最大宽度，默认为 Infinity",name:"maxSize",required:!1,type:{name:"number"}},appendExpander:{defaultValue:null,description:"是否在列的末尾追加可伸缩列，默认为 false",name:"appendExpander",required:!1,type:{name:"boolean"}},disableUserSelectWhenResizing:{defaultValue:null,description:"是否在调整列宽时禁用 user-select，默认为 false",name:"disableUserSelectWhenResizing",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/common-transforms/columnResize.tsx#columnResize"]={docgenInfo:columnResize.__docgenInfo,name:"columnResize",path:"src/biz/common-transforms/columnResize.tsx#columnResize"})}catch(__react_docgen_typescript_loader_error){}},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("DY47")},,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return SpanManager}));class SpanManager{constructor(){this.rects=[]}testSkip(rowIndex,colIndex){return this.rects.some(({left:left,right:right,top:top,bottom:bottom})=>left<=colIndex&&colIndex<right&&top<=rowIndex&&rowIndex<bottom)}stripUpwards(rowIndex){this.rects=this.rects.filter(rect=>rect.bottom>rowIndex)}add(rowIndex,colIndex,colSpan,rowSpan){this.rects.push({left:colIndex,right:colIndex+colSpan,top:rowIndex,bottom:rowIndex+rowSpan})}}try{SpanManager.displayName="SpanManager",SpanManager.__docgenInfo={description:'在表格的单元格的渲染过程中，先渲染的单元格的 colSpan/rowSpan 会影响到后续单元格是否被渲染\n`SpanManager` 会在内部维护一份状态来记录最近渲染单元格的 colSpan/rowSpan，\n方便后续的单元格快速判断 "是否需要跳过渲染"',displayName:"SpanManager",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/base-table/helpers/SpanManager.ts#SpanManager"]={docgenInfo:SpanManager.__docgenInfo,name:"SpanManager",path:"src/base-table/helpers/SpanManager.ts#SpanManager"})}catch(__react_docgen_typescript_loader_error){}},,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return MinimumPivotTableDesigner}));var _alifd_next__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(24),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__),styled_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(29),_assets_fusion_style__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(66);const PivotTableDesignerDiv=styled_components__WEBPACK_IMPORTED_MODULE_2__.b.div`
  .row {
    height: 36px;
    display: flex;
    align-items: center;

    .label {
      width: 120px;
    }
  }

  .prompt {
    color: #999;
  }

  .spare-dim {
    text-decoration: underline;
    margin-left: 8px;
    cursor: pointer;
    :hover {
      outline: 1px dashed #ccc;
      outline-offset: 4px;
    }
  }
`;function MinimumPivotTableDesigner({dimensions:dimensions,leftCodes:leftCodes,topCodes:topCodes,indicatorSide:indicatorSide,onChangeIndicatorSide:onChangeIndicatorSide,onChangeLeftCodes:onChangeLeftCodes,onChangeTopCodes:onChangeTopCodes,showSubtotal:showSubtotal,onChangeShowSubtotal:onChangeShowSubtotal,showSupportsExpandToggle:showSupportsExpandToggle,supportsExpand:supportsExpand,onChangeSupportsExpand:onChangeSupportsExpand}){const dimMap=new Map(dimensions.map(dim=>[dim.code,dim])),spareDims=dimensions.filter(dim=>!leftCodes.includes(dim.code)&&!topCodes.includes(dim.code));return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(PivotTableDesignerDiv,null,react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_assets_fusion_style__WEBPACK_IMPORTED_MODULE_3__.a,null),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{className:"label"},"表格结构："),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_0__.a.Group,null,react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_0__.a,{type:"left"===indicatorSide?"primary":"normal",onClick:()=>onChangeIndicatorSide("left")},"指标放在左侧"),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_0__.a,{type:"top"===indicatorSide?"primary":"normal",onClick:()=>onChangeIndicatorSide("top")},"指标放在上方")),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_0__.a.Group,{style:{marginLeft:16}},react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_0__.a,{onClick:()=>onChangeShowSubtotal(!0),type:showSubtotal?"primary":"normal"},"显示总计/小计"),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_0__.a,{onClick:()=>onChangeShowSubtotal(!1),type:showSubtotal?"normal":"primary"},"隐藏总计/小计")),showSupportsExpandToggle&&react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_0__.a.Group,{style:{marginLeft:16}},react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_0__.a,{onClick:()=>onChangeSupportsExpand(!0),type:supportsExpand?"primary":"normal"},"开启展开/收拢"),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_0__.a,{onClick:()=>onChangeSupportsExpand(!1),type:supportsExpand?"normal":"primary"},"关闭展开/收拢"))),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{className:"label"},"清空维度："),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_0__.a.Group,null,react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_0__.a,{onClick:()=>onChangeLeftCodes([]),disabled:0===leftCodes.length},"清空左侧维度"),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_0__.a,{onClick:()=>onChangeTopCodes([]),disabled:0===topCodes.length},"清空上方维度"))),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{className:"label"},"左侧的维度序列："),0===leftCodes.length&&react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{className:"prompt"},"暂无维度"),leftCodes.map((code,i)=>react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,{key:i},i>0&&react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{style:{margin:"0 4px"}},">"),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",null,dimMap.get(code).name)))),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{className:"label"},"左侧的可添加的维度："),0===spareDims.length&&react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{className:"prompt"},"暂无维度"),spareDims.map(dim=>react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{key:dim.code,className:"spare-dim",onClick:()=>onChangeLeftCodes(leftCodes.concat([dim.code]))},dim.name))),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{className:"label"},"上方维度序列："),0===topCodes.length&&react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{className:"prompt"},"暂无维度"),topCodes.map((code,i)=>react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,{key:i},i>0&&react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{style:{margin:"0 4px"}},">"),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",null,dimMap.get(code).name)))),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div",{className:"row"},react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{className:"label"},"上方的可添加的维度："),0===spareDims.length&&react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{className:"prompt"},"暂无维度"),spareDims.map(dim=>react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span",{key:dim.code,className:"spare-dim",onClick:()=>onChangeTopCodes(topCodes.concat([dim.code]))},dim.name))))}try{MinimumPivotTableDesigner.displayName="MinimumPivotTableDesigner",MinimumPivotTableDesigner.__docgenInfo={description:"",displayName:"MinimumPivotTableDesigner",props:{dimensions:{defaultValue:null,description:"",name:"dimensions",required:!0,type:{name:"{ code: string; name: string; }[]"}},leftCodes:{defaultValue:null,description:"",name:"leftCodes",required:!0,type:{name:"string[]"}},topCodes:{defaultValue:null,description:"",name:"topCodes",required:!0,type:{name:"string[]"}},indicatorSide:{defaultValue:null,description:"",name:"indicatorSide",required:!0,type:{name:"string"}},onChangeIndicatorSide:{defaultValue:null,description:"",name:"onChangeIndicatorSide",required:!0,type:{name:"(side: string) => void"}},onChangeLeftCodes:{defaultValue:null,description:"",name:"onChangeLeftCodes",required:!0,type:{name:"(codes: string[]) => void"}},onChangeTopCodes:{defaultValue:null,description:"",name:"onChangeTopCodes",required:!0,type:{name:"(codes: string[]) => void"}},showSubtotal:{defaultValue:null,description:"",name:"showSubtotal",required:!0,type:{name:"boolean"}},onChangeShowSubtotal:{defaultValue:null,description:"",name:"onChangeShowSubtotal",required:!0,type:{name:"(show: boolean) => void"}},showSupportsExpandToggle:{defaultValue:null,description:"",name:"showSupportsExpandToggle",required:!1,type:{name:"boolean"}},supportsExpand:{defaultValue:null,description:"",name:"supportsExpand",required:!1,type:{name:"boolean"}},onChangeSupportsExpand:{defaultValue:null,description:"",name:"onChangeSupportsExpand",required:!1,type:{name:"(bool: boolean) => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/pivot/MinimumPivotTableDesigner.tsx#MinimumPivotTableDesigner"]={docgenInfo:MinimumPivotTableDesigner.__docgenInfo,name:"MinimumPivotTableDesigner",path:"stories/pivot/MinimumPivotTableDesigner.tsx#MinimumPivotTableDesigner"})}catch(__react_docgen_typescript_loader_error){}},,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return collectNodes}));var _isLeafNode__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(56);function collectNodes(nodes,order){const result=[];return function dfs(nodes){for(const node of nodes)Object(_isLeafNode__WEBPACK_IMPORTED_MODULE_0__.a)(node)?result.push(node):"pre"===order?(result.push(node),dfs(node.children)):"post"===order?(dfs(node.children),result.push(node)):dfs(node.children)}(nodes),result}try{collectNodes.displayName="collectNodes",collectNodes.__docgenInfo={description:"遍历所有节点，并将节点收集到一个数组中.\norder 参数可用于指定遍历规则：\n* `pre` 前序遍历\n* `post` 后续遍历\n* `leaf-only` 忽略内部节点，只收集叶子节点",displayName:"collectNodes",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/common-utils/collectNodes.ts#collectNodes"]={docgenInfo:collectNodes.__docgenInfo,name:"collectNodes",path:"src/common-utils/collectNodes.ts#collectNodes"})}catch(__react_docgen_typescript_loader_error){}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"b",(function(){return buildRecordMatrix})),__webpack_require__.d(__webpack_exports__,"a",(function(){return buildRecordMap}));var _common_utils__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(56),_common_utils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(279),_common_utils_others__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(177),_buildDrillTree__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(89),_simpleEncode__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(125);function fallbackAggregate(slice){return 1===slice.length?slice[0]:{}}function buildRecordMatrix({data:data,leftCodes:leftCodes,topCodes:topCodes,aggregate:aggregate=fallbackAggregate,encode:encode=_simpleEncode__WEBPACK_IMPORTED_MODULE_4__.a,isLeftExpand:isLeftExpand=(()=>!0),isTopExpand:isTopExpand=(()=>!0),prebuiltLeftTree:prebuiltLeftTree,prebuiltTopTree:prebuiltTopTree}){const ctx={peculiarity:new Set},[leftRootDrillNode]=null!=prebuiltLeftTree?prebuiltLeftTree:Object(_buildDrillTree__WEBPACK_IMPORTED_MODULE_3__.a)(data,leftCodes,{encode:encode,includeTopWrapper:!0,isExpand:isLeftExpand}),[topRootDrillNode]=null!=prebuiltTopTree?prebuiltTopTree:Object(_buildDrillTree__WEBPACK_IMPORTED_MODULE_3__.a)(data,topCodes,{encode:encode,includeTopWrapper:!0,isExpand:isTopExpand});return function makeMatrix(rootRow){const result=new Map;return function dfsRow(matrix,row){const subMap=new Map;matrix.set(row.leftKey,subMap),function dfsCol(subMap,col){subMap.set(col.topKey,col.record),Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__.a)(col)||col.children.forEach(childCol=>{dfsCol(subMap,childCol)})}(subMap,row.col),Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__.a)(row)||row.children.forEach(childRow=>{dfsRow(matrix,childRow)})}(result,rootRow),result}(function buildByLeft(ctx,slice,drillNode,depth){let col,children=null;if(Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__.a)(drillNode))col=function buildByTop(ctx,slice,drillNode,depth){let record,children=null;if(Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__.a)(drillNode))record=aggregate(slice,ctx);else{children=[];const code=topCodes[depth],groups=Object(_common_utils__WEBPACK_IMPORTED_MODULE_1__.a)(slice,dwdRow=>dwdRow[code]);ctx.peculiarity.add(code);for(const child of drillNode.children){const group=groups[child.value];group&&children.push(buildByTop(ctx,group,child,depth+1))}ctx.peculiarity.delete(code),record=aggregate(children.map(child=>child.record),ctx)}return{topKey:drillNode.key,topValue:drillNode.value,children:children,record:record}}(ctx,slice,topRootDrillNode,0);else{children=[];const code=leftCodes[depth],groups=Object(_common_utils__WEBPACK_IMPORTED_MODULE_1__.a)(slice,dwdRow=>dwdRow[code]);ctx.peculiarity.add(code);for(const child of drillNode.children){const group=groups[child.value];group&&children.push(buildByLeft(ctx,group,child,depth+1))}ctx.peculiarity.delete(code),col=function mergeColsByTopTree(ctx,colsToMerge){return function dfs(ctx,cols,topDrillNode,depth){let children=null;const record=aggregate(cols.map(c=>c.record),ctx);if(!Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__.a)(topDrillNode)){const topCode=topCodes[depth];ctx.peculiarity.add(topCode);const drillChildDict=Object(_common_utils_others__WEBPACK_IMPORTED_MODULE_2__.b)(topDrillNode.children.map(child=>[child.value,child])),colChildDictArray=cols.map(col=>Object(_common_utils_others__WEBPACK_IMPORTED_MODULE_2__.b)(col.children.map(child=>[child.topValue,child])));children=topDrillNode.children.map(item=>{const childCols=colChildDictArray.map(colChildDict=>colChildDict[item.value]).filter(Boolean);return dfs(ctx,childCols,drillChildDict[item.value],depth+1)}),ctx.peculiarity.delete(topCode)}return{topKey:topDrillNode.key,topValue:topDrillNode.value,record:record,children:children}}(ctx,colsToMerge,topRootDrillNode,0)}(ctx,children.map(child=>child.col))}return{leftKey:drillNode.key,children:children,col:col}}(ctx,data,leftRootDrillNode,0))}function buildRecordMap({codes:codes,encode:encode=_simpleEncode__WEBPACK_IMPORTED_MODULE_4__.a,data:data,aggregate:aggregate,isExpand:isExpand}){const matrix=buildRecordMatrix({data:data,leftCodes:[],topCodes:codes,isTopExpand:isExpand,aggregate:aggregate,encode:encode}),totalKey=encode([]);return matrix.get(totalKey)}try{buildRecordMatrix.displayName="buildRecordMatrix",buildRecordMatrix.__docgenInfo={description:"根据表格左侧与上方的下钻树，从全量明细数据中计算对应的数据立方",displayName:"buildRecordMatrix",props:{leftCodes:{defaultValue:null,description:"",name:"leftCodes",required:!0,type:{name:"string[]"}},topCodes:{defaultValue:null,description:"",name:"topCodes",required:!0,type:{name:"string[]"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"any[]"}},aggregate:{defaultValue:null,description:"",name:"aggregate",required:!1,type:{name:"(slice: any[], ctx: BuildingCtx) => any"}},encode:{defaultValue:null,description:"",name:"encode",required:!1,type:{name:"(valuePath: string[]) => string"}},isLeftExpand:{defaultValue:{value:"() => true"},description:"",name:"isLeftExpand",required:!1,type:{name:"(key: string) => boolean"}},isTopExpand:{defaultValue:{value:"() => true"},description:"",name:"isTopExpand",required:!1,type:{name:"(key: string) => boolean"}},prebuiltLeftTree:{defaultValue:null,description:"",name:"prebuiltLeftTree",required:!1,type:{name:"DrillNode[]"}},prebuiltTopTree:{defaultValue:null,description:"",name:"prebuiltTopTree",required:!1,type:{name:"DrillNode[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/pivot/pivot-utils/builders.ts#buildRecordMatrix"]={docgenInfo:buildRecordMatrix.__docgenInfo,name:"buildRecordMatrix",path:"src/pivot/pivot-utils/builders.ts#buildRecordMatrix"})}catch(__react_docgen_typescript_loader_error){}try{buildRecordMap.displayName="buildRecordMap",buildRecordMap.__docgenInfo={description:"buildRecordMatrix 的简化版本，只能处理一个维度序列，返回一个 Map。\n相当于只处理 matrix 的第一行（汇总行）",displayName:"buildRecordMap",props:{codes:{defaultValue:null,description:"",name:"codes",required:!0,type:{name:"string[]"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"any[]"}},aggregate:{defaultValue:null,description:"",name:"aggregate",required:!1,type:{name:"(slice: any[], ctx: BuildingCtx) => any"}},encode:{defaultValue:null,description:"",name:"encode",required:!1,type:{name:"(valuePath: string[]) => string"}},isExpand:{defaultValue:null,description:"",name:"isExpand",required:!1,type:{name:"(key: string) => boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/pivot/pivot-utils/builders.ts#buildRecordMap"]={docgenInfo:buildRecordMap.__docgenInfo,name:"buildRecordMap",path:"src/pivot/pivot-utils/builders.ts#buildRecordMap"})}catch(__react_docgen_typescript_loader_error){}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return convertDrillTreeToCrossTree}));var _carbon_icons_react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(53),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__),rxjs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(909),styled_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(29),_common_utils__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(56),_simpleEncode__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(125);const ExpandSpan=styled_components__WEBPACK_IMPORTED_MODULE_3__.b.span`
  display: inline-flex;
  align-items: center;
  padding: 2px 4px;
  cursor: pointer;

  :hover {
    outline: 1px dashed #ccc;
  }

  .icon {
    fill: currentColor;
    margin-right: 4px;
  }
`;function convertDrillTreeToCrossTree(drillTree,{indicators:indicators,encode:encode=_simpleEncode__WEBPACK_IMPORTED_MODULE_5__.a,generateSubtotalNode:generateSubtotalNode,enforceExpandTotalNode:enforceExpandTotalNode=!0,expandKeys:expandKeys,onChangeExpandKeys:onChangeExpandKeys=rxjs__WEBPACK_IMPORTED_MODULE_2__.a,supportsExpand:supportsExpand}={}){const totalKey=encode([]),expandKeySet=new Set(null!=expandKeys?expandKeys:[]);return function dfs(drillNodes,depth){const result=[];for(const node of drillNodes){const nodeData={dataKey:node.key,dataPath:node.path};if(Object(_common_utils__WEBPACK_IMPORTED_MODULE_4__.a)(node)&&!node.hasChild)result.push(drillNodeToTreeNode(node,nodeData));else{let needProcessChildren=!0,crossTreeNode={key:node.key,value:node.value,data:nodeData};if(!supportsExpand||enforceExpandTotalNode&&node.key===totalKey?crossTreeNode.children=dfs(node.children,depth+1):expandKeySet.has(node.key)?(crossTreeNode.title=react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ExpandSpan,{onClick:()=>{onChangeExpandKeys(expandKeys.filter(k=>k!==node.key),node,"collapse")}},react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_carbon_icons_react__WEBPACK_IMPORTED_MODULE_0__.t,{className:"icon"}),node.value),crossTreeNode.children=dfs(node.children,depth+1)):(needProcessChildren=!1,crossTreeNode.title=react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ExpandSpan,{onClick:()=>{onChangeExpandKeys(expandKeys.concat([node.key]),node,"expand")}},react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_carbon_icons_react__WEBPACK_IMPORTED_MODULE_0__.a,{className:"icon"}),node.value),null!=indicators&&(crossTreeNode.children=getIndicators(node,nodeData))),needProcessChildren){const subtotalNodeData=null==generateSubtotalNode?void 0:generateSubtotalNode(node);if(subtotalNodeData){const{position:position="start",value:value}=subtotalNodeData,subtotalPath=node.path.concat([value]),subtotalTreeNode=drillNodeToTreeNode({key:encode(subtotalPath),path:subtotalPath,value:value},nodeData);"start"===position?crossTreeNode.children.unshift(subtotalTreeNode):crossTreeNode.children.push(subtotalTreeNode)}}result.push(crossTreeNode)}}return result}(drillTree,0);function getIndicators(node,nodeData){return indicators.map(indicator=>({key:encode(node.path.concat([indicator.code])),value:indicator.name,data:{...nodeData,indicator:indicator},...indicator}))}function drillNodeToTreeNode(node,nodeData){return null!=indicators?{key:node.key,value:node.value,data:nodeData,children:getIndicators(node,nodeData)}:{key:node.key,value:node.value,data:nodeData}}}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return CrossTable}));var classnames=__webpack_require__(8),classnames_default=__webpack_require__.n(classnames),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),styled_components_browser_esm=__webpack_require__(29),table=__webpack_require__(32),styles=__webpack_require__(21),getTreeDepth=__webpack_require__(908),isLeafNode=__webpack_require__(56),constants=__webpack_require__(111);function buildCrossTable(options){const{leftTree:leftTree,topTree:topTree,leftTotalNode:leftTotalNode,topTotalNode:topTotalNode,leftMetaColumns:leftMetaColumns}=options,leftHeaderWidth=Math.max(leftMetaColumns.length,Object(getTreeDepth.a)(leftTree)+1);return{columns:function getColumns(){return[...function getLeftPartColumns(){var _a;const leftPartColumns=[];for(let index=0;index<leftHeaderWidth;index++){const metaCol=null!==(_a=leftMetaColumns[index])&&void 0!==_a?_a:{},{getCellProps:getCellProps,render:render,...staticMetaColConfig}=metaCol;leftPartColumns.push({columnType:"left",lock:!0,...staticMetaColConfig,getCellProps:leftHeaderGetCellPropsFactory(metaCol,index),getSpanRect:leftHeaderGetSpanRectFactory(metaCol,index),getValue:leftHeaderGetValueFactory(metaCol,index),render:leftHeaderRenderFactory(metaCol,index)})}return leftPartColumns;function leftHeaderGetCellPropsFactory(metaCol,colIndex){return(_value,row,rowIndex)=>{var _a;const node=row.nodes[colIndex],customProps=null===(_a=metaCol.getCellProps)||void 0===_a?void 0:_a.call(metaCol,node,colIndex);return{className:classnames_default()(constants.a.leftHeaderCell,null==customProps?void 0:customProps.className),...customProps}}}function leftHeaderGetSpanRectFactory(metaCol,colIndex){return(_value,row)=>row.rects[colIndex]}function leftHeaderGetValueFactory(metaCol,colIndex){return(row,rowIndex)=>row.nodes[colIndex].value}function leftHeaderRenderFactory(metaCol,colIndex){return(v,row,rowIndex)=>{var _a;const node=row.nodes[colIndex];return metaCol.render?metaCol.render(node,colIndex):null!==(_a=node.title)&&void 0!==_a?_a:node.value}}}(),...function getDataPartColumns(){return topTree.length>0?dfs(topTree,{valuePath:[],depth:0}):topTotalNode?dfs([topTotalNode],{valuePath:[],depth:0}):[];function dfs(nodes,ctx){const result=[];for(const node of nodes){if(ctx.valuePath.push(node.value),Object(isLeafNode.a)(node))result.push(getDataColumn(node,ctx.depth));else{const{key:key,value:value,children:children,...others}=node;result.push({columnType:"data-parent",...others,name:value,children:dfs(children,{valuePath:ctx.valuePath,depth:ctx.depth+1})})}ctx.valuePath.pop()}return result}}()];function getDataColumn(topNode,topDepth){const{key:key,value:value,children:children,...others}=topNode;return{columnType:"data",...others,getValue:row=>{const leftDepth=row.nodes.length-1,leftNode=row.nodes[leftDepth];return options.getValue(leftNode,topNode,leftDepth,topDepth)},name:value,children:null,render(value,row){if(options.render){const leftDepth=row.nodes.length-1,leftNode=row.nodes[leftDepth];return options.render(value,leftNode,topNode,leftDepth,topDepth)}return value},getCellProps(value,row){if(options.getCellProps){const leftDepth=row.nodes.length-1,leftNode=row.nodes[leftDepth];return options.getCellProps(value,leftNode,topNode,leftDepth,topDepth)}}}}}(),dataSource:function getDataSource(){const flatRows=[],ctx={depth:0,nodes:[],rects:[],rowIndex:0};leftTree.length>0?dfs(leftTree,ctx):leftTotalNode&&dfs([leftTotalNode],ctx);return flatRows;function dfs(nodes,ctx){let count=0;for(const node of nodes){if(node.hidden)continue;const rect={top:ctx.rowIndex+count,bottom:-1,left:ctx.depth,right:-1},row={[constants.b]:node.key,rects:[...ctx.rects,rect],nodes:[...ctx.nodes,node]};if(Object(isLeafNode.a)(node))rect.right=leftHeaderWidth,rect.bottom=rect.top+1,flatRows.push(row),count+=1;else{ctx.rects.push(rect),ctx.nodes.push(node);const ret=dfs(node.children,{nodes:ctx.nodes,rects:ctx.rects,depth:ctx.depth+1,rowIndex:ctx.rowIndex+count});ctx.rects.pop(),ctx.nodes.pop(),count+=ret.count,rect.right=rect.left+1,rect.bottom=rect.top+ret.count}}return{count:count}}}()}}try{buildCrossTable.displayName="buildCrossTable",buildCrossTable.__docgenInfo={description:"",displayName:"buildCrossTable",props:{leftTree:{defaultValue:null,description:"",name:"leftTree",required:!0,type:{name:"LeftCrossTreeNode[]"}},topTree:{defaultValue:null,description:"",name:"topTree",required:!0,type:{name:"TopCrossTreeNode[]"}},leftTotalNode:{defaultValue:null,description:"",name:"leftTotalNode",required:!1,type:{name:"LeftCrossTreeNode"}},topTotalNode:{defaultValue:null,description:"",name:"topTotalNode",required:!1,type:{name:"TopCrossTreeNode"}},leftMetaColumns:{defaultValue:null,description:"",name:"leftMetaColumns",required:!0,type:{name:"CrossTableLeftMetaColumn[]"}},getValue:{defaultValue:null,description:"",name:"getValue",required:!0,type:{name:"any"}},render:{defaultValue:null,description:"",name:"render",required:!1,type:{name:"any"}},getCellProps:{defaultValue:null,description:"",name:"getCellProps",required:!1,type:{name:"any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/pivot/cross-table/buildCrossTable.tsx#buildCrossTable"]={docgenInfo:buildCrossTable.__docgenInfo,name:"buildCrossTable",path:"src/pivot/cross-table/buildCrossTable.tsx#buildCrossTable"})}catch(__react_docgen_typescript_loader_error){}const StyledBaseTableForCrossTable=Object(styled_components_browser_esm.b)(table.a)`
  // 使 art-table 默认的 hover 效果失效
  .${styles.a.tableBody} tr.hovered {
    background-color: inherit;
  }

  .${styles.a.tableBody} td.${constants.a.leftHeaderCell} {
    vertical-align: center;
    padding-top: 16px;
  }

  .${constants.a.topHeaderCell} {
    min-height: 24px;
    display: flex;
    align-items: center;
  }

  &.compact {
    .${styles.a.tableCell} {
      height: 36px;
    }
    .${styles.a.tableBody} td.${constants.a.leftHeaderCell} {
      padding-top: 8px;
    }
  }
`;function CrossTable({leftTree:leftTree,leftTotalNode:leftTotalNode,topTree:topTree,topTotalNode:topTotalNode,getValue:getValue,getCellProps:getCellProps,leftMetaColumns:leftMetaColumns,render:render,className:className,...others}){const{dataSource:dataSource,columns:columns}=buildCrossTable({leftTree:null!=leftTree?leftTree:[],topTree:null!=topTree?topTree:[],leftTotalNode:leftTotalNode,topTotalNode:topTotalNode,getValue:getValue,getCellProps:getCellProps,render:render,leftMetaColumns:leftMetaColumns});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(StyledBaseTableForCrossTable,Object.assign({},others,{dataSource:dataSource,columns:columns,primaryKey:constants.b,className:classnames_default()("compact",className)}))}CrossTable.defaultProps={leftMetaColumns:[]};try{crosstable.displayName="crosstable",crosstable.__docgenInfo={description:"",displayName:"crosstable",props:{leftTree:{defaultValue:null,description:"",name:"leftTree",required:!0,type:{name:"LeftCrossTreeNode[]"}},topTree:{defaultValue:null,description:"",name:"topTree",required:!0,type:{name:"TopCrossTreeNode[]"}},leftTotalNode:{defaultValue:null,description:"",name:"leftTotalNode",required:!1,type:{name:"LeftCrossTreeNode"}},topTotalNode:{defaultValue:null,description:"",name:"topTotalNode",required:!1,type:{name:"TopCrossTreeNode"}},leftMetaColumns:{defaultValue:null,description:"",name:"leftMetaColumns",required:!1,type:{name:"CrossTableLeftMetaColumn[]"}},getValue:{defaultValue:null,description:"",name:"getValue",required:!0,type:{name:"(leftNode: LeftCrossTreeNode, topNode: TopCrossTreeNode, leftDepth: number, topDepth: number) => any"}},render:{defaultValue:null,description:"",name:"render",required:!1,type:{name:"(value: any, leftNode: LeftCrossTreeNode, topNode: TopCrossTreeNode, leftDepth: number, topDepth: number) => ReactNode"}},getCellProps:{defaultValue:null,description:"",name:"getCellProps",required:!1,type:{name:"(value: any, leftNode: LeftCrossTreeNode, topNode: TopCrossTreeNode, leftDepth: number, topDepth: number) => any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/pivot/cross-table/cross-table.tsx#crosstable"]={docgenInfo:crosstable.__docgenInfo,name:"crosstable",path:"src/pivot/cross-table/cross-table.tsx#crosstable"})}catch(__react_docgen_typescript_loader_error){}},,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("aYSr")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("/Qos")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("P2aG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("DfhM")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("LJOr")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("pu3o")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("6U7i")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("Cm4o")},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("CUMQ")},,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("GFpt")},,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("VtSi")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("cbiG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("KEM+")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("maj8")},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return visible}));var _common_utils__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(56),_utils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(128);function visible(visibleCodes){const set=new Set(visibleCodes);return Object(_utils__WEBPACK_IMPORTED_MODULE_1__.a)(column=>Object(_common_utils__WEBPACK_IMPORTED_MODULE_0__.a)(column)?set.has(column.code)?column:{...column,hidden:!0}:column)}try{visible.displayName="visible",visible.__docgenInfo={description:"",displayName:"visible",props:{length:{defaultValue:null,description:"Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",name:"length",required:!0,type:{name:"number"}},toString:{defaultValue:null,description:"Returns a string representation of an array.",name:"toString",required:!1,type:{name:"() => string"}},toLocaleString:{defaultValue:null,description:"Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",name:"toLocaleString",required:!1,type:{name:"() => string"}},pop:{defaultValue:null,description:"Removes the last element from an array and returns it.",name:"pop",required:!0,type:{name:"() => string"}},push:{defaultValue:null,description:"Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",name:"push",required:!0,type:{name:"(...items: string[]) => number"}},concat:{defaultValue:null,description:"Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",name:"concat",required:!0,type:{name:"{ (...items: ConcatArray<string>[]): string[]; (...items: (string | ConcatArray<string>)[]): string[]; }"}},join:{defaultValue:null,description:"Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",name:"join",required:!0,type:{name:"(separator?: string) => string"}},reverse:{defaultValue:null,description:"Reverses the elements in an Array.",name:"reverse",required:!0,type:{name:"() => string[]"}},shift:{defaultValue:null,description:"Removes the first element from an array and returns it.",name:"shift",required:!0,type:{name:"() => string"}},slice:{defaultValue:null,description:"Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.",name:"slice",required:!0,type:{name:"(start?: number, end?: number) => string[]"}},sort:{defaultValue:null,description:"Sorts an array.\n@param compareFn Function used to determine the order of the elements. It is expected to return\ra negative value if first argument is less than second argument, zero if they're equal and a positive\rvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r```ts\r[11,2,22,1].sort((a, b) => a - b)\r```",name:"sort",required:!0,type:{name:"(compareFn?: (a: string, b: string) => number) => string[]"}},splice:{defaultValue:null,description:"Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",name:"splice",required:!0,type:{name:"{ (start: number, deleteCount?: number): string[]; (start: number, deleteCount: number, ...items: string[]): string[]; }"}},unshift:{defaultValue:null,description:"Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",name:"unshift",required:!0,type:{name:"(...items: string[]) => number"}},indexOf:{defaultValue:null,description:"Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",name:"indexOf",required:!0,type:{name:"(searchElement: string, fromIndex?: number) => number"}},lastIndexOf:{defaultValue:null,description:"Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",name:"lastIndexOf",required:!0,type:{name:"(searchElement: string, fromIndex?: number) => number"}},every:{defaultValue:null,description:"Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",name:"every",required:!0,type:{name:"(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"}},some:{defaultValue:null,description:"Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",name:"some",required:!0,type:{name:"(callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean"}},forEach:{defaultValue:null,description:"Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"forEach",required:!0,type:{name:"(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void"}},map:{defaultValue:null,description:"Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"map",required:!0,type:{name:"<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]"}},filter:{defaultValue:null,description:"Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"filter",required:!0,type:{name:"{ <S extends string>(callbackfn: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[]; }"}},reduce:{defaultValue:null,description:"Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",name:"reduce",required:!0,type:{name:"{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."}},reduceRight:{defaultValue:null,description:"Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",name:"reduceRight",required:!0,type:{name:"{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ..."}},find:{defaultValue:null,description:"Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",name:"find",required:!0,type:{name:"{ <S extends string>(predicate: (this: void, value: string, index: number, obj: string[]) => value is S, thisArg?: any): S; (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string; }"}},findIndex:{defaultValue:null,description:"Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",name:"findIndex",required:!0,type:{name:"(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any) => number"}},fill:{defaultValue:null,description:"Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",name:"fill",required:!0,type:{name:"(value: string, start?: number, end?: number) => string[]"}},copyWithin:{defaultValue:null,description:"Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",name:"copyWithin",required:!0,type:{name:"(target: number, start: number, end?: number) => string[]"}},"__@iterator":{defaultValue:null,description:"Iterator",name:"__@iterator",required:!0,type:{name:"() => IterableIterator<string>"}},entries:{defaultValue:null,description:"Returns an iterable of key, value pairs for every entry in the array",name:"entries",required:!0,type:{name:"() => IterableIterator<[number, string]>"}},keys:{defaultValue:null,description:"Returns an iterable of keys in the array",name:"keys",required:!0,type:{name:"() => IterableIterator<number>"}},values:{defaultValue:null,description:"Returns an iterable of values in the array",name:"values",required:!0,type:{name:"() => IterableIterator<string>"}},"__@unscopables":{defaultValue:null,description:"Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",name:"__@unscopables",required:!0,type:{name:"() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"}},includes:{defaultValue:null,description:"Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",name:"includes",required:!0,type:{name:"(searchElement: string, fromIndex?: number) => boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/common-transforms/visible.ts#visible"]={docgenInfo:visible.__docgenInfo,name:"visible",path:"src/biz/common-transforms/visible.ts#visible"})}catch(__react_docgen_typescript_loader_error){}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"PivotTableBasedOnCrossTable",(function(){return PivotTableBasedOnCrossTable}));var ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(89),ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(221),ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(512),ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(220),ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(222),react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__),_assets_cdn_data__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(63),_assets_format__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(17),_assets_fusion_style__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(66),_pivot_MinimumPivotTableDesigner__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(217);__webpack_exports__.default={parameters:{storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import {\\n  buildDrillTree,\\n  buildRecordMatrix,\\n  convertDrillTreeToCrossTree,\\n  createAggregateFunction,\\n  CrossTable,\\n  DrillNode,\\n} from 'ali-react-table/pivot'\\nimport React, { useEffect, useState } from 'react'\\nimport { getIncomeData } from '../assets/cdn-data'\\nimport { amount, lfl, ratio } from '../assets/format'\\nimport { FusionStyles } from '../assets/fusion-style'\\nimport MinimumPivotTableDesigner from '../pivot/MinimumPivotTableDesigner'\\n\\nexport default { title: '示例 / 基于 CrossTable 的透视表' }\\n\\nconst dimensions = [\\n  { code: 'planet', name: '子公司', width: 150 },\\n  { code: 'area', name: '门店', width: 150 },\\n  { code: 'season', name: '季度' },\\n  { code: 'month', name: '月份' },\\n  { code: 'one', name: '一级类目' },\\n  { code: 'two', name: '二级类目' },\\n  { code: 'three', name: '三级类目' },\\n]\\n\\nconst dimMap = new Map(dimensions.map((dim) => [dim.code, dim]))\\n\\nconst indicators = [\\n  {\\n    code: 'a',\\n    name: '指标A',\\n    width: 100,\\n    align: 'right' as const,\\n    expression: 'SUM(a)',\\n    render: amount,\\n  },\\n  {\\n    code: 'b',\\n    name: '指标B',\\n    width: 100,\\n    align: 'right' as const,\\n    expression: 'SUM(b)',\\n    render: amount,\\n  },\\n  {\\n    code: 'c',\\n    name: '指标C',\\n    hidden: true,\\n    render: amount,\\n    expression: 'SUM(c)',\\n  },\\n  {\\n    code: 'lfl',\\n    name: '环比指标',\\n    expression: '(b - c) / c',\\n    width: 100,\\n    align: 'right' as const,\\n    render: lfl,\\n  },\\n  {\\n    code: 'd',\\n    name: '指标D',\\n    expression: 'SUM(d)',\\n    render: amount,\\n    width: 120,\\n    align: 'right' as const,\\n  },\\n  {\\n    code: 'rate',\\n    name: '占比指标',\\n    expression: 'd / b',\\n    render: ratio,\\n    width: 120,\\n    align: 'right' as const,\\n  },\\n]\\n\\nfunction generateSubtotalNode(drillNode: DrillNode) {\\n  return {\\n    position: 'start' as const,\\n    value: drillNode.path.length === 0 ? '总计' : '小计',\\n  }\\n}\\n\\nexport function PivotTableBasedOnCrossTable() {\\n  const [{ data, isLoading }, setState] = useState({ isLoading: true, data: [] as any[] })\\n\\n  useEffect(() => {\\n    getIncomeData().then((data) => setState({ data, isLoading: false }))\\n  }, [])\\n\\n  const [indicatorSide, onChangeIndicatorSide] = useState('top')\\n  const [leftCodes, onChangeLeftCodes] = useState(['planet', 'area', 'one'])\\n  const [topCodes, onChangeTopCodes] = useState(['season', 'month'])\\n  const [showSubtotal, onChangeShowSubtotal] = useState(true)\\n  const [supportsExpand, onChangeSupportsExpand] = useState(false)\\n\\n  const [leftExpandKeys, onChangeLeftExpandKeys] = useState<string[]>([])\\n  const leftExpandKeySet = new Set(leftExpandKeys)\\n  const leftDrillTree = buildDrillTree(data, leftCodes, {\\n    includeTopWrapper: true,\\n    isExpand: !supportsExpand ? undefined : (key) => leftExpandKeySet.has(key),\\n  })\\n  const [leftTreeRoot] = convertDrillTreeToCrossTree(leftDrillTree, {\\n    indicators: indicatorSide === 'left' ? indicators : null,\\n    generateSubtotalNode: showSubtotal ? generateSubtotalNode : null,\\n    supportsExpand,\\n    expandKeys: leftExpandKeys,\\n    onChangeExpandKeys: onChangeLeftExpandKeys,\\n  })\\n\\n  const [topExpandKeys, onChangeTopExpandKeys] = useState<string[]>([])\\n  const topExpandKeySet = new Set(topExpandKeys)\\n  const topDrillTree = buildDrillTree(data, topCodes, {\\n    includeTopWrapper: true,\\n    isExpand: !supportsExpand ? undefined : (key) => topExpandKeySet.has(key),\\n  })\\n  const [topTreeRoot] = convertDrillTreeToCrossTree(topDrillTree, {\\n    indicators: indicatorSide === 'top' ? indicators : null,\\n    generateSubtotalNode: showSubtotal ? generateSubtotalNode : null,\\n    supportsExpand,\\n    expandKeys: topExpandKeys,\\n    onChangeExpandKeys: onChangeTopExpandKeys,\\n  })\\n\\n  const aggregate = createAggregateFunction(indicators)\\n  const matrix = buildRecordMatrix({\\n    data,\\n    leftCodes,\\n    topCodes,\\n    aggregate,\\n    prebuiltLeftTree: leftDrillTree,\\n    prebuiltTopTree: topDrillTree,\\n  })\\n\\n  console.log('透视表状态', {\\n    leftDrillTree,\\n    topDrillTree,\\n    leftTreeRoot,\\n    topTreeRoot,\\n    aggregate,\\n    matrix,\\n  })\\n\\n  return (\\n    <div style={{ minWidth: 800 }}>\\n      <FusionStyles />\\n      <MinimumPivotTableDesigner\\n        showSupportsExpandToggle\\n        supportsExpand={supportsExpand}\\n        onChangeSupportsExpand={onChangeSupportsExpand}\\n        showSubtotal={showSubtotal}\\n        onChangeShowSubtotal={onChangeShowSubtotal}\\n        dimensions={dimensions}\\n        leftCodes={leftCodes}\\n        onChangeLeftCodes={onChangeLeftCodes}\\n        topCodes={topCodes}\\n        onChangeTopCodes={onChangeTopCodes}\\n        indicatorSide={indicatorSide}\\n        onChangeIndicatorSide={onChangeIndicatorSide}\\n      />\\n      <CrossTable\\n        isLoading={isLoading}\\n        defaultColumnWidth={100}\\n        useVirtual={true}\\n        leftMetaColumns={leftCodes.map((code) => dimMap.get(code))}\\n        leftTree={leftTreeRoot.children}\\n        leftTotalNode={leftTreeRoot} // 当 leftTree 为空时，leftTotalNode 用于渲染总计行\\n        topTree={topTreeRoot.children}\\n        topTotalNode={topTreeRoot} // 当 topTree 为空时，topTotalNode 用于渲染总计列\\n        getValue={(leftNode, topNode) => {\\n          // 注意这里我们使用 node.data.dataKey 来获取单元格在 matrix 中的 record\\n          const record = matrix.get(leftNode.data.dataKey).get(topNode.data.dataKey)\\n          if (record == null) {\\n            return '-'\\n          }\\n          const indicator = leftNode.data?.indicator ?? topNode.data?.indicator\\n          return record[indicator.code]\\n        }}\\n        render={(value, leftNode, topNode) => {\\n          const render = leftNode.data?.indicator?.render ?? topNode.data?.indicator?.render\\n          return render ? render(value) : value\\n        }}\\n      />\\n    </div>\\n  )\\n}\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"示例-基于-crosstable-的透视表--pivot-table-based-on-cross-table\":{\"startLoc\":{\"col\":7,\"line\":86},\"endLoc\":{\"col\":1,\"line\":188},\"startBody\":{\"col\":7,\"line\":86},\"endBody\":{\"col\":1,\"line\":188}}};\n    \nimport {\n  buildDrillTree,\n  buildRecordMatrix,\n  convertDrillTreeToCrossTree,\n  createAggregateFunction,\n  CrossTable,\n  DrillNode,\n} from 'ali-react-table/pivot'\nimport React, { useEffect, useState } from 'react'\nimport { getIncomeData } from '../assets/cdn-data'\nimport { amount, lfl, ratio } from '../assets/format'\nimport { FusionStyles } from '../assets/fusion-style'\nimport MinimumPivotTableDesigner from '../pivot/MinimumPivotTableDesigner'\n\nexport default {parameters: {\"storySource\":{\"source\":\"import {\\n  buildDrillTree,\\n  buildRecordMatrix,\\n  convertDrillTreeToCrossTree,\\n  createAggregateFunction,\\n  CrossTable,\\n  DrillNode,\\n} from 'ali-react-table/pivot'\\nimport React, { useEffect, useState } from 'react'\\nimport { getIncomeData } from '../assets/cdn-data'\\nimport { amount, lfl, ratio } from '../assets/format'\\nimport { FusionStyles } from '../assets/fusion-style'\\nimport MinimumPivotTableDesigner from '../pivot/MinimumPivotTableDesigner'\\n\\nexport default { title: '示例 / 基于 CrossTable 的透视表' }\\n\\nconst dimensions = [\\n  { code: 'planet', name: '子公司', width: 150 },\\n  { code: 'area', name: '门店', width: 150 },\\n  { code: 'season', name: '季度' },\\n  { code: 'month', name: '月份' },\\n  { code: 'one', name: '一级类目' },\\n  { code: 'two', name: '二级类目' },\\n  { code: 'three', name: '三级类目' },\\n]\\n\\nconst dimMap = new Map(dimensions.map((dim) => [dim.code, dim]))\\n\\nconst indicators = [\\n  {\\n    code: 'a',\\n    name: '指标A',\\n    width: 100,\\n    align: 'right' as const,\\n    expression: 'SUM(a)',\\n    render: amount,\\n  },\\n  {\\n    code: 'b',\\n    name: '指标B',\\n    width: 100,\\n    align: 'right' as const,\\n    expression: 'SUM(b)',\\n    render: amount,\\n  },\\n  {\\n    code: 'c',\\n    name: '指标C',\\n    hidden: true,\\n    render: amount,\\n    expression: 'SUM(c)',\\n  },\\n  {\\n    code: 'lfl',\\n    name: '环比指标',\\n    expression: '(b - c) / c',\\n    width: 100,\\n    align: 'right' as const,\\n    render: lfl,\\n  },\\n  {\\n    code: 'd',\\n    name: '指标D',\\n    expression: 'SUM(d)',\\n    render: amount,\\n    width: 120,\\n    align: 'right' as const,\\n  },\\n  {\\n    code: 'rate',\\n    name: '占比指标',\\n    expression: 'd / b',\\n    render: ratio,\\n    width: 120,\\n    align: 'right' as const,\\n  },\\n]\\n\\nfunction generateSubtotalNode(drillNode: DrillNode) {\\n  return {\\n    position: 'start' as const,\\n    value: drillNode.path.length === 0 ? '总计' : '小计',\\n  }\\n}\\n\\nexport function PivotTableBasedOnCrossTable() {\\n  const [{ data, isLoading }, setState] = useState({ isLoading: true, data: [] as any[] })\\n\\n  useEffect(() => {\\n    getIncomeData().then((data) => setState({ data, isLoading: false }))\\n  }, [])\\n\\n  const [indicatorSide, onChangeIndicatorSide] = useState('top')\\n  const [leftCodes, onChangeLeftCodes] = useState(['planet', 'area', 'one'])\\n  const [topCodes, onChangeTopCodes] = useState(['season', 'month'])\\n  const [showSubtotal, onChangeShowSubtotal] = useState(true)\\n  const [supportsExpand, onChangeSupportsExpand] = useState(false)\\n\\n  const [leftExpandKeys, onChangeLeftExpandKeys] = useState<string[]>([])\\n  const leftExpandKeySet = new Set(leftExpandKeys)\\n  const leftDrillTree = buildDrillTree(data, leftCodes, {\\n    includeTopWrapper: true,\\n    isExpand: !supportsExpand ? undefined : (key) => leftExpandKeySet.has(key),\\n  })\\n  const [leftTreeRoot] = convertDrillTreeToCrossTree(leftDrillTree, {\\n    indicators: indicatorSide === 'left' ? indicators : null,\\n    generateSubtotalNode: showSubtotal ? generateSubtotalNode : null,\\n    supportsExpand,\\n    expandKeys: leftExpandKeys,\\n    onChangeExpandKeys: onChangeLeftExpandKeys,\\n  })\\n\\n  const [topExpandKeys, onChangeTopExpandKeys] = useState<string[]>([])\\n  const topExpandKeySet = new Set(topExpandKeys)\\n  const topDrillTree = buildDrillTree(data, topCodes, {\\n    includeTopWrapper: true,\\n    isExpand: !supportsExpand ? undefined : (key) => topExpandKeySet.has(key),\\n  })\\n  const [topTreeRoot] = convertDrillTreeToCrossTree(topDrillTree, {\\n    indicators: indicatorSide === 'top' ? indicators : null,\\n    generateSubtotalNode: showSubtotal ? generateSubtotalNode : null,\\n    supportsExpand,\\n    expandKeys: topExpandKeys,\\n    onChangeExpandKeys: onChangeTopExpandKeys,\\n  })\\n\\n  const aggregate = createAggregateFunction(indicators)\\n  const matrix = buildRecordMatrix({\\n    data,\\n    leftCodes,\\n    topCodes,\\n    aggregate,\\n    prebuiltLeftTree: leftDrillTree,\\n    prebuiltTopTree: topDrillTree,\\n  })\\n\\n  console.log('透视表状态', {\\n    leftDrillTree,\\n    topDrillTree,\\n    leftTreeRoot,\\n    topTreeRoot,\\n    aggregate,\\n    matrix,\\n  })\\n\\n  return (\\n    <div style={{ minWidth: 800 }}>\\n      <FusionStyles />\\n      <MinimumPivotTableDesigner\\n        showSupportsExpandToggle\\n        supportsExpand={supportsExpand}\\n        onChangeSupportsExpand={onChangeSupportsExpand}\\n        showSubtotal={showSubtotal}\\n        onChangeShowSubtotal={onChangeShowSubtotal}\\n        dimensions={dimensions}\\n        leftCodes={leftCodes}\\n        onChangeLeftCodes={onChangeLeftCodes}\\n        topCodes={topCodes}\\n        onChangeTopCodes={onChangeTopCodes}\\n        indicatorSide={indicatorSide}\\n        onChangeIndicatorSide={onChangeIndicatorSide}\\n      />\\n      <CrossTable\\n        isLoading={isLoading}\\n        defaultColumnWidth={100}\\n        useVirtual={true}\\n        leftMetaColumns={leftCodes.map((code) => dimMap.get(code))}\\n        leftTree={leftTreeRoot.children}\\n        leftTotalNode={leftTreeRoot} // 当 leftTree 为空时，leftTotalNode 用于渲染总计行\\n        topTree={topTreeRoot.children}\\n        topTotalNode={topTreeRoot} // 当 topTree 为空时，topTotalNode 用于渲染总计列\\n        getValue={(leftNode, topNode) => {\\n          // 注意这里我们使用 node.data.dataKey 来获取单元格在 matrix 中的 record\\n          const record = matrix.get(leftNode.data.dataKey).get(topNode.data.dataKey)\\n          if (record == null) {\\n            return '-'\\n          }\\n          const indicator = leftNode.data?.indicator ?? topNode.data?.indicator\\n          return record[indicator.code]\\n        }}\\n        render={(value, leftNode, topNode) => {\\n          const render = leftNode.data?.indicator?.render ?? topNode.data?.indicator?.render\\n          return render ? render(value) : value\\n        }}\\n      />\\n    </div>\\n  )\\n}\\n\",\"locationsMap\":{\"示例-基于-crosstable-的透视表--pivot-table-based-on-cross-table\":{\"startLoc\":{\"col\":7,\"line\":86},\"endLoc\":{\"col\":1,\"line\":188},\"startBody\":{\"col\":7,\"line\":86},\"endBody\":{\"col\":1,\"line\":188}}}},}, title: '示例 / 基于 CrossTable 的透视表' }\n\nconst dimensions = [\n  { code: 'planet', name: '子公司', width: 150 },\n  { code: 'area', name: '门店', width: 150 },\n  { code: 'season', name: '季度' },\n  { code: 'month', name: '月份' },\n  { code: 'one', name: '一级类目' },\n  { code: 'two', name: '二级类目' },\n  { code: 'three', name: '三级类目' },\n]\n\nconst dimMap = new Map(dimensions.map((dim) => [dim.code, dim]))\n\nconst indicators = [\n  {\n    code: 'a',\n    name: '指标A',\n    width: 100,\n    align: 'right' as const,\n    expression: 'SUM(a)',\n    render: amount,\n  },\n  {\n    code: 'b',\n    name: '指标B',\n    width: 100,\n    align: 'right' as const,\n    expression: 'SUM(b)',\n    render: amount,\n  },\n  {\n    code: 'c',\n    name: '指标C',\n    hidden: true,\n    render: amount,\n    expression: 'SUM(c)',\n  },\n  {\n    code: 'lfl',\n    name: '环比指标',\n    expression: '(b - c) / c',\n    width: 100,\n    align: 'right' as const,\n    render: lfl,\n  },\n  {\n    code: 'd',\n    name: '指标D',\n    expression: 'SUM(d)',\n    render: amount,\n    width: 120,\n    align: 'right' as const,\n  },\n  {\n    code: 'rate',\n    name: '占比指标',\n    expression: 'd / b',\n    render: ratio,\n    width: 120,\n    align: 'right' as const,\n  },\n]\n\nfunction generateSubtotalNode(drillNode: DrillNode) {\n  return {\n    position: 'start' as const,\n    value: drillNode.path.length === 0 ? '总计' : '小计',\n  }\n}\n\nexport const PivotTableBasedOnCrossTable = function PivotTableBasedOnCrossTable() {\n  const [{ data, isLoading }, setState] = useState({ isLoading: true, data: [] as any[] })\n\n  useEffect(() => {\n    getIncomeData().then((data) => setState({ data, isLoading: false }))\n  }, [])\n\n  const [indicatorSide, onChangeIndicatorSide] = useState('top')\n  const [leftCodes, onChangeLeftCodes] = useState(['planet', 'area', 'one'])\n  const [topCodes, onChangeTopCodes] = useState(['season', 'month'])\n  const [showSubtotal, onChangeShowSubtotal] = useState(true)\n  const [supportsExpand, onChangeSupportsExpand] = useState(false)\n\n  const [leftExpandKeys, onChangeLeftExpandKeys] = useState<string[]>([])\n  const leftExpandKeySet = new Set(leftExpandKeys)\n  const leftDrillTree = buildDrillTree(data, leftCodes, {\n    includeTopWrapper: true,\n    isExpand: !supportsExpand ? undefined : (key) => leftExpandKeySet.has(key),\n  })\n  const [leftTreeRoot] = convertDrillTreeToCrossTree(leftDrillTree, {\n    indicators: indicatorSide === 'left' ? indicators : null,\n    generateSubtotalNode: showSubtotal ? generateSubtotalNode : null,\n    supportsExpand,\n    expandKeys: leftExpandKeys,\n    onChangeExpandKeys: onChangeLeftExpandKeys,\n  })\n\n  const [topExpandKeys, onChangeTopExpandKeys] = useState<string[]>([])\n  const topExpandKeySet = new Set(topExpandKeys)\n  const topDrillTree = buildDrillTree(data, topCodes, {\n    includeTopWrapper: true,\n    isExpand: !supportsExpand ? undefined : (key) => topExpandKeySet.has(key),\n  })\n  const [topTreeRoot] = convertDrillTreeToCrossTree(topDrillTree, {\n    indicators: indicatorSide === 'top' ? indicators : null,\n    generateSubtotalNode: showSubtotal ? generateSubtotalNode : null,\n    supportsExpand,\n    expandKeys: topExpandKeys,\n    onChangeExpandKeys: onChangeTopExpandKeys,\n  })\n\n  const aggregate = createAggregateFunction(indicators)\n  const matrix = buildRecordMatrix({\n    data,\n    leftCodes,\n    topCodes,\n    aggregate,\n    prebuiltLeftTree: leftDrillTree,\n    prebuiltTopTree: topDrillTree,\n  })\n\n  console.log('透视表状态', {\n    leftDrillTree,\n    topDrillTree,\n    leftTreeRoot,\n    topTreeRoot,\n    aggregate,\n    matrix,\n  })\n\n  return (\n    <div style={{ minWidth: 800 }}>\n      <FusionStyles />\n      <MinimumPivotTableDesigner\n        showSupportsExpandToggle\n        supportsExpand={supportsExpand}\n        onChangeSupportsExpand={onChangeSupportsExpand}\n        showSubtotal={showSubtotal}\n        onChangeShowSubtotal={onChangeShowSubtotal}\n        dimensions={dimensions}\n        leftCodes={leftCodes}\n        onChangeLeftCodes={onChangeLeftCodes}\n        topCodes={topCodes}\n        onChangeTopCodes={onChangeTopCodes}\n        indicatorSide={indicatorSide}\n        onChangeIndicatorSide={onChangeIndicatorSide}\n      />\n      <CrossTable\n        isLoading={isLoading}\n        defaultColumnWidth={100}\n        useVirtual={true}\n        leftMetaColumns={leftCodes.map((code) => dimMap.get(code))}\n        leftTree={leftTreeRoot.children}\n        leftTotalNode={leftTreeRoot} // 当 leftTree 为空时，leftTotalNode 用于渲染总计行\n        topTree={topTreeRoot.children}\n        topTotalNode={topTreeRoot} // 当 topTree 为空时，topTotalNode 用于渲染总计列\n        getValue={(leftNode, topNode) => {\n          // 注意这里我们使用 node.data.dataKey 来获取单元格在 matrix 中的 record\n          const record = matrix.get(leftNode.data.dataKey).get(topNode.data.dataKey)\n          if (record == null) {\n            return '-'\n          }\n          const indicator = leftNode.data?.indicator ?? topNode.data?.indicator\n          return record[indicator.code]\n        }}\n        render={(value, leftNode, topNode) => {\n          const render = leftNode.data?.indicator?.render ?? topNode.data?.indicator?.render\n          return render ? render(value) : value\n        }}\n      />\n    </div>\n  )\n};",locationsMap:{"示例-基于-crosstable-的透视表--pivot-table-based-on-cross-table":{startLoc:{col:43,line:94},endLoc:{col:1,line:196},startBody:{col:43,line:94},endBody:{col:1,line:196}}}},storySource:{source:"import {\n  buildDrillTree,\n  buildRecordMatrix,\n  convertDrillTreeToCrossTree,\n  createAggregateFunction,\n  CrossTable,\n  DrillNode,\n} from 'ali-react-table/pivot'\nimport React, { useEffect, useState } from 'react'\nimport { getIncomeData } from '../assets/cdn-data'\nimport { amount, lfl, ratio } from '../assets/format'\nimport { FusionStyles } from '../assets/fusion-style'\nimport MinimumPivotTableDesigner from '../pivot/MinimumPivotTableDesigner'\n\nexport default { title: '示例 / 基于 CrossTable 的透视表' }\n\nconst dimensions = [\n  { code: 'planet', name: '子公司', width: 150 },\n  { code: 'area', name: '门店', width: 150 },\n  { code: 'season', name: '季度' },\n  { code: 'month', name: '月份' },\n  { code: 'one', name: '一级类目' },\n  { code: 'two', name: '二级类目' },\n  { code: 'three', name: '三级类目' },\n]\n\nconst dimMap = new Map(dimensions.map((dim) => [dim.code, dim]))\n\nconst indicators = [\n  {\n    code: 'a',\n    name: '指标A',\n    width: 100,\n    align: 'right' as const,\n    expression: 'SUM(a)',\n    render: amount,\n  },\n  {\n    code: 'b',\n    name: '指标B',\n    width: 100,\n    align: 'right' as const,\n    expression: 'SUM(b)',\n    render: amount,\n  },\n  {\n    code: 'c',\n    name: '指标C',\n    hidden: true,\n    render: amount,\n    expression: 'SUM(c)',\n  },\n  {\n    code: 'lfl',\n    name: '环比指标',\n    expression: '(b - c) / c',\n    width: 100,\n    align: 'right' as const,\n    render: lfl,\n  },\n  {\n    code: 'd',\n    name: '指标D',\n    expression: 'SUM(d)',\n    render: amount,\n    width: 120,\n    align: 'right' as const,\n  },\n  {\n    code: 'rate',\n    name: '占比指标',\n    expression: 'd / b',\n    render: ratio,\n    width: 120,\n    align: 'right' as const,\n  },\n]\n\nfunction generateSubtotalNode(drillNode: DrillNode) {\n  return {\n    position: 'start' as const,\n    value: drillNode.path.length === 0 ? '总计' : '小计',\n  }\n}\n\nexport function PivotTableBasedOnCrossTable() {\n  const [{ data, isLoading }, setState] = useState({ isLoading: true, data: [] as any[] })\n\n  useEffect(() => {\n    getIncomeData().then((data) => setState({ data, isLoading: false }))\n  }, [])\n\n  const [indicatorSide, onChangeIndicatorSide] = useState('top')\n  const [leftCodes, onChangeLeftCodes] = useState(['planet', 'area', 'one'])\n  const [topCodes, onChangeTopCodes] = useState(['season', 'month'])\n  const [showSubtotal, onChangeShowSubtotal] = useState(true)\n  const [supportsExpand, onChangeSupportsExpand] = useState(false)\n\n  const [leftExpandKeys, onChangeLeftExpandKeys] = useState<string[]>([])\n  const leftExpandKeySet = new Set(leftExpandKeys)\n  const leftDrillTree = buildDrillTree(data, leftCodes, {\n    includeTopWrapper: true,\n    isExpand: !supportsExpand ? undefined : (key) => leftExpandKeySet.has(key),\n  })\n  const [leftTreeRoot] = convertDrillTreeToCrossTree(leftDrillTree, {\n    indicators: indicatorSide === 'left' ? indicators : null,\n    generateSubtotalNode: showSubtotal ? generateSubtotalNode : null,\n    supportsExpand,\n    expandKeys: leftExpandKeys,\n    onChangeExpandKeys: onChangeLeftExpandKeys,\n  })\n\n  const [topExpandKeys, onChangeTopExpandKeys] = useState<string[]>([])\n  const topExpandKeySet = new Set(topExpandKeys)\n  const topDrillTree = buildDrillTree(data, topCodes, {\n    includeTopWrapper: true,\n    isExpand: !supportsExpand ? undefined : (key) => topExpandKeySet.has(key),\n  })\n  const [topTreeRoot] = convertDrillTreeToCrossTree(topDrillTree, {\n    indicators: indicatorSide === 'top' ? indicators : null,\n    generateSubtotalNode: showSubtotal ? generateSubtotalNode : null,\n    supportsExpand,\n    expandKeys: topExpandKeys,\n    onChangeExpandKeys: onChangeTopExpandKeys,\n  })\n\n  const aggregate = createAggregateFunction(indicators)\n  const matrix = buildRecordMatrix({\n    data,\n    leftCodes,\n    topCodes,\n    aggregate,\n    prebuiltLeftTree: leftDrillTree,\n    prebuiltTopTree: topDrillTree,\n  })\n\n  console.log('透视表状态', {\n    leftDrillTree,\n    topDrillTree,\n    leftTreeRoot,\n    topTreeRoot,\n    aggregate,\n    matrix,\n  })\n\n  return (\n    <div style={{ minWidth: 800 }}>\n      <FusionStyles />\n      <MinimumPivotTableDesigner\n        showSupportsExpandToggle\n        supportsExpand={supportsExpand}\n        onChangeSupportsExpand={onChangeSupportsExpand}\n        showSubtotal={showSubtotal}\n        onChangeShowSubtotal={onChangeShowSubtotal}\n        dimensions={dimensions}\n        leftCodes={leftCodes}\n        onChangeLeftCodes={onChangeLeftCodes}\n        topCodes={topCodes}\n        onChangeTopCodes={onChangeTopCodes}\n        indicatorSide={indicatorSide}\n        onChangeIndicatorSide={onChangeIndicatorSide}\n      />\n      <CrossTable\n        isLoading={isLoading}\n        defaultColumnWidth={100}\n        useVirtual={true}\n        leftMetaColumns={leftCodes.map((code) => dimMap.get(code))}\n        leftTree={leftTreeRoot.children}\n        leftTotalNode={leftTreeRoot} // 当 leftTree 为空时，leftTotalNode 用于渲染总计行\n        topTree={topTreeRoot.children}\n        topTotalNode={topTreeRoot} // 当 topTree 为空时，topTotalNode 用于渲染总计列\n        getValue={(leftNode, topNode) => {\n          // 注意这里我们使用 node.data.dataKey 来获取单元格在 matrix 中的 record\n          const record = matrix.get(leftNode.data.dataKey).get(topNode.data.dataKey)\n          if (record == null) {\n            return '-'\n          }\n          const indicator = leftNode.data?.indicator ?? topNode.data?.indicator\n          return record[indicator.code]\n        }}\n        render={(value, leftNode, topNode) => {\n          const render = leftNode.data?.indicator?.render ?? topNode.data?.indicator?.render\n          return render ? render(value) : value\n        }}\n      />\n    </div>\n  )\n}\n",locationsMap:{"示例-基于-crosstable-的透视表--pivot-table-based-on-cross-table":{startLoc:{col:7,line:86},endLoc:{col:1,line:188},startBody:{col:7,line:86},endBody:{col:1,line:188}}}}},title:"示例 / 基于 CrossTable 的透视表"};const dimensions=[{code:"planet",name:"子公司",width:150},{code:"area",name:"门店",width:150},{code:"season",name:"季度"},{code:"month",name:"月份"},{code:"one",name:"一级类目"},{code:"two",name:"二级类目"},{code:"three",name:"三级类目"}],dimMap=new Map(dimensions.map(dim=>[dim.code,dim])),indicators=[{code:"a",name:"指标A",width:100,align:"right",expression:"SUM(a)",render:_assets_format__WEBPACK_IMPORTED_MODULE_7__.a},{code:"b",name:"指标B",width:100,align:"right",expression:"SUM(b)",render:_assets_format__WEBPACK_IMPORTED_MODULE_7__.a},{code:"c",name:"指标C",hidden:!0,render:_assets_format__WEBPACK_IMPORTED_MODULE_7__.a,expression:"SUM(c)"},{code:"lfl",name:"环比指标",expression:"(b - c) / c",width:100,align:"right",render:_assets_format__WEBPACK_IMPORTED_MODULE_7__.b},{code:"d",name:"指标D",expression:"SUM(d)",render:_assets_format__WEBPACK_IMPORTED_MODULE_7__.a,width:120,align:"right"},{code:"rate",name:"占比指标",expression:"d / b",render:_assets_format__WEBPACK_IMPORTED_MODULE_7__.c,width:120,align:"right"}];function generateSubtotalNode(drillNode){return{position:"start",value:0===drillNode.path.length?"总计":"小计"}}const PivotTableBasedOnCrossTable=function PivotTableBasedOnCrossTable(){const[{data:data,isLoading:isLoading},setState]=Object(react__WEBPACK_IMPORTED_MODULE_5__.useState)({isLoading:!0,data:[]});Object(react__WEBPACK_IMPORTED_MODULE_5__.useEffect)(()=>{Object(_assets_cdn_data__WEBPACK_IMPORTED_MODULE_6__.b)().then(data=>setState({data:data,isLoading:!1}))},[]);const[indicatorSide,onChangeIndicatorSide]=Object(react__WEBPACK_IMPORTED_MODULE_5__.useState)("top"),[leftCodes,onChangeLeftCodes]=Object(react__WEBPACK_IMPORTED_MODULE_5__.useState)(["planet","area","one"]),[topCodes,onChangeTopCodes]=Object(react__WEBPACK_IMPORTED_MODULE_5__.useState)(["season","month"]),[showSubtotal,onChangeShowSubtotal]=Object(react__WEBPACK_IMPORTED_MODULE_5__.useState)(!0),[supportsExpand,onChangeSupportsExpand]=Object(react__WEBPACK_IMPORTED_MODULE_5__.useState)(!1),[leftExpandKeys,onChangeLeftExpandKeys]=Object(react__WEBPACK_IMPORTED_MODULE_5__.useState)([]),leftExpandKeySet=new Set(leftExpandKeys),leftDrillTree=Object(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_0__.a)(data,leftCodes,{includeTopWrapper:!0,isExpand:supportsExpand?key=>leftExpandKeySet.has(key):void 0}),[leftTreeRoot]=Object(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_1__.a)(leftDrillTree,{indicators:"left"===indicatorSide?indicators:null,generateSubtotalNode:showSubtotal?generateSubtotalNode:null,supportsExpand:supportsExpand,expandKeys:leftExpandKeys,onChangeExpandKeys:onChangeLeftExpandKeys}),[topExpandKeys,onChangeTopExpandKeys]=Object(react__WEBPACK_IMPORTED_MODULE_5__.useState)([]),topExpandKeySet=new Set(topExpandKeys),topDrillTree=Object(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_0__.a)(data,topCodes,{includeTopWrapper:!0,isExpand:supportsExpand?key=>topExpandKeySet.has(key):void 0}),[topTreeRoot]=Object(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_1__.a)(topDrillTree,{indicators:"top"===indicatorSide?indicators:null,generateSubtotalNode:showSubtotal?generateSubtotalNode:null,supportsExpand:supportsExpand,expandKeys:topExpandKeys,onChangeExpandKeys:onChangeTopExpandKeys}),aggregate=Object(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_2__.a)(indicators),matrix=Object(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_3__.b)({data:data,leftCodes:leftCodes,topCodes:topCodes,aggregate:aggregate,prebuiltLeftTree:leftDrillTree,prebuiltTopTree:topDrillTree});return console.log("透视表状态",{leftDrillTree:leftDrillTree,topDrillTree:topDrillTree,leftTreeRoot:leftTreeRoot,topTreeRoot:topTreeRoot,aggregate:aggregate,matrix:matrix}),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",{style:{minWidth:800}},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_assets_fusion_style__WEBPACK_IMPORTED_MODULE_8__.a,null),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_pivot_MinimumPivotTableDesigner__WEBPACK_IMPORTED_MODULE_9__.a,{showSupportsExpandToggle:!0,supportsExpand:supportsExpand,onChangeSupportsExpand:onChangeSupportsExpand,showSubtotal:showSubtotal,onChangeShowSubtotal:onChangeShowSubtotal,dimensions:dimensions,leftCodes:leftCodes,onChangeLeftCodes:onChangeLeftCodes,topCodes:topCodes,onChangeTopCodes:onChangeTopCodes,indicatorSide:indicatorSide,onChangeIndicatorSide:onChangeIndicatorSide}),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_4__.a,{isLoading:isLoading,defaultColumnWidth:100,useVirtual:!0,leftMetaColumns:leftCodes.map(code=>dimMap.get(code)),leftTree:leftTreeRoot.children,leftTotalNode:leftTreeRoot,topTree:topTreeRoot.children,topTotalNode:topTreeRoot,getValue:(leftNode,topNode)=>{var _a,_b,_c;const record=matrix.get(leftNode.data.dataKey).get(topNode.data.dataKey);return null==record?"-":record[(null!==(_b=null===(_a=leftNode.data)||void 0===_a?void 0:_a.indicator)&&void 0!==_b?_b:null===(_c=topNode.data)||void 0===_c?void 0:_c.indicator).code]},render:(value,leftNode,topNode)=>{var _a,_b,_c,_d,_e;const render=null!==(_c=null===(_b=null===(_a=leftNode.data)||void 0===_a?void 0:_a.indicator)||void 0===_b?void 0:_b.render)&&void 0!==_c?_c:null===(_e=null===(_d=topNode.data)||void 0===_d?void 0:_d.indicator)||void 0===_e?void 0:_e.render;return render?render(value):value}}))}},,,function(module,__webpack_exports__,__webpack_require__){"use strict";function groupBy(list,iteratee){const groups={};for(const item of list){const key=iteratee(item);null==groups[key]&&(groups[key]=[]),groups[key].push(item)}return groups}__webpack_require__.d(__webpack_exports__,"a",(function(){return groupBy}))},,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("+kY7")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("5BYb")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("5878")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("LqLs")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("ct80")},,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("l1C2")},,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("sVFb")},,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("S3pA")},,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("3voH")},,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("N4z3")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("1Mu/")},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("Rl48")},,,,,,,,,,,,,,,,,,function(module,exports){},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("T0aG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("97Jx")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("VrFO")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("Y9Ll")},,function(module){module.exports=JSON.parse('{"name":"ali-react-table","version":"0.13.3","description":"高性能 React 表格组件","sideEffects":false,"module":"dist/ali-react-table.esm.js","main":"dist/ali-react-table.js","types":"dist/ali-react-table.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/alibaba/ali-react-table.git"},"homepage":"https://github.com/alibaba/ali-react-table","author":{"name":"Shi Feichao","email":"842351815@qq.com"},"scripts":{"storybook":"start-storybook -p 2333","build-storybook":"rimraf storybook-dist/ && build-storybook -c .storybook -o storybook-dist/","build":"rimraf dist/ && rollup --config rollup.config.js","preversion":"npm run build","prepublishOnly":"npm run build"},"files":["dist","biz","pivot"],"prettier":{"printWidth":120,"singleQuote":true,"semi":false,"trailingComma":"all"},"dependencies":{"@carbon/icons-react":"^10.9.1","@types/carbon__icons-react":"^10.6.0","@types/classnames":"^2.2.9","classnames":"^2.2.6","constate":"^2.0.0","dvt-aggregation":"^0.2.7","react":"^16.9.0","resize-observer-polyfill":"^1.5.1","rxjs":"^6.5.4","styled-components":"^3.4.10 || ^5.0.1"},"devDependencies":{"@alifd/next":"^1.19.22","@babel/core":"^7.8.7","@babel/plugin-proposal-class-properties":"^7.8.0","@babel/plugin-proposal-nullish-coalescing-operator":"^7.8.0","@babel/plugin-proposal-optional-chaining":"^7.8.0","@babel/plugin-syntax-dynamic-import":"^7.8.0","@babel/plugin-syntax-object-rest-spread":"^7.8.0","@babel/plugin-transform-runtime":"^7.8.0","@babel/preset-env":"^7.8.7","@babel/preset-react":"^7.8.0","@babel/preset-typescript":"^7.7.7","@little-saga/rx-hooks":"^2.2.0","@rollup/plugin-node-resolve":"^7.1.1","@storybook/addon-docs":"6.0.0-beta.8","@storybook/addon-links":"6.0.0-beta.8","@storybook/addon-storysource":"6.0.0-beta.8","@storybook/react":"6.0.0-beta.8","@types/d3":"^5.7.2","@types/lodash":"^4.14.149","@types/numeral":"^0.0.27","@types/react-beautiful-dnd":"^12.1.2","@types/react-helmet":"^5.0.15","@types/styled-components":"5.1.0","awesome-typescript-loader":"^5.2.1","babel-loader":"^8.0.6","babel-plugin-styled-components":"^1.10.7","chalk":"^4.0.0","concurrently":"^5.1.0","csv-parse":"^4.8.8","d3":"^5.15.1","esm":"^3.2.25","gulp-cli":"^2.2.0","immer":"^6.0.3","lodash":"^4.17.15","mobx":"^5.15.4","mobx-react":"^6.2.2","moment":"^2.24.0","numeral":"^2.0.6","prettier":"^2.0.2","react-beautiful-dnd":"latest","react-docgen-typescript-loader":"^3.6.0","react-helmet":"^6.0.0","react-is":"^16.13.0","react-json-view":"^1.19.1","react-use":"^14.1.1","rimraf":"^3.0.2","rollup":"^2.3.1","rollup-plugin-babel":"^4.3.3","rollup-plugin-typescript2":"^0.27.0","ts-loader":"^7.0.0","tsconfig-paths-webpack-plugin":"^3.2.0","typescript":"^3.8.3","webpack":"^4.42.0","xlsx":"^0.16.0"}}')},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("AbK1")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("T4+q")},,,,,,,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return exportTableAsExcel}));var _base_table_helpers_SpanManager__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(212),_common_utils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(908),_common_utils__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(219),_common_utils_internals__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(59),_common_utils_isLeafNode__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(56);function move({c:c,r:r},dx,dy){return{c:c+dx,r:r+dy}}function exportTableAsExcel(xlsxPackage,dataSource,columns,filename){const sheet=xlsxPackage.utils.aoa_to_sheet([]),topHeaderHeight=Object(_common_utils__WEBPACK_IMPORTED_MODULE_1__.a)(columns)+1,origin={c:0,r:0};function addOne(datum,origin){xlsxPackage.utils.sheet_add_aoa(sheet,[[datum]],{origin:origin})}function mergeCells(addr,width,height){1===width&&1===height||(null==sheet["!merges"]&&(sheet["!merges"]=[]),sheet["!merges"].push({s:addr,e:move(addr,width-1,height-1)}))}!function addTopHeaders(origin){!function dfs(cols,startDx,startDy){var _a;const start=move(origin,startDx,startDy);let offsetX=0;for(const col of cols){if(null===(_a=col.features)||void 0===_a?void 0:_a.noExport)continue;const current=move(start,offsetX,0);if(addOne(col.name,current),Object(_common_utils_isLeafNode__WEBPACK_IMPORTED_MODULE_4__.a)(col))offsetX+=1,mergeCells(current,1,topHeaderHeight-startDy);else{const childrenWidth=dfs(col.children,startDx+offsetX,startDy+1);mergeCells(current,childrenWidth,1),offsetX+=childrenWidth}}return offsetX}(columns,0,0)}(origin),function addDataPart(origin){const leafColumns=Object(_common_utils__WEBPACK_IMPORTED_MODULE_2__.a)(columns,"leaf-only").filter(col=>{var _a;return!(null===(_a=col.features)||void 0===_a?void 0:_a.noExport)}),spanManager=new _base_table_helpers_SpanManager__WEBPACK_IMPORTED_MODULE_0__.a;!function add(data,origin){xlsxPackage.utils.sheet_add_aoa(sheet,data,{origin:origin})}(dataSource.map((record,rowIndex)=>(spanManager.stripUpwards(rowIndex),leafColumns.map((col,colIndex)=>{if(spanManager.testSkip(rowIndex,colIndex))return null;const spanRect=function safeGetSpanRect(column,record,rowIndex,colIndex){let colSpan=1,rowSpan=1;if(column.getSpanRect){const value=Object(_common_utils_internals__WEBPACK_IMPORTED_MODULE_3__.c)(column,record,rowIndex),spanRect=column.getSpanRect(value,record,rowIndex);colSpan=null==spanRect?1:spanRect.right-colIndex,rowSpan=null==spanRect?1:spanRect.bottom-rowIndex}else{const cellProps=Object(_common_utils_internals__WEBPACK_IMPORTED_MODULE_3__.a)(column,record,rowIndex);null!=cellProps.colSpan&&(colSpan=cellProps.colSpan),null!=cellProps.rowSpan&&(rowSpan=cellProps.rowSpan)}return{top:rowIndex,bottom:rowIndex+rowSpan,left:colIndex,right:colIndex+colSpan}}(col,record,rowIndex,colIndex),rowSpan=spanRect.bottom-spanRect.top,colSpan=spanRect.right-spanRect.left;return(rowSpan>1||colSpan>1)&&(spanManager.add(spanRect.top,spanRect.left,colSpan,rowSpan),mergeCells(move(origin,spanRect.left,spanRect.top),colSpan,rowSpan)),function sanitizeCellDatum(value){return value===1/0||value===-1/0||"number"==typeof value&&isNaN(value)?null:value}(Object(_common_utils_internals__WEBPACK_IMPORTED_MODULE_3__.c)(col,record,rowIndex))}))),origin)}(move(origin,0,topHeaderHeight)),xlsxPackage.writeFile({SheetNames:["Sheet1"],Sheets:{Sheet1:sheet}},filename)}try{exportTableAsExcel.displayName="exportTableAsExcel",exportTableAsExcel.__docgenInfo={description:"兼容 ArtColumn 的 Excel 导出函数。\n该函数会调用 `column.getValue`（如果该方法不为空的话）来获取表格中每个单元格的数据.\n\n* biz features: 当 `col.features.noExport` 为 true 时，导出文件时将忽略该列\n* 支持分组表头\n* 暂不支持 rowSpan / colSpan",displayName:"exportTableAsExcel",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/biz/utils/exportTableAsExcel.ts#exportTableAsExcel"]={docgenInfo:exportTableAsExcel.__docgenInfo,name:"exportTableAsExcel",path:"src/biz/utils/exportTableAsExcel.ts#exportTableAsExcel"})}catch(__react_docgen_typescript_loader_error){}},,,,,,,,,function(module,exports,__webpack_require__){__webpack_require__(521),__webpack_require__(546),__webpack_require__(547),__webpack_require__(593),__webpack_require__(726),module.exports=__webpack_require__(766)},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("ARua")},,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("9JhN")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("PjZX")},,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(285)},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("JY+C")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("ZUdG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("PuIx")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("hpdy")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("N9G2")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("f4p7")},,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("dSaG")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("hQin")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("iu90")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("OtWY")},,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("LJ7e")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("I2fK")},,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("3kp9")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("/bc2")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("/JuR")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("+Bxv")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("muFx")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("Wci6")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("WoRU")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("o3fS")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("JmTi")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("xaiR")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("SlD/")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("Monn")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("A/2O")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("uFXj")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("OCSl")},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("kA4r")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("Blm6")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("ssvU")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("lZm3")},,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("Ee2X")},,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("BGTi")},,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("b2e3")},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("wC3K")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("zKkv")},,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("H87J")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("O1Sc")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("zF5n")},,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("tJVe")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("nuol")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("cww3")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("PjJO")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("DpO5")},,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("Kkar")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("2q8g")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("nDih")},,,,,function(module,exports,__webpack_require__){"use strict";(function(module){var _framework=__webpack_require__(285);module._StorybookPreserveDecorators=!0,(0,_framework.configure)([__webpack_require__(767),__webpack_require__(771),__webpack_require__(777),__webpack_require__(779),__webpack_require__(836),__webpack_require__(838),__webpack_require__(845),__webpack_require__(847),__webpack_require__(849),__webpack_require__(878),__webpack_require__(880),__webpack_require__(882),__webpack_require__(884),__webpack_require__(886),__webpack_require__(888),__webpack_require__(890),__webpack_require__(895)],module)}).call(this,__webpack_require__(227)(module))},function(module,exports,__webpack_require__){var map={"./index.stories.mdx":768};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=767},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16),_package_json__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(495),react_json_view__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__(149),react_json_view__WEBPACK_IMPORTED_MODULE_15___default=__webpack_require__.n(react_json_view__WEBPACK_IMPORTED_MODULE_15__);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"基本信息",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"高性能 React 表格组件"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"npm install ali-react-table")),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"高性能，内置虚拟滚动，数据量较大时自动开启"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"简单灵活的 API，丰富的定制能力"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"实用的表格特性：表头吸顶 & 左侧/右侧锁列 & 粘性定位的滚动条")),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"需要用表格展示大量数据，对表格性能较为敏感"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"页面本身没有引入组件库（可能是出于页面体积的考量），缺少开箱可用的 React 表格"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"组件库所提供的表格组件可定制能力不够，需要更加灵活的表格组件")),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"表格目前只能跑在 PC 浏览器中，暂不支持移动端"),_ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"表格只兼容 react 16"),_ref9=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"在 Canvas 模式下按下 A 键可以打开当前示例对应的源码"),_ref10=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(react_json_view__WEBPACK_IMPORTED_MODULE_15___default.a,{src:_package_json__WEBPACK_IMPORTED_MODULE_14__,name:"package.json",enableClipboard:!1,collapsed:0,mdxType:"ReactJson"});function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"ali-react-table"},"ali-react-table"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"p"},{href:"https://www.npmjs.org/package/ali-react-table",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("img",_extends({parentName:"a"},{src:"https://img.shields.io/npm/v/ali-react-table.svg?style=flat-square",alt:"NPM Package"})))),_ref3,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"安装"},"安装"),_ref4,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"特点"},"特点"),_ref5,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"表格适用场景"},"表格适用场景"),_ref6,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"兼容性说明"},"兼容性说明"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,_ref7,_ref8,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"表格用到了大量较新的浏览器 API，目前阶段只兼容较新版本的 Chrome/Firefox/Safari，详见",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"li"},{href:"https://github.com/alibaba/ali-react-table/issues/18",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"该 issue"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"storybook-使用小提示"},"storybook 使用小提示"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"本文档网站使用 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"li"},{href:"https://storybook.js.org/",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"storybook")," 进行构建。部分页面中的示例数量很多，在 Docs 模式可能比较卡，此时可以在顶部切换到 Canvas 模式。"),_ref9),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"相关链接"},"相关链接"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"NPM: ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"li"},{href:"https://www.npmjs.com/package/ali-react-table",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"https://www.npmjs.com/package/ali-react-table")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"GitHub: ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"li"},{href:"https://github.com/alibaba/ali-react-table",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"https://github.com/alibaba/ali-react-table")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"表格组件介绍: ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"li"},{href:"https://zhuanlan.zhihu.com/p/130755755",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"https://zhuanlan.zhihu.com/p/130755755"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"packagejson-（仅供参考）"},"package.json （仅供参考）"),_ref10)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"基本信息",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref11=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref11}}),__webpack_exports__.default=componentMeta},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("oD4t")},function(module,exports,__webpack_require__){module.exports=__webpack_require__(13)("2sZ7")},function(module,exports,__webpack_require__){var map={"./changelog.stories.mdx":772};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=771},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16),_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(58),_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default=__webpack_require__.n(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14__);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"更新日志",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"请注意日志中的加粗部分(break change)哦 ヾ(=･ω･=)o"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"feat: 拖拽 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default.a,{kind:"表格功能拓展 / 功能拓展示例",story:"拖拽调整列宽",mdxType:"LinkTo"},"拖拽调整列宽")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"feat: 新增 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default.a,{kind:"交叉与透视 / 交叉树状表格",story:"page",mdxType:"LinkTo"},"CrossTreeTable")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"feat: 新增部分 transform 的非受控用法",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"useColumnHoverTransform"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"useColumnHoverRangeTransform"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"useColumnResizeTransform"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"useSortTransform"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"useTreeModeTransform"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"feat: 导出 Excel 文件时支持单元格合并")),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},"Break Change: BaseTable primaryKey 的计算值只能为 string，移除 props.primaryKey 的默认值")),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"feat: 导出内部的一些数据处理方法；导出 getTreeDepth 方法"),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"feat(biz): 添加 commonTransforms.columnRangeHover"),_ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"其他较小的调整："),_ref9=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"feat(biz)： 导出一些 commonTransforms 中的 TS 类型；"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"feat(biz)： commonTransforms.orderField 也可以识别 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"features.orderField"))),_ref10=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"✨ 开源，NPM package 名称换为 ali-react-table"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"新增 ali-react-table/biz, ali-react-table/pivot 两个 sub-package",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"表格功能拓展相关符号通过 biz 进行导出"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"交叉与透视功能相关符号通过 pivot 进行导出"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"移除了 BaseTable#onRowClick")),_ref11=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("summary",null,"点击展开开源前的更新日志"),_ref12=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"新增 CustomColumnsDialog 组件")),_ref13=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"新增 commonTransform.tips")),_ref14=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"新增对 styled-components v3 的支持")),_ref15=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"列配置新增 column.headerCellProps 指定表头单元格的 props"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"新增 commonTransform.columnHover"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"自定义列新增 column.features.enforceVisible"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"表格部分样式调整")),_ref16=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"新增表头的虚拟滚动"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"性能优化：使用 div 来作为 virtualTop/virtualBottom"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"样式优化，规范化 CSS variables")),_ref17=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},"Cube 改名为 RecordMatrix，相关函数也修改了名称"),"（注意这是一个 break change，但用了 patch 进行发布）"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"优化表格边框样式")),_ref18=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"useVirtual 为 'auto' 时对应的阈值降低到 80 行 / 80 列"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},"Break Change! BaseTable 移除了 fixedHeader/maxBodyHeight"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"请使用 style.height 与 style.overflow = 'auto' 来为表格设置固定高度"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"New Feature lab 中新增了交叉表")),_ref19=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},"Break Change! 渲染表格操作栏的能力现在由 useOperationBar 的返回值的 view 组件进行提供"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"原先的 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"operationBar.render")," 方法被移除了，请使用 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"<operationBar.view>...</operationBar.view>")," 代替 render 方法"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"下次真的不改了")))),_ref20=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},"Break Change! 组件 OperationBarDiv 被移除了"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"渲染表格操作栏的能力现在由 useOperationBar 的返回值的 render 方法提供"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"Feature: useVirtual 支持两个方向分别设置是否开启；useVirtual 默认值变为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"'auto'")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"文档完善")),_ref21=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},"Break Change! BaseTable ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"strong"},"hasOuterBorder")," 属性被移除")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"Feature: 新增 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"defaultColumnWidth")," 属性，用于指定列的默认宽度"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"Feature: 新增 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"flowRoot")," 属性，用于指定自定义的虚拟滚动的容器"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"Fix: 修复虚拟滚动的相关问题")),_ref22=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"Feature: sort 支持单字段排序；优化对齐")),_ref23=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},"Break Change! 部分工具函数名称修改，详见文档。")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"Feature: BaseTable 添加虚拟滚动，优化表格单元格尺寸同步算法，优化表格性能。")),_ref24=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"Feature: 自定义列支持多层嵌套的 columns 结构"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"Break Change! Column 配置调整：flags -> features， column.view.xxx -> column.xxx"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"Break Change! getCellProps 方法签名调整，改为和 render 一致"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"Break Change! 表格工具栏(OperationBar) 重构")),_ref25=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"biz-utils 新增 commonTransform.sort"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"BREAK CHANGE: ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"useOperationBar")," features 类型修改")),_ref26=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"文档网站优化，升级到 storybook 5.3.0-rc.3，总算可以看到 stories 的源代码了"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"biz-utils 新增构建树的方法，commonTransform.buildTree"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"biz-utils 新增树状模式，commonTransform.treeMode")),_ref27=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"DvtTable 重命名为 BaseTable"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"BaseTable 支持 column.view.hidden 与 column.view.lock"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"引入 dvt-aggregation 来进行聚合计算"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"新增 biz-utils，添加若干用于业务开发的表格特性",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"TableTransform 拓展机制"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"数据导出"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"自定义列")))),_ref28=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"新增 DvtTable 与 CrossTable"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"新增 buildDrillTree / buildCube 等用于构建数据立方的工具函数"));function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,_ref3,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v0132-2020-05-19"},"v0.13.2 2020-05-19"),_ref4,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v0131-2020-04-26"},"v0.13.1 2020-04-26"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"feat(biz): commonTransforms.sort 添加 keepDataSource 参数；为 commonTransforms.treeMode 生成的元素添加 className ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"li"},{href:"https://github.com/alibaba/ali-react-table/pull/31",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"#31"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v0130-2020-04-20"},"v0.13.0 2020-04-20"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,_ref5,_ref6,_ref7,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"fix: 修改 TypeScript 的 target 为 ES2015 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"li"},{href:"https://github.com/alibaba/ali-react-table/pull/24",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"#24"))),_ref8,_ref9,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v0122-2020-04-17"},"v0.12.2 2020-04-17"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"feat: commonTransforms.sort 支持上层传入自定义的渲染组件 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"li"},{href:"https://github.com/alibaba/ali-react-table/pull/23",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"#23")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"feat: 修改 proto TS 类型，添加 proto.extends ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"li"},{href:"https://github.com/alibaba/ali-react-table/pull/14",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"#14")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"deps: 移除对 immer 和 react-dom 的依赖 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"li"},{href:"https://github.com/alibaba/ali-react-table/pull/16",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"#16"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v0121-2020-04-13"},"v0.12.1 2020-04-13"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"新增表格功能拓展：自动单元格合并 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"li"},{href:"https://github.com/alibaba/ali-react-table/pull/4",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"#4")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"优化加载图标的显示位置 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"li"},{href:"https://github.com/alibaba/ali-react-table/pull/13",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"#13")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"优化表格行 hover 效果处理 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"li"},{href:"https://github.com/alibaba/ali-react-table/pull/12",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"#12")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"新增：表头部分添加 onWheel 监听 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"li"},{href:"https://github.com/alibaba/ali-react-table/pull/10",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"#10")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"新增：表格功能拓展 treeMode 允许上层定义 isLeafNode ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"li"},{href:"https://github.com/alibaba/ali-react-table/pull/6",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"#6"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v0120-2020-04-02"},"v0.12.0 2020-04-02"),_ref10,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("details",null,_ref11,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v0118-2020-03-30"},"v0.11.8 2020-03-30"),_ref12,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v0117-2020-03-29"},"v0.11.7 2020-03-29"),_ref13,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v0116-2020-03-24"},"v0.11.6 2020-03-24"),_ref14,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v0113-2020-03-23"},"v0.11.3 2020-03-23"),_ref15,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v0110-2020-03-14"},"v0.11.0 2020-03-14"),_ref16,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v0101-2020-03-12"},"v0.10.1 2020-03-12"),_ref17,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v0100-2020-03-11"},"v0.10.0 2020-03-11"),_ref18,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v090-2020-03-05"},"v0.9.0 2020-03-05"),_ref19,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v080-2020-03-03"},"v0.8.0 2020-03-03"),_ref20,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v070-2020-02-22"},"v0.7.0 2020-02-22"),_ref21,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v062-2020-02-19"},"v0.6.2 2020-02-19"),_ref22,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v061-2020-02-16"},"v0.6.1 2020-02-16"),_ref23,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v050-2020-01-12"},"v0.5.0 2020-01-12"),_ref24,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v040-2019-12-30"},"v0.4.0 2019-12-30"),_ref25,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v031-2019-12-28"},"v0.3.1 2019-12-28"),_ref26,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v030-2019-12-27"},"v0.3.0 2019-12-27"),_ref27,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"v020-2019-12-19"},"v0.2.0 2019-12-19"),_ref28))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"更新日志",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref29=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref29}}),__webpack_exports__.default=componentMeta},,,,,function(module,exports,__webpack_require__){var map={"./base-table.stories.mdx":778};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=777},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16),_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(58),_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default=__webpack_require__.n(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14__);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"基础表格 / 文档",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"基础表格 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"BaseTable"),"是 ali-react-table 中各个表格组件的底层组件，提供了基本的表格渲染能力。 BaseTable 由 fusion 0.x 表格修改而来，去除了一些业务交互类功能（例如行选中、单元格编辑等），专注于数据展现。"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"BaseTable 保留了原有表格组件的一些非常实用的特性（表头吸顶、锁列、单元格合并等），并在其基础上进行了大量优化，支持虚拟滚动，支持十万行/十万列以上的渲染规模。"),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"基本的 Table 包含行和列，使用 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"columns")," 属性来定义列的信息，使用传入的 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"dataSource")," 属性数据来创建行，这两个属性也是表格组件必传的 props（其他所有 props 都是可选的）。"),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"dataSource")," 数组用于提供表格每一行的数据；数组中的每个对象对应表格的一行，对象的字段一般需要和 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"column.code")," 对应。",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},"注意是 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"strong"},"code")," 字段，不是 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"strong"},"dataIndex")," 字段")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"columns")," 数组用于指定表格中包含哪些列")),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"基本用法： ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"<BaseTable dataSource={dataSource} columns={columns} />"),"，效果如下："),_ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"基础表格-示例--基本用法",mdxType:"Story"})),_ref9=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"p"},"更多用法详见 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default.a,{kind:"基础表格 / 示例",story:"基本用法",mdxType:"LinkTo"},"BaseTable 的各个示例"),"。")),_ref10=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h2"},"BaseTable"),_ref11=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"BaseTable")," ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"p"},"不支持")," 使用 JSX 标签形式（例如 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"<Table.Column />"),"）定义表格的列配置，",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"p"},"必须使用 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"strong"},"columns")," 数组来定义表格有哪些列。")),_ref12=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"columns")," 中单个列的配置具体如下："),_ref13=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"name"),_ref14=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"string"),_ref15=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"code"),_ref16=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"string"),_ref17=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"getValue"),_ref18=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"(record: any, rowIndex: number) => any"),_ref19=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"render"),_ref20=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"(value: any, record: any, rowIndex: number) => ReactNode"),_ref21=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"getCellProps"),_ref22=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"(value: any, record: any, rowIndex: number) => any"),_ref23=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"getSpanRect"),_ref24=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"(value: any, record: any, rowIndex: number) => SpanRect"),_ref25=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"title"),_ref26=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"ReactNode"),_ref27=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"name"),_ref28=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"width"),_ref29=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"number"),_ref30=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"align"),_ref31=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"'left' / 'center' / 'right'"),_ref32=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"hidden"),_ref33=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"boolean"),_ref34=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"lock"),_ref35=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"boolean"),_ref36=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"children"),_ref37=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"ArtColumn[]"),_ref38=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"headerCellProps"),_ref39=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"React.ThHTMLAttributes"),_ref40=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"features"),_ref41=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"{ [key: string]: any }"),_ref42=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"列配置中的部分字段为必传或必选的字段，规则如下："),_ref43=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"name")," 字段必选"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"对于叶子节点，即 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"column.children == null || column.children.length === 0"),"，",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"code")," 或 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"getValue")," 二者中至少提供一个"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"对于锁定的列（",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"lock=true"),"），宽度 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"width")," 为必传项；推荐给所有的列都配置上宽度，或是给表格配置一个默认的列宽度")),_ref44=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"p"},"主要字段")),_ref45=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"dataSource"),_ref46=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"td"},"必传属性"),_ref47=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"any[]"),_ref48=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"columns"),_ref49=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"td"},"必传属性"),_ref50=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"ArtColumn[]"),_ref51=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"isLoading"),_ref52=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"boolean"),_ref53=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"primaryKey"),_ref54=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"string"),_ref55=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("br",null),_ref56=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"(record: any, rowIndex: number) => string"),_ref57=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("br",null),_ref58=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("br",null),_ref59=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("br",null),_ref60=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"useVirtual"),_ref61=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"'auto'"),_ref62=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("br",null),_ref63=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"boolean"),_ref64=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("br",null),_ref65=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"getRowProps"),_ref66=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"(record: any, rowIndex: number): React.HTMLAttributes"),_ref67=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"p"},"表格样式与结构")),_ref68=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"className"),_ref69=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"number"),_ref70=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"style"),_ref71=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"React.CSSProperties"),_ref72=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"isStickyHead"),_ref73=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"boolean"),_ref74=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"stickyTop"),_ref75=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"number"),_ref76=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"hasHeader"),_ref77=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"boolean"),_ref78=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"useOuterBorder"),_ref79=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"boolean"),_ref80=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"emptyContent"),_ref81=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"ReactNode"),_ref82=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"defaultColumnWidth"),_ref83=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"number"),_ref84=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"p"},"其他不常用的属性")),_ref85=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"stickyBottom"),_ref86=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"number"),_ref87=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"flowRoot"),_ref88=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"'auto' / 'self' / HTMLElement / (() => HTMLElement)"),_ref89=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"在有列嵌套的情况下（通过 column.children 设置列的子节点，形成列的嵌套结构），锁列具有传递性，从而避免了锁定列与非锁定列出现在同一个父节点下的情况："),_ref90=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"如果一个父节点设置了锁列 lock=true，则其所有子节点将自动被设置为 lock=true"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"如果一个节点设置了锁列 lock=true，则其父节点和所有祖先节点将被设置为 lock=true")),_ref91=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"此外，如果所有的列都设置了 lock=true，则整个表格的锁列将不生效。"),_ref92=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"useVirtual")," 可以设定为以下值：",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"'auto'")," （默认值）表示根据表格的行数或列数自动调整是否开启虚拟滚动",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"行数量超过 80 时，自动开启纵向虚拟滚动"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"列数量超过 80 时，自动开启横向虚拟滚动"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"表头的横向虚拟滚动默认关闭"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"boolean")," 表示强制开启或关闭虚拟滚动"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"传入一个对象可以分别指定 横向/纵向/表头 是否开启虚拟滚动",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"对象的结构为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"{ horizontal?: boolean | 'auto', vertical?: boolean | 'auto', header?: boolean | 'auto' }")))))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"水平方向的虚拟滚动 要求「所有的列都有一个指定的宽度」，推荐设置 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"defaultColumnWidth"),"，避免部分列缺失宽度"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"设置 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"style.overflow = 'auto'")," 时，必须为表格设置高度或最大高度；",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"此时表格的外层 div 会被认为是表格所处的 BFC，该 div 的高度将决定表格渲染多少行，故这个 div 的最大高度必须是确定的"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"目前暂不支持动态切换 flowRoot，意味着在表格组件加载之后 重新设置 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"style.overflow")," 将不会起作用"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"在虚拟滚动开启的情况下，需要使用 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"column.getSpanRect")," 来设定单元格合并的情况",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"column.getSpanRect")," 返回一个 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"SpanRect")," 的对象来表示对应单元所处的合并后的位置。"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"SpanRect")," 的具体类型为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"{ left: number, right: number, top: number, bottom: number }"),"，注意其中 left/top 是 inclusive 的，right/bottom 是 exclusive 的。")))),_ref93=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"推荐使用 BaseTable 透出的一些 CSS 变量来自定义表格的样式。下面是一个自定义表格样式的示例："),_ref94=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"基础表格-示例--自定义表格样式",mdxType:"Story"})),_ref95=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("summary",null,"点击展开 CSS 变量列表"),_ref96=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"当 CSS 变量无法满足自定义样式需求时，推荐通过 styled-components 来覆盖表格的默认样式。表格内各部分的 CSS 类名可以通过 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"Classes")," 对象来获取。");function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"基础表格"},"基础表格"),_ref3,_ref4,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"基本用法"},"基本用法"),_ref5,_ref6,_ref7,_ref8,_ref9,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"basetable-列配置"},_ref10," 列配置"),_ref11,_ref12,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("table",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("thead",{parentName:"table"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"thead"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null}),"字段"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null}),"类型"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null})))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tbody",{parentName:"table"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref13),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref14),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"列的名称")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref15),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref16),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"在数据中的字段 code")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref17),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref18),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"自定义取数方法")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref19),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref20),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"自定义渲染方法")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref21),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref22),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"自定义的获取单元格 props 的方法")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref23),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref24),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"在虚拟滚动的情况下设置单元格合并")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref25),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref26),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"列标题的展示名称；在页面中进行展示时，该字段将覆盖 ",_ref27," 字段")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref28),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref29),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"列的宽度，如果该列是锁定的，则宽度为必传项")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref30),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref31),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"单元格对其方向")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref32),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref33),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"是否隐藏")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref34),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref35),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"是否锁列")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref36),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref37),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"该列的子节点")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref38),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref39),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"表头单元格的 props")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref40),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref41),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"功能开关标记，用于对表格功能进行拓展")))),_ref42,_ref43,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"表格-props-一览"},"表格 props 一览"),_ref44,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("table",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("thead",{parentName:"table"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"thead"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null}),"字段"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null}),"类型"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null})))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tbody",{parentName:"table"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref45),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref46," ",_ref47),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"表格数据源")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref48),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref49," ",_ref50),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"表格的列配置")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref51),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref52),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"表格是否在加载中")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref53),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref54," ",_ref55," 或 ",_ref56),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"用于指定每一行的 key",_ref57,"传入字符串表示从数据中获取对应字段的值作为 key",_ref58,"传入函数时将调用该函数来生成每一行的 key",_ref59,"不传该 prop 时，表格将使用下标作为每一行的 key")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref60),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref61," ",_ref62," 或 ",_ref63," ",_ref64," 或一个对象"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"是否开启虚拟滚动，详见下方「虚拟滚动」说明")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref65),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref66),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"自定义每一行的 props")))),_ref67,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("table",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("thead",{parentName:"table"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"thead"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null}),"字段"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null}),"类型"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null})))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tbody",{parentName:"table"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref68),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref69),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"自定义类名")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref70),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref71),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"自定义内联样式")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref72),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref73),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"表格头部是否吸顶，默认为 true")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref74),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref75),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"表头吸顶后，距离顶部的距离")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref76),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref77),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"表格是否具有头部")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref78),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref79),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"是否使用来自外层 div 的边框代替单元格的外边框")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref80),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref81),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"数据为空的时候的表格内容展现")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref82),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref83),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"列的默认宽度")))),_ref84,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("table",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("thead",{parentName:"table"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"thead"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null}),"字段"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null}),"类型"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null})))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tbody",{parentName:"table"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref85),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref86),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"表格底部距离页面下边缘的距离")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref87," ","*"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref88),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"表格所处于的块格式化上下文(BFC)")))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"flowRoot ","*"," ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"li"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"块格式化上下文")," 用于在开启虚拟滚动的情况下计算表格的可见范围。")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"锁列与嵌套的列结构"},"锁列与嵌套的列结构"),_ref89,_ref90,_ref91,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"虚拟滚动"},"虚拟滚动"),_ref92,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"自定义表格样式"},"自定义表格样式"),_ref93,_ref94,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("details",null,_ref95,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"export type BaseTableCSSVariables = Partial<{\n  /** 表格的字体颜色 */\n  '--color': string\n  /** 表格背景颜色 */\n  '--bgcolor': string\n  /** 表头的字体颜色 */\n  '--header-color': string\n  /** 表头的背景颜色 */\n  '--header-bgcolor': string\n  /** 单元格的边框颜色 */\n  '--border-color': string\n\n  /** 表格行高，注意该属性将被作为 CSS variable，不能使用数字作为简写 */\n  '--row-height': string\n  /** 表格行 鼠标悬停时的背景色 */\n  '--row-hover-color': string\n  /** 表格行高，注意该属性将被作为 CSS variable，不能使用数字作为简写 */\n  '--header-row-height': string\n\n  /** 单元格边框，默认为 1px solid var(--border-color) */\n  '--cell-border': string\n  /** 单元格上下边框，默认为 var(--cell-border) */\n  '--cell-border-horizontal': string\n  /** 单元格左右边框，默认为 var(--cell-border) */\n  '--cell-border-vertical': string\n\n  /** 表头单元格边框，默认为 1px solid var(--border-color) */\n  '--header-cell-border': string\n  /** 表头单元格上下边框，默认为 var(--header-cell-border) */\n  '--header-cell-border-horizontal': string\n  /** 表头单元格左右边框，默认为 var(--header-cell-border) */\n  '--header-cell-border-vertical': string\n\n  /** 单元格边框 */\n  '--cell-border-top': string\n  /** 单元格边框 */\n  '--cell-border-bottom': string\n  /** 单元格边框 */\n  '--cell-border-left': string\n  /** 单元格边框 */\n  '--cell-border-right': string\n\n  /** 表头单元格边框 */\n  '--header-cell-border-top': string\n  /** 表头单元格边框 */\n  '--header-cell-border-bottom': string\n  /** 表头单元格边框 */\n  '--header-cell-border-left': string\n  /** 表头单元格边框 */\n  '--header-cell-border-right': string\n}>\n"))),_ref96)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"基础表格 / 文档",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref97=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref97}}),__webpack_exports__.default=componentMeta},function(module,exports,__webpack_require__){var map={"./base-table.stories.tsx":780};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=779},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"基本用法",(function(){return 基本用法})),__webpack_require__.d(__webpack_exports__,"自定义表格样式",(function(){return 自定义表格样式})),__webpack_require__.d(__webpack_exports__,"自定义表格样式2",(function(){return 自定义表格样式2})),__webpack_require__.d(__webpack_exports__,"Props组合",(function(){return Props组合})),__webpack_require__.d(__webpack_exports__,"默认列宽",(function(){return 默认列宽})),__webpack_require__.d(__webpack_exports__,"左侧锁列",(function(){return 左侧锁列})),__webpack_require__.d(__webpack_exports__,"左侧与右侧锁列",(function(){return 左侧与右侧锁列})),__webpack_require__.d(__webpack_exports__,"表头吸顶_Sticky_Header",(function(){return 表头吸顶_Sticky_Header})),__webpack_require__.d(__webpack_exports__,"表头props",(function(){return 表头props})),__webpack_require__.d(__webpack_exports__,"表格吸底_Sticky_Bottom",(function(){return 表格吸底_Sticky_Bottom})),__webpack_require__.d(__webpack_exports__,"列分组",(function(){return 列分组})),__webpack_require__.d(__webpack_exports__,"虚拟滚动与单元格合并",(function(){return 虚拟滚动与单元格合并})),__webpack_require__.d(__webpack_exports__,"自定义单元格样式",(function(){return 自定义单元格样式})),__webpack_require__.d(__webpack_exports__,"自定义表格行props",(function(){return 自定义表格行props}));var _alifd_next__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(77),_alifd_next__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(24),ali_react_table__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(32),ali_react_table__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(21),react__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__),styled_components__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(29),_assets_format__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(17),_assets_fusion_style__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(66),_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(19);__webpack_exports__.default={title:"基础表格 / 示例",parameters:{storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import { Button, Checkbox } from '@alifd/next'\\nimport { ArtColumn, BaseTable, Classes, SpanRect } from 'ali-react-table'\\nimport React, { useState } from 'react'\\nimport styled from 'styled-components'\\nimport { amount, time } from '../assets/format'\\nimport { FusionStyles } from '../assets/fusion-style'\\nimport { cols, testProvColumns, useCityDataSource, useProvinceDataSource } from '../assets/ncov19-assets'\\n\\nexport default {\\n  title: '基础表格 / 示例',\\n  parameters: {\\n    docs: {\\n      page() {\\n        return (\\n          <div\\n            style={{\\n              margin: 'auto',\\n              background: 'rgba(0, 0, 0, 0.03)',\\n              borderRadius: 10,\\n              padding: 30,\\n            }}\\n          >\\n            示例过多，docs page 已在此处禁用，请在页面上方切换到「Canvas」模式\\n          </div>\\n        )\\n      },\\n    },\\n  },\\n}\\n\\nexport function 基本用法() {\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n  const columns: ArtColumn[] = [\\n    { code: 'provinceName', name: '省份', width: 150 },\\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right' },\\n    { code: 'suspectedCount', name: '疑似', width: 100, render: amount, align: 'right' },\\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right' },\\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right' },\\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\\n  ]\\n  return <BaseTable isLoading={isLoading} dataSource={dataSource.slice(0, 5)} columns={columns} />\\n}\\n\\nconst ZebraBaseTable = styled(BaseTable)`\\n  --row-hover-color: none;\\n\\n  .${Classes.tableRow} {\\n    &.even {\\n      background: #f2f2f2;\\n    }\\n\\n    &.odd {\\n      background: white;\\n    }\\n  }\\n`\\n\\nexport function 自定义表格样式() {\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n  return (\\n    <BaseTable\\n      style={{\\n        '--cell-border-horizontal': '1px solid #f0f0f0',\\n        '--cell-border-vertical': 'none',\\n        '--header-bgcolor': '#fafafa',\\n        '--header-cell-border': 'none',\\n        '--header-row-height': '40px',\\n      }}\\n      isLoading={isLoading}\\n      dataSource={dataSource.slice(0, 6)}\\n      columns={testProvColumns}\\n    />\\n  )\\n}\\n\\nexport function 自定义表格样式2() {\\n  /*\\n  import styled from 'styled-components'\\n  import { BaseTable, Classes } from 'ali-react-table'\\n\\n  const ZebraBaseTable = styled(BaseTable)`\\n     --row-hover-color: none;\\n\\n    .${Classes.tableRow} {\\n      &.even {\\n        background: #f2f2f2;\\n      }\\n\\n      &.odd {\\n        background: white;\\n      }\\n    }`\\n   */\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n  return <ZebraBaseTable isLoading={isLoading} dataSource={dataSource.slice(0, 10)} columns={testProvColumns} />\\n}\\n\\nconst Row = styled.div`\\n  height: 36px;\\n  display: flex;\\n  align-items: center;\\n\\n  > span {\\n    width: 100px;\\n  }\\n`\\n\\nexport function Props组合() {\\n  const [config, setConfig] = useState({\\n    hasHeader: true,\\n    isLoading: false,\\n    useOuterBorder: false,\\n    dataSize: 10,\\n    height: 'auto' as 'auto' | number,\\n  })\\n\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n\\n  return (\\n    <div>\\n      <FusionStyles />\\n      <div style={{ lineHeight: 1.5 }}>\\n        hasHeader 表示表头是否展示；\\n        <br />\\n        isLoading 表示表格数据是否在加载中；\\n        <br />\\n        useOuterBorder 表示是否使用表格最外层的 div 的边框来代替单元格的外边框\\n      </div>\\n      <Row>\\n        <Checkbox\\n          checked={config.hasHeader}\\n          onChange={(v) => {\\n            setConfig({ ...config, hasHeader: v })\\n          }}\\n        >\\n          hasHeader\\n        </Checkbox>\\n        <Checkbox\\n          style={{ marginLeft: 32 }}\\n          checked={config.isLoading}\\n          onChange={(v) => {\\n            setConfig({ ...config, isLoading: v })\\n          }}\\n        >\\n          isLoading\\n        </Checkbox>\\n        <Checkbox\\n          style={{ marginLeft: 32 }}\\n          checked={config.useOuterBorder}\\n          onChange={(v) => {\\n            setConfig({ ...config, useOuterBorder: v })\\n          }}\\n        >\\n          useOuterBorder\\n        </Checkbox>\\n      </Row>\\n\\n      <Row>\\n        <span>data size:</span>\\n        <Button.Group>\\n          {[0, 3, 10].map((size) => (\\n            <Button\\n              key={size}\\n              type={config.dataSize === size ? 'primary' : 'normal'}\\n              onClick={() => {\\n                setConfig({ ...config, dataSize: size })\\n              }}\\n            >\\n              {size}\\n            </Button>\\n          ))}\\n          <Button\\n            type={isFinite(config.dataSize) ? 'normal' : 'primary'}\\n            onClick={() => {\\n              setConfig({ ...config, dataSize: Infinity })\\n            }}\\n          >\\n            不限\\n          </Button>\\n        </Button.Group>\\n      </Row>\\n      <Row>\\n        <span>table height:</span>\\n        <Button.Group>\\n          {['auto', 200, 400, 600].map((h) => (\\n            <Button\\n              key={h}\\n              type={config.height === h ? 'primary' : 'normal'}\\n              onClick={() => {\\n                setConfig({ ...config, height: h as any })\\n              }}\\n            >\\n              {h}\\n            </Button>\\n          ))}\\n        </Button.Group>\\n      </Row>\\n      <p style={{ color: '#353640' }}>\\n        tips: 为表格设置具体的高度之后记得添加 style.overflow=auto，不然高度仍然会被内容撑开.\\n      </p>\\n      <BaseTable\\n        hasHeader={config.hasHeader}\\n        isLoading={isLoading || config.isLoading}\\n        useOuterBorder={config.useOuterBorder}\\n        style={{\\n          height: config.height,\\n          overflow: config.height === 'auto' ? 'visible' : 'auto',\\n          marginTop: 16,\\n        }}\\n        dataSource={dataSource.slice(0, config.dataSize)}\\n        columns={testProvColumns}\\n      />\\n    </div>\\n  )\\n}\\n\\nexport function 默认列宽() {\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n  const columns: ArtColumn[] = [\\n    { code: 'provinceName', name: '省份' },\\n    { code: 'confirmedCount', name: '确诊', render: amount, align: 'right' },\\n    { code: 'suspectedCount', name: '疑似', render: amount, align: 'right' },\\n    { code: 'curedCount', name: '治愈', render: amount, align: 'right' },\\n    { code: 'deadCount', name: '死亡', render: amount, align: 'right' },\\n    { code: 'updateTime', name: '最后更新时间', render: time },\\n  ]\\n  return (\\n    <BaseTable\\n      defaultColumnWidth={200}\\n      isLoading={isLoading}\\n      dataSource={dataSource.slice(0, 5)}\\n      columns={[...columns, ...columns]}\\n    />\\n  )\\n}\\n\\nexport function 左侧锁列() {\\n  const { dataSource, isLoading } = useProvinceDataSource()\\n\\n  return (\\n    <BaseTable\\n      style={{ width: 500, height: 300, overflow: 'auto' }}\\n      useOuterBorder\\n      isLoading={isLoading}\\n      dataSource={dataSource}\\n      columns={[\\n        { lock: true, code: 'provinceName', name: '省份', width: 150 },\\n        { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right' },\\n        { code: 'suspectedCount', name: '疑似', width: 100, render: amount, align: 'right' },\\n        { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right' },\\n        { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right' },\\n        { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\\n      ]}\\n    />\\n  )\\n}\\n\\nexport function 左侧与右侧锁列() {\\n  const { dataSource, isLoading } = useCityDataSource()\\n\\n  // 注意为表格设置 style.overflow = 'auto' 之后，必须同时设置 style.height 或 style.maxHeight\\n  return (\\n    <BaseTable\\n      style={{ width: 600, height: 400, overflow: 'auto' }}\\n      isLoading={isLoading}\\n      useOuterBorder\\n      dataSource={dataSource.flatMap((d) => d.children)}\\n      columns={[cols.lockProvCol, cols.cityName, ...cols.indCols, cols.lockTimeCol]}\\n    />\\n  )\\n}\\n\\nexport function 表头吸顶_Sticky_Header() {\\n  const { dataSource, isLoading } = useProvinceDataSource()\\n\\n  return (\\n    <div>\\n      <div\\n        style={{\\n          position: 'sticky',\\n          top: 0,\\n          height: 48,\\n          border: '1px solid #ccc',\\n          zIndex: 30,\\n          background: 'white',\\n          color: '#333',\\n          display: 'flex',\\n          alignItems: 'center',\\n          justifyContent: 'center',\\n        }}\\n      >\\n        <div>表格操作栏，这里适合放置一些功能按钮</div>\\n      </div>\\n      <BaseTable isStickyHead stickyTop={48} isLoading={isLoading} dataSource={dataSource} columns={testProvColumns} />\\n    </div>\\n  )\\n}\\n\\nexport function 表头props() {\\n  // 表头 props 好像也就改个样式 实用一点...\\n\\n  const { dataSource, isLoading } = useProvinceDataSource()\\n\\n  return (\\n    <BaseTable\\n      isLoading={isLoading}\\n      dataSource={dataSource.slice(0, 5)}\\n      columns={[\\n        {\\n          code: 'provinceName',\\n          name: '省份',\\n          width: 150,\\n          headerCellProps: {\\n            style: { color: 'white', fontSize: 20, background: '#1ea7fd' },\\n          },\\n        },\\n        ...cols.indCols,\\n        {\\n          code: 'updateTime',\\n          name: '最后更新时间',\\n          width: 180,\\n          render: time,\\n          headerCellProps: {\\n            style: {\\n              letterSpacing: 10,\\n              fontSize: 20,\\n              fontWeight: 'bold',\\n              textAlign: 'center',\\n            },\\n          },\\n        },\\n      ]}\\n    />\\n  )\\n}\\n\\nexport function 表格吸底_Sticky_Bottom() {\\n  const { dataSource, isLoading } = useProvinceDataSource()\\n\\n  return (\\n    <div>\\n      <BaseTable\\n        isStickyHead\\n        stickyBottom={48}\\n        isLoading={isLoading}\\n        dataSource={dataSource}\\n        columns={testProvColumns}\\n      />\\n      <div\\n        style={{\\n          position: 'sticky',\\n          bottom: 0,\\n          height: 48,\\n          border: '1px solid #ccc',\\n          zIndex: 30,\\n          background: 'white',\\n          color: '#333',\\n          display: 'flex',\\n          alignItems: 'center',\\n          justifyContent: 'center',\\n        }}\\n      >\\n        <div>表格底部操作栏，这里可以放置分页控件</div>\\n      </div>\\n      <div style={{ border: '1px solid #ccc', height: '30vh', marginTop: 32 }}>OTHER CONTENT</div>\\n    </div>\\n  )\\n}\\n\\nexport function 列分组() {\\n  const { dataSource, isLoading } = useProvinceDataSource()\\n\\n  return (\\n    <BaseTable\\n      isLoading={isLoading}\\n      dataSource={dataSource}\\n      columns={[\\n        {\\n          name: '基本信息',\\n          lock: true,\\n          children: [cols.provinceName, cols.updateTime],\\n        },\\n        {\\n          name: '指标分组',\\n          children: [\\n            { name: '指标分组1', children: [cols.confirmedCount, cols.suspectedCount] },\\n            { name: '指标分组2', children: [cols.curedCount, cols.deadCount] },\\n          ],\\n        },\\n      ]}\\n    />\\n  )\\n}\\n\\nexport function 虚拟滚动与单元格合并() {\\n  const { dataSource, isLoading } = useCityDataSource()\\n\\n  let lastTop = 0\\n  const rectMap = new Map<string, SpanRect>()\\n  dataSource.forEach((d) => {\\n    rectMap.set(d.provinceName, {\\n      left: 0,\\n      right: 1,\\n      top: lastTop,\\n      bottom: lastTop + d.children.length,\\n    })\\n    lastTop += d.children.length\\n  })\\n\\n  return (\\n    <BaseTable\\n      isLoading={isLoading}\\n      dataSource={dataSource.slice(0, 3).flatMap((d) => d.children)}\\n      useVirtual={true}\\n      columns={[\\n        {\\n          ...cols.lockProvCol,\\n          getSpanRect(value: any) {\\n            return rectMap.get(value)\\n          },\\n        },\\n        cols.lockCityCol,\\n        cols.confirmedCount,\\n        cols.suspectedCount,\\n        cols.curedCount,\\n        cols.deadCount,\\n        cols.updateTime,\\n      ]}\\n    />\\n  )\\n}\\n\\nexport function 自定义单元格样式() {\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n  const columns: ArtColumn[] = [\\n    { code: 'provinceName', name: '省份', width: 150 },\\n    {\\n      code: 'confirmedCount',\\n      name: '确诊',\\n      width: 100,\\n      render(v: number) {\\n        const danger = v > 1000\\n        const safe = v < 100\\n        return (\\n          <div\\n            style={{\\n              color: danger ? 'red' : safe ? 'green' : 'unset',\\n              fontWeight: danger || safe ? 'bold' : 'normal',\\n            }}\\n          >\\n            {amount(v)}\\n          </div>\\n        )\\n      },\\n      align: 'right',\\n    },\\n    { code: 'suspectedCount', name: '疑似', width: 100, render: amount, align: 'right' },\\n    {\\n      code: 'curedCount',\\n      name: '治愈',\\n      width: 100,\\n      render: amount,\\n      align: 'right',\\n      getCellProps(value: any, record: any) {\\n        if (record.curedCount / record.confirmedCount > 0.3) {\\n          return { style: { background: '#129835', color: 'white', fontWeight: 'bold' } }\\n        }\\n      },\\n    },\\n    {\\n      code: 'deadCount',\\n      name: '死亡',\\n      width: 100,\\n      render: amount,\\n      align: 'right',\\n      getCellProps(value: any) {\\n        const danger = value > 0\\n        if (danger) {\\n          return { style: { background: '#981c12', color: 'white', fontWeight: 'bold' } }\\n        }\\n      },\\n    },\\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\\n  ]\\n  return (\\n    <div>\\n      <h1>样式说明</h1>\\n      <p>红色字体：确诊 &gt; 1000</p>\\n      <p>绿色背景：治愈 / 确诊 &gt; 0.3</p>\\n      <p>红色背景：死亡 &gt; 0</p>\\n      <BaseTable isLoading={isLoading} dataSource={dataSource} columns={columns} />\\n    </div>\\n  )\\n}\\n\\nexport function 自定义表格行props() {\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n\\n  const [lastClickRowIndex, setLastClickRowIndex] = useState(2)\\n\\n  return (\\n    <BaseTable\\n      isLoading={isLoading}\\n      dataSource={dataSource.slice(0, 6)}\\n      columns={testProvColumns}\\n      getRowProps={(record, rowIndex) => {\\n        return {\\n          style:\\n            rowIndex === lastClickRowIndex\\n              ? {\\n                  outlineOffset: -2,\\n                  outline: '2px solid #333',\\n                  background: '#ddd',\\n                }\\n              : undefined,\\n          onClick() {\\n            setLastClickRowIndex(rowIndex)\\n          },\\n        }\\n      }}\\n    />\\n  )\\n}\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"基础表格-示例--基本用法\":{\"startLoc\":{\"col\":7,\"line\":31},\"endLoc\":{\"col\":1,\"line\":42},\"startBody\":{\"col\":7,\"line\":31},\"endBody\":{\"col\":1,\"line\":42}},\"基础表格-示例--自定义表格样式\":{\"startLoc\":{\"col\":7,\"line\":58},\"endLoc\":{\"col\":1,\"line\":74},\"startBody\":{\"col\":7,\"line\":58},\"endBody\":{\"col\":1,\"line\":74}},\"基础表格-示例--自定义表格样式-2\":{\"startLoc\":{\"col\":7,\"line\":76},\"endLoc\":{\"col\":1,\"line\":96},\"startBody\":{\"col\":7,\"line\":76},\"endBody\":{\"col\":1,\"line\":96}},\"基础表格-示例--props组合\":{\"startLoc\":{\"col\":7,\"line\":108},\"endLoc\":{\"col\":1,\"line\":215},\"startBody\":{\"col\":7,\"line\":108},\"endBody\":{\"col\":1,\"line\":215}},\"基础表格-示例--默认列宽\":{\"startLoc\":{\"col\":7,\"line\":217},\"endLoc\":{\"col\":1,\"line\":235},\"startBody\":{\"col\":7,\"line\":217},\"endBody\":{\"col\":1,\"line\":235}},\"基础表格-示例--左侧锁列\":{\"startLoc\":{\"col\":7,\"line\":237},\"endLoc\":{\"col\":1,\"line\":256},\"startBody\":{\"col\":7,\"line\":237},\"endBody\":{\"col\":1,\"line\":256}},\"基础表格-示例--左侧与右侧锁列\":{\"startLoc\":{\"col\":7,\"line\":258},\"endLoc\":{\"col\":1,\"line\":271},\"startBody\":{\"col\":7,\"line\":258},\"endBody\":{\"col\":1,\"line\":271}},\"基础表格-示例--表头吸顶-sticky-header\":{\"startLoc\":{\"col\":7,\"line\":273},\"endLoc\":{\"col\":1,\"line\":297},\"startBody\":{\"col\":7,\"line\":273},\"endBody\":{\"col\":1,\"line\":297}},\"基础表格-示例--表头props\":{\"startLoc\":{\"col\":7,\"line\":299},\"endLoc\":{\"col\":1,\"line\":335},\"startBody\":{\"col\":7,\"line\":299},\"endBody\":{\"col\":1,\"line\":335}},\"基础表格-示例--表格吸底-sticky-bottom\":{\"startLoc\":{\"col\":7,\"line\":337},\"endLoc\":{\"col\":1,\"line\":368},\"startBody\":{\"col\":7,\"line\":337},\"endBody\":{\"col\":1,\"line\":368}},\"基础表格-示例--列分组\":{\"startLoc\":{\"col\":7,\"line\":370},\"endLoc\":{\"col\":1,\"line\":393},\"startBody\":{\"col\":7,\"line\":370},\"endBody\":{\"col\":1,\"line\":393}},\"基础表格-示例--虚拟滚动与单元格合并\":{\"startLoc\":{\"col\":7,\"line\":395},\"endLoc\":{\"col\":1,\"line\":431},\"startBody\":{\"col\":7,\"line\":395},\"endBody\":{\"col\":1,\"line\":431}},\"基础表格-示例--自定义单元格样式\":{\"startLoc\":{\"col\":7,\"line\":433},\"endLoc\":{\"col\":1,\"line\":494},\"startBody\":{\"col\":7,\"line\":433},\"endBody\":{\"col\":1,\"line\":494}},\"基础表格-示例--自定义表格行props\":{\"startLoc\":{\"col\":7,\"line\":496},\"endLoc\":{\"col\":1,\"line\":523},\"startBody\":{\"col\":7,\"line\":496},\"endBody\":{\"col\":1,\"line\":523}}};\n    \nimport { Button, Checkbox } from '@alifd/next'\nimport { ArtColumn, BaseTable, Classes, SpanRect } from 'ali-react-table'\nimport React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { amount, time } from '../assets/format'\nimport { FusionStyles } from '../assets/fusion-style'\nimport { cols, testProvColumns, useCityDataSource, useProvinceDataSource } from '../assets/ncov19-assets'\n\nexport default {\n  title: '基础表格 / 示例',\n  parameters: {\"storySource\":{\"source\":\"import { Button, Checkbox } from '@alifd/next'\\nimport { ArtColumn, BaseTable, Classes, SpanRect } from 'ali-react-table'\\nimport React, { useState } from 'react'\\nimport styled from 'styled-components'\\nimport { amount, time } from '../assets/format'\\nimport { FusionStyles } from '../assets/fusion-style'\\nimport { cols, testProvColumns, useCityDataSource, useProvinceDataSource } from '../assets/ncov19-assets'\\n\\nexport default {\\n  title: '基础表格 / 示例',\\n  parameters: {\\n    docs: {\\n      page() {\\n        return (\\n          <div\\n            style={{\\n              margin: 'auto',\\n              background: 'rgba(0, 0, 0, 0.03)',\\n              borderRadius: 10,\\n              padding: 30,\\n            }}\\n          >\\n            示例过多，docs page 已在此处禁用，请在页面上方切换到「Canvas」模式\\n          </div>\\n        )\\n      },\\n    },\\n  },\\n}\\n\\nexport function 基本用法() {\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n  const columns: ArtColumn[] = [\\n    { code: 'provinceName', name: '省份', width: 150 },\\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right' },\\n    { code: 'suspectedCount', name: '疑似', width: 100, render: amount, align: 'right' },\\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right' },\\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right' },\\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\\n  ]\\n  return <BaseTable isLoading={isLoading} dataSource={dataSource.slice(0, 5)} columns={columns} />\\n}\\n\\nconst ZebraBaseTable = styled(BaseTable)`\\n  --row-hover-color: none;\\n\\n  .${Classes.tableRow} {\\n    &.even {\\n      background: #f2f2f2;\\n    }\\n\\n    &.odd {\\n      background: white;\\n    }\\n  }\\n`\\n\\nexport function 自定义表格样式() {\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n  return (\\n    <BaseTable\\n      style={{\\n        '--cell-border-horizontal': '1px solid #f0f0f0',\\n        '--cell-border-vertical': 'none',\\n        '--header-bgcolor': '#fafafa',\\n        '--header-cell-border': 'none',\\n        '--header-row-height': '40px',\\n      }}\\n      isLoading={isLoading}\\n      dataSource={dataSource.slice(0, 6)}\\n      columns={testProvColumns}\\n    />\\n  )\\n}\\n\\nexport function 自定义表格样式2() {\\n  /*\\n  import styled from 'styled-components'\\n  import { BaseTable, Classes } from 'ali-react-table'\\n\\n  const ZebraBaseTable = styled(BaseTable)`\\n     --row-hover-color: none;\\n\\n    .${Classes.tableRow} {\\n      &.even {\\n        background: #f2f2f2;\\n      }\\n\\n      &.odd {\\n        background: white;\\n      }\\n    }`\\n   */\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n  return <ZebraBaseTable isLoading={isLoading} dataSource={dataSource.slice(0, 10)} columns={testProvColumns} />\\n}\\n\\nconst Row = styled.div`\\n  height: 36px;\\n  display: flex;\\n  align-items: center;\\n\\n  > span {\\n    width: 100px;\\n  }\\n`\\n\\nexport function Props组合() {\\n  const [config, setConfig] = useState({\\n    hasHeader: true,\\n    isLoading: false,\\n    useOuterBorder: false,\\n    dataSize: 10,\\n    height: 'auto' as 'auto' | number,\\n  })\\n\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n\\n  return (\\n    <div>\\n      <FusionStyles />\\n      <div style={{ lineHeight: 1.5 }}>\\n        hasHeader 表示表头是否展示；\\n        <br />\\n        isLoading 表示表格数据是否在加载中；\\n        <br />\\n        useOuterBorder 表示是否使用表格最外层的 div 的边框来代替单元格的外边框\\n      </div>\\n      <Row>\\n        <Checkbox\\n          checked={config.hasHeader}\\n          onChange={(v) => {\\n            setConfig({ ...config, hasHeader: v })\\n          }}\\n        >\\n          hasHeader\\n        </Checkbox>\\n        <Checkbox\\n          style={{ marginLeft: 32 }}\\n          checked={config.isLoading}\\n          onChange={(v) => {\\n            setConfig({ ...config, isLoading: v })\\n          }}\\n        >\\n          isLoading\\n        </Checkbox>\\n        <Checkbox\\n          style={{ marginLeft: 32 }}\\n          checked={config.useOuterBorder}\\n          onChange={(v) => {\\n            setConfig({ ...config, useOuterBorder: v })\\n          }}\\n        >\\n          useOuterBorder\\n        </Checkbox>\\n      </Row>\\n\\n      <Row>\\n        <span>data size:</span>\\n        <Button.Group>\\n          {[0, 3, 10].map((size) => (\\n            <Button\\n              key={size}\\n              type={config.dataSize === size ? 'primary' : 'normal'}\\n              onClick={() => {\\n                setConfig({ ...config, dataSize: size })\\n              }}\\n            >\\n              {size}\\n            </Button>\\n          ))}\\n          <Button\\n            type={isFinite(config.dataSize) ? 'normal' : 'primary'}\\n            onClick={() => {\\n              setConfig({ ...config, dataSize: Infinity })\\n            }}\\n          >\\n            不限\\n          </Button>\\n        </Button.Group>\\n      </Row>\\n      <Row>\\n        <span>table height:</span>\\n        <Button.Group>\\n          {['auto', 200, 400, 600].map((h) => (\\n            <Button\\n              key={h}\\n              type={config.height === h ? 'primary' : 'normal'}\\n              onClick={() => {\\n                setConfig({ ...config, height: h as any })\\n              }}\\n            >\\n              {h}\\n            </Button>\\n          ))}\\n        </Button.Group>\\n      </Row>\\n      <p style={{ color: '#353640' }}>\\n        tips: 为表格设置具体的高度之后记得添加 style.overflow=auto，不然高度仍然会被内容撑开.\\n      </p>\\n      <BaseTable\\n        hasHeader={config.hasHeader}\\n        isLoading={isLoading || config.isLoading}\\n        useOuterBorder={config.useOuterBorder}\\n        style={{\\n          height: config.height,\\n          overflow: config.height === 'auto' ? 'visible' : 'auto',\\n          marginTop: 16,\\n        }}\\n        dataSource={dataSource.slice(0, config.dataSize)}\\n        columns={testProvColumns}\\n      />\\n    </div>\\n  )\\n}\\n\\nexport function 默认列宽() {\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n  const columns: ArtColumn[] = [\\n    { code: 'provinceName', name: '省份' },\\n    { code: 'confirmedCount', name: '确诊', render: amount, align: 'right' },\\n    { code: 'suspectedCount', name: '疑似', render: amount, align: 'right' },\\n    { code: 'curedCount', name: '治愈', render: amount, align: 'right' },\\n    { code: 'deadCount', name: '死亡', render: amount, align: 'right' },\\n    { code: 'updateTime', name: '最后更新时间', render: time },\\n  ]\\n  return (\\n    <BaseTable\\n      defaultColumnWidth={200}\\n      isLoading={isLoading}\\n      dataSource={dataSource.slice(0, 5)}\\n      columns={[...columns, ...columns]}\\n    />\\n  )\\n}\\n\\nexport function 左侧锁列() {\\n  const { dataSource, isLoading } = useProvinceDataSource()\\n\\n  return (\\n    <BaseTable\\n      style={{ width: 500, height: 300, overflow: 'auto' }}\\n      useOuterBorder\\n      isLoading={isLoading}\\n      dataSource={dataSource}\\n      columns={[\\n        { lock: true, code: 'provinceName', name: '省份', width: 150 },\\n        { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right' },\\n        { code: 'suspectedCount', name: '疑似', width: 100, render: amount, align: 'right' },\\n        { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right' },\\n        { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right' },\\n        { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\\n      ]}\\n    />\\n  )\\n}\\n\\nexport function 左侧与右侧锁列() {\\n  const { dataSource, isLoading } = useCityDataSource()\\n\\n  // 注意为表格设置 style.overflow = 'auto' 之后，必须同时设置 style.height 或 style.maxHeight\\n  return (\\n    <BaseTable\\n      style={{ width: 600, height: 400, overflow: 'auto' }}\\n      isLoading={isLoading}\\n      useOuterBorder\\n      dataSource={dataSource.flatMap((d) => d.children)}\\n      columns={[cols.lockProvCol, cols.cityName, ...cols.indCols, cols.lockTimeCol]}\\n    />\\n  )\\n}\\n\\nexport function 表头吸顶_Sticky_Header() {\\n  const { dataSource, isLoading } = useProvinceDataSource()\\n\\n  return (\\n    <div>\\n      <div\\n        style={{\\n          position: 'sticky',\\n          top: 0,\\n          height: 48,\\n          border: '1px solid #ccc',\\n          zIndex: 30,\\n          background: 'white',\\n          color: '#333',\\n          display: 'flex',\\n          alignItems: 'center',\\n          justifyContent: 'center',\\n        }}\\n      >\\n        <div>表格操作栏，这里适合放置一些功能按钮</div>\\n      </div>\\n      <BaseTable isStickyHead stickyTop={48} isLoading={isLoading} dataSource={dataSource} columns={testProvColumns} />\\n    </div>\\n  )\\n}\\n\\nexport function 表头props() {\\n  // 表头 props 好像也就改个样式 实用一点...\\n\\n  const { dataSource, isLoading } = useProvinceDataSource()\\n\\n  return (\\n    <BaseTable\\n      isLoading={isLoading}\\n      dataSource={dataSource.slice(0, 5)}\\n      columns={[\\n        {\\n          code: 'provinceName',\\n          name: '省份',\\n          width: 150,\\n          headerCellProps: {\\n            style: { color: 'white', fontSize: 20, background: '#1ea7fd' },\\n          },\\n        },\\n        ...cols.indCols,\\n        {\\n          code: 'updateTime',\\n          name: '最后更新时间',\\n          width: 180,\\n          render: time,\\n          headerCellProps: {\\n            style: {\\n              letterSpacing: 10,\\n              fontSize: 20,\\n              fontWeight: 'bold',\\n              textAlign: 'center',\\n            },\\n          },\\n        },\\n      ]}\\n    />\\n  )\\n}\\n\\nexport function 表格吸底_Sticky_Bottom() {\\n  const { dataSource, isLoading } = useProvinceDataSource()\\n\\n  return (\\n    <div>\\n      <BaseTable\\n        isStickyHead\\n        stickyBottom={48}\\n        isLoading={isLoading}\\n        dataSource={dataSource}\\n        columns={testProvColumns}\\n      />\\n      <div\\n        style={{\\n          position: 'sticky',\\n          bottom: 0,\\n          height: 48,\\n          border: '1px solid #ccc',\\n          zIndex: 30,\\n          background: 'white',\\n          color: '#333',\\n          display: 'flex',\\n          alignItems: 'center',\\n          justifyContent: 'center',\\n        }}\\n      >\\n        <div>表格底部操作栏，这里可以放置分页控件</div>\\n      </div>\\n      <div style={{ border: '1px solid #ccc', height: '30vh', marginTop: 32 }}>OTHER CONTENT</div>\\n    </div>\\n  )\\n}\\n\\nexport function 列分组() {\\n  const { dataSource, isLoading } = useProvinceDataSource()\\n\\n  return (\\n    <BaseTable\\n      isLoading={isLoading}\\n      dataSource={dataSource}\\n      columns={[\\n        {\\n          name: '基本信息',\\n          lock: true,\\n          children: [cols.provinceName, cols.updateTime],\\n        },\\n        {\\n          name: '指标分组',\\n          children: [\\n            { name: '指标分组1', children: [cols.confirmedCount, cols.suspectedCount] },\\n            { name: '指标分组2', children: [cols.curedCount, cols.deadCount] },\\n          ],\\n        },\\n      ]}\\n    />\\n  )\\n}\\n\\nexport function 虚拟滚动与单元格合并() {\\n  const { dataSource, isLoading } = useCityDataSource()\\n\\n  let lastTop = 0\\n  const rectMap = new Map<string, SpanRect>()\\n  dataSource.forEach((d) => {\\n    rectMap.set(d.provinceName, {\\n      left: 0,\\n      right: 1,\\n      top: lastTop,\\n      bottom: lastTop + d.children.length,\\n    })\\n    lastTop += d.children.length\\n  })\\n\\n  return (\\n    <BaseTable\\n      isLoading={isLoading}\\n      dataSource={dataSource.slice(0, 3).flatMap((d) => d.children)}\\n      useVirtual={true}\\n      columns={[\\n        {\\n          ...cols.lockProvCol,\\n          getSpanRect(value: any) {\\n            return rectMap.get(value)\\n          },\\n        },\\n        cols.lockCityCol,\\n        cols.confirmedCount,\\n        cols.suspectedCount,\\n        cols.curedCount,\\n        cols.deadCount,\\n        cols.updateTime,\\n      ]}\\n    />\\n  )\\n}\\n\\nexport function 自定义单元格样式() {\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n  const columns: ArtColumn[] = [\\n    { code: 'provinceName', name: '省份', width: 150 },\\n    {\\n      code: 'confirmedCount',\\n      name: '确诊',\\n      width: 100,\\n      render(v: number) {\\n        const danger = v > 1000\\n        const safe = v < 100\\n        return (\\n          <div\\n            style={{\\n              color: danger ? 'red' : safe ? 'green' : 'unset',\\n              fontWeight: danger || safe ? 'bold' : 'normal',\\n            }}\\n          >\\n            {amount(v)}\\n          </div>\\n        )\\n      },\\n      align: 'right',\\n    },\\n    { code: 'suspectedCount', name: '疑似', width: 100, render: amount, align: 'right' },\\n    {\\n      code: 'curedCount',\\n      name: '治愈',\\n      width: 100,\\n      render: amount,\\n      align: 'right',\\n      getCellProps(value: any, record: any) {\\n        if (record.curedCount / record.confirmedCount > 0.3) {\\n          return { style: { background: '#129835', color: 'white', fontWeight: 'bold' } }\\n        }\\n      },\\n    },\\n    {\\n      code: 'deadCount',\\n      name: '死亡',\\n      width: 100,\\n      render: amount,\\n      align: 'right',\\n      getCellProps(value: any) {\\n        const danger = value > 0\\n        if (danger) {\\n          return { style: { background: '#981c12', color: 'white', fontWeight: 'bold' } }\\n        }\\n      },\\n    },\\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\\n  ]\\n  return (\\n    <div>\\n      <h1>样式说明</h1>\\n      <p>红色字体：确诊 &gt; 1000</p>\\n      <p>绿色背景：治愈 / 确诊 &gt; 0.3</p>\\n      <p>红色背景：死亡 &gt; 0</p>\\n      <BaseTable isLoading={isLoading} dataSource={dataSource} columns={columns} />\\n    </div>\\n  )\\n}\\n\\nexport function 自定义表格行props() {\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n\\n  const [lastClickRowIndex, setLastClickRowIndex] = useState(2)\\n\\n  return (\\n    <BaseTable\\n      isLoading={isLoading}\\n      dataSource={dataSource.slice(0, 6)}\\n      columns={testProvColumns}\\n      getRowProps={(record, rowIndex) => {\\n        return {\\n          style:\\n            rowIndex === lastClickRowIndex\\n              ? {\\n                  outlineOffset: -2,\\n                  outline: '2px solid #333',\\n                  background: '#ddd',\\n                }\\n              : undefined,\\n          onClick() {\\n            setLastClickRowIndex(rowIndex)\\n          },\\n        }\\n      }}\\n    />\\n  )\\n}\\n\",\"locationsMap\":{\"基础表格-示例--基本用法\":{\"startLoc\":{\"col\":7,\"line\":31},\"endLoc\":{\"col\":1,\"line\":42},\"startBody\":{\"col\":7,\"line\":31},\"endBody\":{\"col\":1,\"line\":42}},\"基础表格-示例--自定义表格样式\":{\"startLoc\":{\"col\":7,\"line\":58},\"endLoc\":{\"col\":1,\"line\":74},\"startBody\":{\"col\":7,\"line\":58},\"endBody\":{\"col\":1,\"line\":74}},\"基础表格-示例--自定义表格样式-2\":{\"startLoc\":{\"col\":7,\"line\":76},\"endLoc\":{\"col\":1,\"line\":96},\"startBody\":{\"col\":7,\"line\":76},\"endBody\":{\"col\":1,\"line\":96}},\"基础表格-示例--props组合\":{\"startLoc\":{\"col\":7,\"line\":108},\"endLoc\":{\"col\":1,\"line\":215},\"startBody\":{\"col\":7,\"line\":108},\"endBody\":{\"col\":1,\"line\":215}},\"基础表格-示例--默认列宽\":{\"startLoc\":{\"col\":7,\"line\":217},\"endLoc\":{\"col\":1,\"line\":235},\"startBody\":{\"col\":7,\"line\":217},\"endBody\":{\"col\":1,\"line\":235}},\"基础表格-示例--左侧锁列\":{\"startLoc\":{\"col\":7,\"line\":237},\"endLoc\":{\"col\":1,\"line\":256},\"startBody\":{\"col\":7,\"line\":237},\"endBody\":{\"col\":1,\"line\":256}},\"基础表格-示例--左侧与右侧锁列\":{\"startLoc\":{\"col\":7,\"line\":258},\"endLoc\":{\"col\":1,\"line\":271},\"startBody\":{\"col\":7,\"line\":258},\"endBody\":{\"col\":1,\"line\":271}},\"基础表格-示例--表头吸顶-sticky-header\":{\"startLoc\":{\"col\":7,\"line\":273},\"endLoc\":{\"col\":1,\"line\":297},\"startBody\":{\"col\":7,\"line\":273},\"endBody\":{\"col\":1,\"line\":297}},\"基础表格-示例--表头props\":{\"startLoc\":{\"col\":7,\"line\":299},\"endLoc\":{\"col\":1,\"line\":335},\"startBody\":{\"col\":7,\"line\":299},\"endBody\":{\"col\":1,\"line\":335}},\"基础表格-示例--表格吸底-sticky-bottom\":{\"startLoc\":{\"col\":7,\"line\":337},\"endLoc\":{\"col\":1,\"line\":368},\"startBody\":{\"col\":7,\"line\":337},\"endBody\":{\"col\":1,\"line\":368}},\"基础表格-示例--列分组\":{\"startLoc\":{\"col\":7,\"line\":370},\"endLoc\":{\"col\":1,\"line\":393},\"startBody\":{\"col\":7,\"line\":370},\"endBody\":{\"col\":1,\"line\":393}},\"基础表格-示例--虚拟滚动与单元格合并\":{\"startLoc\":{\"col\":7,\"line\":395},\"endLoc\":{\"col\":1,\"line\":431},\"startBody\":{\"col\":7,\"line\":395},\"endBody\":{\"col\":1,\"line\":431}},\"基础表格-示例--自定义单元格样式\":{\"startLoc\":{\"col\":7,\"line\":433},\"endLoc\":{\"col\":1,\"line\":494},\"startBody\":{\"col\":7,\"line\":433},\"endBody\":{\"col\":1,\"line\":494}},\"基础表格-示例--自定义表格行props\":{\"startLoc\":{\"col\":7,\"line\":496},\"endLoc\":{\"col\":1,\"line\":523},\"startBody\":{\"col\":7,\"line\":496},\"endBody\":{\"col\":1,\"line\":523}}}},\n    docs: {\n      page() {\n        return (\n          <div\n            style={{\n              margin: 'auto',\n              background: 'rgba(0, 0, 0, 0.03)',\n              borderRadius: 10,\n              padding: 30,\n            }}\n          >\n            示例过多，docs page 已在此处禁用，请在页面上方切换到「Canvas」模式\n          </div>\n        )\n      },\n    },\n  },\n}\n\nexport const 基本用法 = function 基本用法() {\n  const { isLoading, dataSource } = useProvinceDataSource()\n  const columns: ArtColumn[] = [\n    { code: 'provinceName', name: '省份', width: 150 },\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right' },\n    { code: 'suspectedCount', name: '疑似', width: 100, render: amount, align: 'right' },\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right' },\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right' },\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\n  ]\n  return <BaseTable isLoading={isLoading} dataSource={dataSource.slice(0, 5)} columns={columns} />\n};\n\nconst ZebraBaseTable = styled(BaseTable)`\n  --row-hover-color: none;\n\n  .${Classes.tableRow} {\n    &.even {\n      background: #f2f2f2;\n    }\n\n    &.odd {\n      background: white;\n    }\n  }\n`\n\nexport const 自定义表格样式 = function 自定义表格样式() {\n  const { isLoading, dataSource } = useProvinceDataSource()\n  return (\n    <BaseTable\n      style={{\n        '--cell-border-horizontal': '1px solid #f0f0f0',\n        '--cell-border-vertical': 'none',\n        '--header-bgcolor': '#fafafa',\n        '--header-cell-border': 'none',\n        '--header-row-height': '40px',\n      }}\n      isLoading={isLoading}\n      dataSource={dataSource.slice(0, 6)}\n      columns={testProvColumns}\n    />\n  )\n};\n\nexport const 自定义表格样式2 = function 自定义表格样式2() {\n  /*\n  import styled from 'styled-components'\n  import { BaseTable, Classes } from 'ali-react-table'\n\n  const ZebraBaseTable = styled(BaseTable)`\n     --row-hover-color: none;\n\n    .${Classes.tableRow} {\n      &.even {\n        background: #f2f2f2;\n      }\n\n      &.odd {\n        background: white;\n      }\n    }`\n   */\n  const { isLoading, dataSource } = useProvinceDataSource()\n  return <ZebraBaseTable isLoading={isLoading} dataSource={dataSource.slice(0, 10)} columns={testProvColumns} />\n};\n\nconst Row = styled.div`\n  height: 36px;\n  display: flex;\n  align-items: center;\n\n  > span {\n    width: 100px;\n  }\n`\n\nexport const Props组合 = function Props组合() {\n  const [config, setConfig] = useState({\n    hasHeader: true,\n    isLoading: false,\n    useOuterBorder: false,\n    dataSize: 10,\n    height: 'auto' as 'auto' | number,\n  })\n\n  const { isLoading, dataSource } = useProvinceDataSource()\n\n  return (\n    <div>\n      <FusionStyles />\n      <div style={{ lineHeight: 1.5 }}>\n        hasHeader 表示表头是否展示；\n        <br />\n        isLoading 表示表格数据是否在加载中；\n        <br />\n        useOuterBorder 表示是否使用表格最外层的 div 的边框来代替单元格的外边框\n      </div>\n      <Row>\n        <Checkbox\n          checked={config.hasHeader}\n          onChange={(v) => {\n            setConfig({ ...config, hasHeader: v })\n          }}\n        >\n          hasHeader\n        </Checkbox>\n        <Checkbox\n          style={{ marginLeft: 32 }}\n          checked={config.isLoading}\n          onChange={(v) => {\n            setConfig({ ...config, isLoading: v })\n          }}\n        >\n          isLoading\n        </Checkbox>\n        <Checkbox\n          style={{ marginLeft: 32 }}\n          checked={config.useOuterBorder}\n          onChange={(v) => {\n            setConfig({ ...config, useOuterBorder: v })\n          }}\n        >\n          useOuterBorder\n        </Checkbox>\n      </Row>\n\n      <Row>\n        <span>data size:</span>\n        <Button.Group>\n          {[0, 3, 10].map((size) => (\n            <Button\n              key={size}\n              type={config.dataSize === size ? 'primary' : 'normal'}\n              onClick={() => {\n                setConfig({ ...config, dataSize: size })\n              }}\n            >\n              {size}\n            </Button>\n          ))}\n          <Button\n            type={isFinite(config.dataSize) ? 'normal' : 'primary'}\n            onClick={() => {\n              setConfig({ ...config, dataSize: Infinity })\n            }}\n          >\n            不限\n          </Button>\n        </Button.Group>\n      </Row>\n      <Row>\n        <span>table height:</span>\n        <Button.Group>\n          {['auto', 200, 400, 600].map((h) => (\n            <Button\n              key={h}\n              type={config.height === h ? 'primary' : 'normal'}\n              onClick={() => {\n                setConfig({ ...config, height: h as any })\n              }}\n            >\n              {h}\n            </Button>\n          ))}\n        </Button.Group>\n      </Row>\n      <p style={{ color: '#353640' }}>\n        tips: 为表格设置具体的高度之后记得添加 style.overflow=auto，不然高度仍然会被内容撑开.\n      </p>\n      <BaseTable\n        hasHeader={config.hasHeader}\n        isLoading={isLoading || config.isLoading}\n        useOuterBorder={config.useOuterBorder}\n        style={{\n          height: config.height,\n          overflow: config.height === 'auto' ? 'visible' : 'auto',\n          marginTop: 16,\n        }}\n        dataSource={dataSource.slice(0, config.dataSize)}\n        columns={testProvColumns}\n      />\n    </div>\n  )\n};\n\nexport const 默认列宽 = function 默认列宽() {\n  const { isLoading, dataSource } = useProvinceDataSource()\n  const columns: ArtColumn[] = [\n    { code: 'provinceName', name: '省份' },\n    { code: 'confirmedCount', name: '确诊', render: amount, align: 'right' },\n    { code: 'suspectedCount', name: '疑似', render: amount, align: 'right' },\n    { code: 'curedCount', name: '治愈', render: amount, align: 'right' },\n    { code: 'deadCount', name: '死亡', render: amount, align: 'right' },\n    { code: 'updateTime', name: '最后更新时间', render: time },\n  ]\n  return (\n    <BaseTable\n      defaultColumnWidth={200}\n      isLoading={isLoading}\n      dataSource={dataSource.slice(0, 5)}\n      columns={[...columns, ...columns]}\n    />\n  )\n};\n\nexport const 左侧锁列 = function 左侧锁列() {\n  const { dataSource, isLoading } = useProvinceDataSource()\n\n  return (\n    <BaseTable\n      style={{ width: 500, height: 300, overflow: 'auto' }}\n      useOuterBorder\n      isLoading={isLoading}\n      dataSource={dataSource}\n      columns={[\n        { lock: true, code: 'provinceName', name: '省份', width: 150 },\n        { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right' },\n        { code: 'suspectedCount', name: '疑似', width: 100, render: amount, align: 'right' },\n        { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right' },\n        { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right' },\n        { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\n      ]}\n    />\n  )\n};\n\nexport const 左侧与右侧锁列 = function 左侧与右侧锁列() {\n  const { dataSource, isLoading } = useCityDataSource()\n\n  // 注意为表格设置 style.overflow = 'auto' 之后，必须同时设置 style.height 或 style.maxHeight\n  return (\n    <BaseTable\n      style={{ width: 600, height: 400, overflow: 'auto' }}\n      isLoading={isLoading}\n      useOuterBorder\n      dataSource={dataSource.flatMap((d) => d.children)}\n      columns={[cols.lockProvCol, cols.cityName, ...cols.indCols, cols.lockTimeCol]}\n    />\n  )\n};\n\nexport const 表头吸顶_Sticky_Header = function 表头吸顶_Sticky_Header() {\n  const { dataSource, isLoading } = useProvinceDataSource()\n\n  return (\n    <div>\n      <div\n        style={{\n          position: 'sticky',\n          top: 0,\n          height: 48,\n          border: '1px solid #ccc',\n          zIndex: 30,\n          background: 'white',\n          color: '#333',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <div>表格操作栏，这里适合放置一些功能按钮</div>\n      </div>\n      <BaseTable isStickyHead stickyTop={48} isLoading={isLoading} dataSource={dataSource} columns={testProvColumns} />\n    </div>\n  )\n};\n\nexport const 表头props = function 表头props() {\n  // 表头 props 好像也就改个样式 实用一点...\n\n  const { dataSource, isLoading } = useProvinceDataSource()\n\n  return (\n    <BaseTable\n      isLoading={isLoading}\n      dataSource={dataSource.slice(0, 5)}\n      columns={[\n        {\n          code: 'provinceName',\n          name: '省份',\n          width: 150,\n          headerCellProps: {\n            style: { color: 'white', fontSize: 20, background: '#1ea7fd' },\n          },\n        },\n        ...cols.indCols,\n        {\n          code: 'updateTime',\n          name: '最后更新时间',\n          width: 180,\n          render: time,\n          headerCellProps: {\n            style: {\n              letterSpacing: 10,\n              fontSize: 20,\n              fontWeight: 'bold',\n              textAlign: 'center',\n            },\n          },\n        },\n      ]}\n    />\n  )\n};\n\nexport const 表格吸底_Sticky_Bottom = function 表格吸底_Sticky_Bottom() {\n  const { dataSource, isLoading } = useProvinceDataSource()\n\n  return (\n    <div>\n      <BaseTable\n        isStickyHead\n        stickyBottom={48}\n        isLoading={isLoading}\n        dataSource={dataSource}\n        columns={testProvColumns}\n      />\n      <div\n        style={{\n          position: 'sticky',\n          bottom: 0,\n          height: 48,\n          border: '1px solid #ccc',\n          zIndex: 30,\n          background: 'white',\n          color: '#333',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <div>表格底部操作栏，这里可以放置分页控件</div>\n      </div>\n      <div style={{ border: '1px solid #ccc', height: '30vh', marginTop: 32 }}>OTHER CONTENT</div>\n    </div>\n  )\n};\n\nexport const 列分组 = function 列分组() {\n  const { dataSource, isLoading } = useProvinceDataSource()\n\n  return (\n    <BaseTable\n      isLoading={isLoading}\n      dataSource={dataSource}\n      columns={[\n        {\n          name: '基本信息',\n          lock: true,\n          children: [cols.provinceName, cols.updateTime],\n        },\n        {\n          name: '指标分组',\n          children: [\n            { name: '指标分组1', children: [cols.confirmedCount, cols.suspectedCount] },\n            { name: '指标分组2', children: [cols.curedCount, cols.deadCount] },\n          ],\n        },\n      ]}\n    />\n  )\n};\n\nexport const 虚拟滚动与单元格合并 = function 虚拟滚动与单元格合并() {\n  const { dataSource, isLoading } = useCityDataSource()\n\n  let lastTop = 0\n  const rectMap = new Map<string, SpanRect>()\n  dataSource.forEach((d) => {\n    rectMap.set(d.provinceName, {\n      left: 0,\n      right: 1,\n      top: lastTop,\n      bottom: lastTop + d.children.length,\n    })\n    lastTop += d.children.length\n  })\n\n  return (\n    <BaseTable\n      isLoading={isLoading}\n      dataSource={dataSource.slice(0, 3).flatMap((d) => d.children)}\n      useVirtual={true}\n      columns={[\n        {\n          ...cols.lockProvCol,\n          getSpanRect(value: any) {\n            return rectMap.get(value)\n          },\n        },\n        cols.lockCityCol,\n        cols.confirmedCount,\n        cols.suspectedCount,\n        cols.curedCount,\n        cols.deadCount,\n        cols.updateTime,\n      ]}\n    />\n  )\n};\n\nexport const 自定义单元格样式 = function 自定义单元格样式() {\n  const { isLoading, dataSource } = useProvinceDataSource()\n  const columns: ArtColumn[] = [\n    { code: 'provinceName', name: '省份', width: 150 },\n    {\n      code: 'confirmedCount',\n      name: '确诊',\n      width: 100,\n      render(v: number) {\n        const danger = v > 1000\n        const safe = v < 100\n        return (\n          <div\n            style={{\n              color: danger ? 'red' : safe ? 'green' : 'unset',\n              fontWeight: danger || safe ? 'bold' : 'normal',\n            }}\n          >\n            {amount(v)}\n          </div>\n        )\n      },\n      align: 'right',\n    },\n    { code: 'suspectedCount', name: '疑似', width: 100, render: amount, align: 'right' },\n    {\n      code: 'curedCount',\n      name: '治愈',\n      width: 100,\n      render: amount,\n      align: 'right',\n      getCellProps(value: any, record: any) {\n        if (record.curedCount / record.confirmedCount > 0.3) {\n          return { style: { background: '#129835', color: 'white', fontWeight: 'bold' } }\n        }\n      },\n    },\n    {\n      code: 'deadCount',\n      name: '死亡',\n      width: 100,\n      render: amount,\n      align: 'right',\n      getCellProps(value: any) {\n        const danger = value > 0\n        if (danger) {\n          return { style: { background: '#981c12', color: 'white', fontWeight: 'bold' } }\n        }\n      },\n    },\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\n  ]\n  return (\n    <div>\n      <h1>样式说明</h1>\n      <p>红色字体：确诊 &gt; 1000</p>\n      <p>绿色背景：治愈 / 确诊 &gt; 0.3</p>\n      <p>红色背景：死亡 &gt; 0</p>\n      <BaseTable isLoading={isLoading} dataSource={dataSource} columns={columns} />\n    </div>\n  )\n};\n\nexport const 自定义表格行props = function 自定义表格行props() {\n  const { isLoading, dataSource } = useProvinceDataSource()\n\n  const [lastClickRowIndex, setLastClickRowIndex] = useState(2)\n\n  return (\n    <BaseTable\n      isLoading={isLoading}\n      dataSource={dataSource.slice(0, 6)}\n      columns={testProvColumns}\n      getRowProps={(record, rowIndex) => {\n        return {\n          style:\n            rowIndex === lastClickRowIndex\n              ? {\n                  outlineOffset: -2,\n                  outline: '2px solid #333',\n                  background: '#ddd',\n                }\n              : undefined,\n          onClick() {\n            setLastClickRowIndex(rowIndex)\n          },\n        }\n      }}\n    />\n  )\n};",locationsMap:{"基础表格-示例--基本用法":{startLoc:{col:20,line:39},endLoc:{col:1,line:50},startBody:{col:20,line:39},endBody:{col:1,line:50}},"基础表格-示例--自定义表格样式":{startLoc:{col:23,line:66},endLoc:{col:1,line:82},startBody:{col:23,line:66},endBody:{col:1,line:82}},"基础表格-示例--自定义表格样式-2":{startLoc:{col:24,line:84},endLoc:{col:1,line:104},startBody:{col:24,line:84},endBody:{col:1,line:104}},"基础表格-示例--props组合":{startLoc:{col:23,line:116},endLoc:{col:1,line:223},startBody:{col:23,line:116},endBody:{col:1,line:223}},"基础表格-示例--默认列宽":{startLoc:{col:20,line:225},endLoc:{col:1,line:243},startBody:{col:20,line:225},endBody:{col:1,line:243}},"基础表格-示例--左侧锁列":{startLoc:{col:20,line:245},endLoc:{col:1,line:264},startBody:{col:20,line:245},endBody:{col:1,line:264}},"基础表格-示例--左侧与右侧锁列":{startLoc:{col:23,line:266},endLoc:{col:1,line:279},startBody:{col:23,line:266},endBody:{col:1,line:279}},"基础表格-示例--表头吸顶-sticky-header":{startLoc:{col:34,line:281},endLoc:{col:1,line:305},startBody:{col:34,line:281},endBody:{col:1,line:305}},"基础表格-示例--表头props":{startLoc:{col:23,line:307},endLoc:{col:1,line:343},startBody:{col:23,line:307},endBody:{col:1,line:343}},"基础表格-示例--表格吸底-sticky-bottom":{startLoc:{col:34,line:345},endLoc:{col:1,line:376},startBody:{col:34,line:345},endBody:{col:1,line:376}},"基础表格-示例--列分组":{startLoc:{col:19,line:378},endLoc:{col:1,line:401},startBody:{col:19,line:378},endBody:{col:1,line:401}},"基础表格-示例--虚拟滚动与单元格合并":{startLoc:{col:26,line:403},endLoc:{col:1,line:439},startBody:{col:26,line:403},endBody:{col:1,line:439}},"基础表格-示例--自定义单元格样式":{startLoc:{col:24,line:441},endLoc:{col:1,line:502},startBody:{col:24,line:441},endBody:{col:1,line:502}},"基础表格-示例--自定义表格行props":{startLoc:{col:27,line:504},endLoc:{col:1,line:531},startBody:{col:27,line:504},endBody:{col:1,line:531}}}},storySource:{source:"import { Button, Checkbox } from '@alifd/next'\nimport { ArtColumn, BaseTable, Classes, SpanRect } from 'ali-react-table'\nimport React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { amount, time } from '../assets/format'\nimport { FusionStyles } from '../assets/fusion-style'\nimport { cols, testProvColumns, useCityDataSource, useProvinceDataSource } from '../assets/ncov19-assets'\n\nexport default {\n  title: '基础表格 / 示例',\n  parameters: {\n    docs: {\n      page() {\n        return (\n          <div\n            style={{\n              margin: 'auto',\n              background: 'rgba(0, 0, 0, 0.03)',\n              borderRadius: 10,\n              padding: 30,\n            }}\n          >\n            示例过多，docs page 已在此处禁用，请在页面上方切换到「Canvas」模式\n          </div>\n        )\n      },\n    },\n  },\n}\n\nexport function 基本用法() {\n  const { isLoading, dataSource } = useProvinceDataSource()\n  const columns: ArtColumn[] = [\n    { code: 'provinceName', name: '省份', width: 150 },\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right' },\n    { code: 'suspectedCount', name: '疑似', width: 100, render: amount, align: 'right' },\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right' },\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right' },\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\n  ]\n  return <BaseTable isLoading={isLoading} dataSource={dataSource.slice(0, 5)} columns={columns} />\n}\n\nconst ZebraBaseTable = styled(BaseTable)`\n  --row-hover-color: none;\n\n  .${Classes.tableRow} {\n    &.even {\n      background: #f2f2f2;\n    }\n\n    &.odd {\n      background: white;\n    }\n  }\n`\n\nexport function 自定义表格样式() {\n  const { isLoading, dataSource } = useProvinceDataSource()\n  return (\n    <BaseTable\n      style={{\n        '--cell-border-horizontal': '1px solid #f0f0f0',\n        '--cell-border-vertical': 'none',\n        '--header-bgcolor': '#fafafa',\n        '--header-cell-border': 'none',\n        '--header-row-height': '40px',\n      }}\n      isLoading={isLoading}\n      dataSource={dataSource.slice(0, 6)}\n      columns={testProvColumns}\n    />\n  )\n}\n\nexport function 自定义表格样式2() {\n  /*\n  import styled from 'styled-components'\n  import { BaseTable, Classes } from 'ali-react-table'\n\n  const ZebraBaseTable = styled(BaseTable)`\n     --row-hover-color: none;\n\n    .${Classes.tableRow} {\n      &.even {\n        background: #f2f2f2;\n      }\n\n      &.odd {\n        background: white;\n      }\n    }`\n   */\n  const { isLoading, dataSource } = useProvinceDataSource()\n  return <ZebraBaseTable isLoading={isLoading} dataSource={dataSource.slice(0, 10)} columns={testProvColumns} />\n}\n\nconst Row = styled.div`\n  height: 36px;\n  display: flex;\n  align-items: center;\n\n  > span {\n    width: 100px;\n  }\n`\n\nexport function Props组合() {\n  const [config, setConfig] = useState({\n    hasHeader: true,\n    isLoading: false,\n    useOuterBorder: false,\n    dataSize: 10,\n    height: 'auto' as 'auto' | number,\n  })\n\n  const { isLoading, dataSource } = useProvinceDataSource()\n\n  return (\n    <div>\n      <FusionStyles />\n      <div style={{ lineHeight: 1.5 }}>\n        hasHeader 表示表头是否展示；\n        <br />\n        isLoading 表示表格数据是否在加载中；\n        <br />\n        useOuterBorder 表示是否使用表格最外层的 div 的边框来代替单元格的外边框\n      </div>\n      <Row>\n        <Checkbox\n          checked={config.hasHeader}\n          onChange={(v) => {\n            setConfig({ ...config, hasHeader: v })\n          }}\n        >\n          hasHeader\n        </Checkbox>\n        <Checkbox\n          style={{ marginLeft: 32 }}\n          checked={config.isLoading}\n          onChange={(v) => {\n            setConfig({ ...config, isLoading: v })\n          }}\n        >\n          isLoading\n        </Checkbox>\n        <Checkbox\n          style={{ marginLeft: 32 }}\n          checked={config.useOuterBorder}\n          onChange={(v) => {\n            setConfig({ ...config, useOuterBorder: v })\n          }}\n        >\n          useOuterBorder\n        </Checkbox>\n      </Row>\n\n      <Row>\n        <span>data size:</span>\n        <Button.Group>\n          {[0, 3, 10].map((size) => (\n            <Button\n              key={size}\n              type={config.dataSize === size ? 'primary' : 'normal'}\n              onClick={() => {\n                setConfig({ ...config, dataSize: size })\n              }}\n            >\n              {size}\n            </Button>\n          ))}\n          <Button\n            type={isFinite(config.dataSize) ? 'normal' : 'primary'}\n            onClick={() => {\n              setConfig({ ...config, dataSize: Infinity })\n            }}\n          >\n            不限\n          </Button>\n        </Button.Group>\n      </Row>\n      <Row>\n        <span>table height:</span>\n        <Button.Group>\n          {['auto', 200, 400, 600].map((h) => (\n            <Button\n              key={h}\n              type={config.height === h ? 'primary' : 'normal'}\n              onClick={() => {\n                setConfig({ ...config, height: h as any })\n              }}\n            >\n              {h}\n            </Button>\n          ))}\n        </Button.Group>\n      </Row>\n      <p style={{ color: '#353640' }}>\n        tips: 为表格设置具体的高度之后记得添加 style.overflow=auto，不然高度仍然会被内容撑开.\n      </p>\n      <BaseTable\n        hasHeader={config.hasHeader}\n        isLoading={isLoading || config.isLoading}\n        useOuterBorder={config.useOuterBorder}\n        style={{\n          height: config.height,\n          overflow: config.height === 'auto' ? 'visible' : 'auto',\n          marginTop: 16,\n        }}\n        dataSource={dataSource.slice(0, config.dataSize)}\n        columns={testProvColumns}\n      />\n    </div>\n  )\n}\n\nexport function 默认列宽() {\n  const { isLoading, dataSource } = useProvinceDataSource()\n  const columns: ArtColumn[] = [\n    { code: 'provinceName', name: '省份' },\n    { code: 'confirmedCount', name: '确诊', render: amount, align: 'right' },\n    { code: 'suspectedCount', name: '疑似', render: amount, align: 'right' },\n    { code: 'curedCount', name: '治愈', render: amount, align: 'right' },\n    { code: 'deadCount', name: '死亡', render: amount, align: 'right' },\n    { code: 'updateTime', name: '最后更新时间', render: time },\n  ]\n  return (\n    <BaseTable\n      defaultColumnWidth={200}\n      isLoading={isLoading}\n      dataSource={dataSource.slice(0, 5)}\n      columns={[...columns, ...columns]}\n    />\n  )\n}\n\nexport function 左侧锁列() {\n  const { dataSource, isLoading } = useProvinceDataSource()\n\n  return (\n    <BaseTable\n      style={{ width: 500, height: 300, overflow: 'auto' }}\n      useOuterBorder\n      isLoading={isLoading}\n      dataSource={dataSource}\n      columns={[\n        { lock: true, code: 'provinceName', name: '省份', width: 150 },\n        { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right' },\n        { code: 'suspectedCount', name: '疑似', width: 100, render: amount, align: 'right' },\n        { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right' },\n        { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right' },\n        { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\n      ]}\n    />\n  )\n}\n\nexport function 左侧与右侧锁列() {\n  const { dataSource, isLoading } = useCityDataSource()\n\n  // 注意为表格设置 style.overflow = 'auto' 之后，必须同时设置 style.height 或 style.maxHeight\n  return (\n    <BaseTable\n      style={{ width: 600, height: 400, overflow: 'auto' }}\n      isLoading={isLoading}\n      useOuterBorder\n      dataSource={dataSource.flatMap((d) => d.children)}\n      columns={[cols.lockProvCol, cols.cityName, ...cols.indCols, cols.lockTimeCol]}\n    />\n  )\n}\n\nexport function 表头吸顶_Sticky_Header() {\n  const { dataSource, isLoading } = useProvinceDataSource()\n\n  return (\n    <div>\n      <div\n        style={{\n          position: 'sticky',\n          top: 0,\n          height: 48,\n          border: '1px solid #ccc',\n          zIndex: 30,\n          background: 'white',\n          color: '#333',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <div>表格操作栏，这里适合放置一些功能按钮</div>\n      </div>\n      <BaseTable isStickyHead stickyTop={48} isLoading={isLoading} dataSource={dataSource} columns={testProvColumns} />\n    </div>\n  )\n}\n\nexport function 表头props() {\n  // 表头 props 好像也就改个样式 实用一点...\n\n  const { dataSource, isLoading } = useProvinceDataSource()\n\n  return (\n    <BaseTable\n      isLoading={isLoading}\n      dataSource={dataSource.slice(0, 5)}\n      columns={[\n        {\n          code: 'provinceName',\n          name: '省份',\n          width: 150,\n          headerCellProps: {\n            style: { color: 'white', fontSize: 20, background: '#1ea7fd' },\n          },\n        },\n        ...cols.indCols,\n        {\n          code: 'updateTime',\n          name: '最后更新时间',\n          width: 180,\n          render: time,\n          headerCellProps: {\n            style: {\n              letterSpacing: 10,\n              fontSize: 20,\n              fontWeight: 'bold',\n              textAlign: 'center',\n            },\n          },\n        },\n      ]}\n    />\n  )\n}\n\nexport function 表格吸底_Sticky_Bottom() {\n  const { dataSource, isLoading } = useProvinceDataSource()\n\n  return (\n    <div>\n      <BaseTable\n        isStickyHead\n        stickyBottom={48}\n        isLoading={isLoading}\n        dataSource={dataSource}\n        columns={testProvColumns}\n      />\n      <div\n        style={{\n          position: 'sticky',\n          bottom: 0,\n          height: 48,\n          border: '1px solid #ccc',\n          zIndex: 30,\n          background: 'white',\n          color: '#333',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <div>表格底部操作栏，这里可以放置分页控件</div>\n      </div>\n      <div style={{ border: '1px solid #ccc', height: '30vh', marginTop: 32 }}>OTHER CONTENT</div>\n    </div>\n  )\n}\n\nexport function 列分组() {\n  const { dataSource, isLoading } = useProvinceDataSource()\n\n  return (\n    <BaseTable\n      isLoading={isLoading}\n      dataSource={dataSource}\n      columns={[\n        {\n          name: '基本信息',\n          lock: true,\n          children: [cols.provinceName, cols.updateTime],\n        },\n        {\n          name: '指标分组',\n          children: [\n            { name: '指标分组1', children: [cols.confirmedCount, cols.suspectedCount] },\n            { name: '指标分组2', children: [cols.curedCount, cols.deadCount] },\n          ],\n        },\n      ]}\n    />\n  )\n}\n\nexport function 虚拟滚动与单元格合并() {\n  const { dataSource, isLoading } = useCityDataSource()\n\n  let lastTop = 0\n  const rectMap = new Map<string, SpanRect>()\n  dataSource.forEach((d) => {\n    rectMap.set(d.provinceName, {\n      left: 0,\n      right: 1,\n      top: lastTop,\n      bottom: lastTop + d.children.length,\n    })\n    lastTop += d.children.length\n  })\n\n  return (\n    <BaseTable\n      isLoading={isLoading}\n      dataSource={dataSource.slice(0, 3).flatMap((d) => d.children)}\n      useVirtual={true}\n      columns={[\n        {\n          ...cols.lockProvCol,\n          getSpanRect(value: any) {\n            return rectMap.get(value)\n          },\n        },\n        cols.lockCityCol,\n        cols.confirmedCount,\n        cols.suspectedCount,\n        cols.curedCount,\n        cols.deadCount,\n        cols.updateTime,\n      ]}\n    />\n  )\n}\n\nexport function 自定义单元格样式() {\n  const { isLoading, dataSource } = useProvinceDataSource()\n  const columns: ArtColumn[] = [\n    { code: 'provinceName', name: '省份', width: 150 },\n    {\n      code: 'confirmedCount',\n      name: '确诊',\n      width: 100,\n      render(v: number) {\n        const danger = v > 1000\n        const safe = v < 100\n        return (\n          <div\n            style={{\n              color: danger ? 'red' : safe ? 'green' : 'unset',\n              fontWeight: danger || safe ? 'bold' : 'normal',\n            }}\n          >\n            {amount(v)}\n          </div>\n        )\n      },\n      align: 'right',\n    },\n    { code: 'suspectedCount', name: '疑似', width: 100, render: amount, align: 'right' },\n    {\n      code: 'curedCount',\n      name: '治愈',\n      width: 100,\n      render: amount,\n      align: 'right',\n      getCellProps(value: any, record: any) {\n        if (record.curedCount / record.confirmedCount > 0.3) {\n          return { style: { background: '#129835', color: 'white', fontWeight: 'bold' } }\n        }\n      },\n    },\n    {\n      code: 'deadCount',\n      name: '死亡',\n      width: 100,\n      render: amount,\n      align: 'right',\n      getCellProps(value: any) {\n        const danger = value > 0\n        if (danger) {\n          return { style: { background: '#981c12', color: 'white', fontWeight: 'bold' } }\n        }\n      },\n    },\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\n  ]\n  return (\n    <div>\n      <h1>样式说明</h1>\n      <p>红色字体：确诊 &gt; 1000</p>\n      <p>绿色背景：治愈 / 确诊 &gt; 0.3</p>\n      <p>红色背景：死亡 &gt; 0</p>\n      <BaseTable isLoading={isLoading} dataSource={dataSource} columns={columns} />\n    </div>\n  )\n}\n\nexport function 自定义表格行props() {\n  const { isLoading, dataSource } = useProvinceDataSource()\n\n  const [lastClickRowIndex, setLastClickRowIndex] = useState(2)\n\n  return (\n    <BaseTable\n      isLoading={isLoading}\n      dataSource={dataSource.slice(0, 6)}\n      columns={testProvColumns}\n      getRowProps={(record, rowIndex) => {\n        return {\n          style:\n            rowIndex === lastClickRowIndex\n              ? {\n                  outlineOffset: -2,\n                  outline: '2px solid #333',\n                  background: '#ddd',\n                }\n              : undefined,\n          onClick() {\n            setLastClickRowIndex(rowIndex)\n          },\n        }\n      }}\n    />\n  )\n}\n",locationsMap:{"基础表格-示例--基本用法":{startLoc:{col:7,line:31},endLoc:{col:1,line:42},startBody:{col:7,line:31},endBody:{col:1,line:42}},"基础表格-示例--自定义表格样式":{startLoc:{col:7,line:58},endLoc:{col:1,line:74},startBody:{col:7,line:58},endBody:{col:1,line:74}},"基础表格-示例--自定义表格样式-2":{startLoc:{col:7,line:76},endLoc:{col:1,line:96},startBody:{col:7,line:76},endBody:{col:1,line:96}},"基础表格-示例--props组合":{startLoc:{col:7,line:108},endLoc:{col:1,line:215},startBody:{col:7,line:108},endBody:{col:1,line:215}},"基础表格-示例--默认列宽":{startLoc:{col:7,line:217},endLoc:{col:1,line:235},startBody:{col:7,line:217},endBody:{col:1,line:235}},"基础表格-示例--左侧锁列":{startLoc:{col:7,line:237},endLoc:{col:1,line:256},startBody:{col:7,line:237},endBody:{col:1,line:256}},"基础表格-示例--左侧与右侧锁列":{startLoc:{col:7,line:258},endLoc:{col:1,line:271},startBody:{col:7,line:258},endBody:{col:1,line:271}},"基础表格-示例--表头吸顶-sticky-header":{startLoc:{col:7,line:273},endLoc:{col:1,line:297},startBody:{col:7,line:273},endBody:{col:1,line:297}},"基础表格-示例--表头props":{startLoc:{col:7,line:299},endLoc:{col:1,line:335},startBody:{col:7,line:299},endBody:{col:1,line:335}},"基础表格-示例--表格吸底-sticky-bottom":{startLoc:{col:7,line:337},endLoc:{col:1,line:368},startBody:{col:7,line:337},endBody:{col:1,line:368}},"基础表格-示例--列分组":{startLoc:{col:7,line:370},endLoc:{col:1,line:393},startBody:{col:7,line:370},endBody:{col:1,line:393}},"基础表格-示例--虚拟滚动与单元格合并":{startLoc:{col:7,line:395},endLoc:{col:1,line:431},startBody:{col:7,line:395},endBody:{col:1,line:431}},"基础表格-示例--自定义单元格样式":{startLoc:{col:7,line:433},endLoc:{col:1,line:494},startBody:{col:7,line:433},endBody:{col:1,line:494}},"基础表格-示例--自定义表格行props":{startLoc:{col:7,line:496},endLoc:{col:1,line:523},startBody:{col:7,line:496},endBody:{col:1,line:523}}}},docs:{page:()=>react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",{style:{margin:"auto",background:"rgba(0, 0, 0, 0.03)",borderRadius:10,padding:30}},"示例过多，docs page 已在此处禁用，请在页面上方切换到「Canvas」模式")}}};const 基本用法=function 基本用法(){const{isLoading:isLoading,dataSource:dataSource}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.e)(),columns=[{code:"provinceName",name:"省份",width:150},{code:"confirmedCount",name:"确诊",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.a,align:"right"},{code:"suspectedCount",name:"疑似",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.a,align:"right"},{code:"curedCount",name:"治愈",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.a,align:"right"},{code:"deadCount",name:"死亡",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.a,align:"right"},{code:"updateTime",name:"最后更新时间",width:180,render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.d}];return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_2__.a,{isLoading:isLoading,dataSource:dataSource.slice(0,5),columns:columns})},ZebraBaseTable=Object(styled_components__WEBPACK_IMPORTED_MODULE_5__.b)(ali_react_table__WEBPACK_IMPORTED_MODULE_2__.a)`
  --row-hover-color: none;

  .${ali_react_table__WEBPACK_IMPORTED_MODULE_3__.a.tableRow} {
    &.even {
      background: #f2f2f2;
    }

    &.odd {
      background: white;
    }
  }
`,自定义表格样式=function 自定义表格样式(){const{isLoading:isLoading,dataSource:dataSource}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.e)();return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_2__.a,{style:{"--cell-border-horizontal":"1px solid #f0f0f0","--cell-border-vertical":"none","--header-bgcolor":"#fafafa","--header-cell-border":"none","--header-row-height":"40px"},isLoading:isLoading,dataSource:dataSource.slice(0,6),columns:_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.b})},自定义表格样式2=function 自定义表格样式2(){const{isLoading:isLoading,dataSource:dataSource}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.e)();return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(ZebraBaseTable,{isLoading:isLoading,dataSource:dataSource.slice(0,10),columns:_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.b})},Row=styled_components__WEBPACK_IMPORTED_MODULE_5__.b.div`
  height: 36px;
  display: flex;
  align-items: center;

  > span {
    width: 100px;
  }
`,Props组合=function Props组合(){const[config,setConfig]=Object(react__WEBPACK_IMPORTED_MODULE_4__.useState)({hasHeader:!0,isLoading:!1,useOuterBorder:!1,dataSize:10,height:"auto"}),{isLoading:isLoading,dataSource:dataSource}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.e)();return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(_assets_fusion_style__WEBPACK_IMPORTED_MODULE_7__.a,null),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",{style:{lineHeight:1.5}},"hasHeader 表示表头是否展示；",react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("br",null),"isLoading 表示表格数据是否在加载中；",react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("br",null),"useOuterBorder 表示是否使用表格最外层的 div 的边框来代替单元格的外边框"),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(Row,null,react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_0__.a,{checked:config.hasHeader,onChange:v=>{setConfig({...config,hasHeader:v})}},"hasHeader"),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_0__.a,{style:{marginLeft:32},checked:config.isLoading,onChange:v=>{setConfig({...config,isLoading:v})}},"isLoading"),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_0__.a,{style:{marginLeft:32},checked:config.useOuterBorder,onChange:v=>{setConfig({...config,useOuterBorder:v})}},"useOuterBorder")),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(Row,null,react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("span",null,"data size:"),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_1__.a.Group,null,[0,3,10].map(size=>react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_1__.a,{key:size,type:config.dataSize===size?"primary":"normal",onClick:()=>{setConfig({...config,dataSize:size})}},size)),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_1__.a,{type:isFinite(config.dataSize)?"normal":"primary",onClick:()=>{setConfig({...config,dataSize:1/0})}},"不限"))),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(Row,null,react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("span",null,"table height:"),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_1__.a.Group,null,["auto",200,400,600].map(h=>react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_1__.a,{key:h,type:config.height===h?"primary":"normal",onClick:()=>{setConfig({...config,height:h})}},h)))),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("p",{style:{color:"#353640"}},"tips: 为表格设置具体的高度之后记得添加 style.overflow=auto，不然高度仍然会被内容撑开."),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_2__.a,{hasHeader:config.hasHeader,isLoading:isLoading||config.isLoading,useOuterBorder:config.useOuterBorder,style:{height:config.height,overflow:"auto"===config.height?"visible":"auto",marginTop:16},dataSource:dataSource.slice(0,config.dataSize),columns:_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.b}))},默认列宽=function 默认列宽(){const{isLoading:isLoading,dataSource:dataSource}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.e)(),columns=[{code:"provinceName",name:"省份"},{code:"confirmedCount",name:"确诊",render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.a,align:"right"},{code:"suspectedCount",name:"疑似",render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.a,align:"right"},{code:"curedCount",name:"治愈",render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.a,align:"right"},{code:"deadCount",name:"死亡",render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.a,align:"right"},{code:"updateTime",name:"最后更新时间",render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.d}];return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_2__.a,{defaultColumnWidth:200,isLoading:isLoading,dataSource:dataSource.slice(0,5),columns:[...columns,...columns]})},左侧锁列=function 左侧锁列(){const{dataSource:dataSource,isLoading:isLoading}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.e)();return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_2__.a,{style:{width:500,height:300,overflow:"auto"},useOuterBorder:!0,isLoading:isLoading,dataSource:dataSource,columns:[{lock:!0,code:"provinceName",name:"省份",width:150},{code:"confirmedCount",name:"确诊",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.a,align:"right"},{code:"suspectedCount",name:"疑似",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.a,align:"right"},{code:"curedCount",name:"治愈",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.a,align:"right"},{code:"deadCount",name:"死亡",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.a,align:"right"},{code:"updateTime",name:"最后更新时间",width:180,render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.d}]})},左侧与右侧锁列=function 左侧与右侧锁列(){const{dataSource:dataSource,isLoading:isLoading}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.d)();return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_2__.a,{style:{width:600,height:400,overflow:"auto"},isLoading:isLoading,useOuterBorder:!0,dataSource:dataSource.flatMap(d=>d.children),columns:[_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.a.lockProvCol,_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.a.cityName,..._assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.a.indCols,_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.a.lockTimeCol]})},表头吸顶_Sticky_Header=function 表头吸顶_Sticky_Header(){const{dataSource:dataSource,isLoading:isLoading}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.e)();return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",{style:{position:"sticky",top:0,height:48,border:"1px solid #ccc",zIndex:30,background:"white",color:"#333",display:"flex",alignItems:"center",justifyContent:"center"}},react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",null,"表格操作栏，这里适合放置一些功能按钮")),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_2__.a,{isStickyHead:!0,stickyTop:48,isLoading:isLoading,dataSource:dataSource,columns:_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.b}))},表头props=function 表头props(){const{dataSource:dataSource,isLoading:isLoading}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.e)();return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_2__.a,{isLoading:isLoading,dataSource:dataSource.slice(0,5),columns:[{code:"provinceName",name:"省份",width:150,headerCellProps:{style:{color:"white",fontSize:20,background:"#1ea7fd"}}},..._assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.a.indCols,{code:"updateTime",name:"最后更新时间",width:180,render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.d,headerCellProps:{style:{letterSpacing:10,fontSize:20,fontWeight:"bold",textAlign:"center"}}}]})},表格吸底_Sticky_Bottom=function 表格吸底_Sticky_Bottom(){const{dataSource:dataSource,isLoading:isLoading}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.e)();return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_2__.a,{isStickyHead:!0,stickyBottom:48,isLoading:isLoading,dataSource:dataSource,columns:_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.b}),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",{style:{position:"sticky",bottom:0,height:48,border:"1px solid #ccc",zIndex:30,background:"white",color:"#333",display:"flex",alignItems:"center",justifyContent:"center"}},react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",null,"表格底部操作栏，这里可以放置分页控件")),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",{style:{border:"1px solid #ccc",height:"30vh",marginTop:32}},"OTHER CONTENT"))},列分组=function 列分组(){const{dataSource:dataSource,isLoading:isLoading}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.e)();return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_2__.a,{isLoading:isLoading,dataSource:dataSource,columns:[{name:"基本信息",lock:!0,children:[_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.a.provinceName,_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.a.updateTime]},{name:"指标分组",children:[{name:"指标分组1",children:[_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.a.confirmedCount,_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.a.suspectedCount]},{name:"指标分组2",children:[_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.a.curedCount,_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.a.deadCount]}]}]})},虚拟滚动与单元格合并=function 虚拟滚动与单元格合并(){const{dataSource:dataSource,isLoading:isLoading}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.d)();let lastTop=0;const rectMap=new Map;return dataSource.forEach(d=>{rectMap.set(d.provinceName,{left:0,right:1,top:lastTop,bottom:lastTop+d.children.length}),lastTop+=d.children.length}),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_2__.a,{isLoading:isLoading,dataSource:dataSource.slice(0,3).flatMap(d=>d.children),useVirtual:!0,columns:[{..._assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.a.lockProvCol,getSpanRect:value=>rectMap.get(value)},_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.a.lockCityCol,_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.a.confirmedCount,_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.a.suspectedCount,_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.a.curedCount,_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.a.deadCount,_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.a.updateTime]})},自定义单元格样式=function 自定义单元格样式(){const{isLoading:isLoading,dataSource:dataSource}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.e)(),columns=[{code:"provinceName",name:"省份",width:150},{code:"confirmedCount",name:"确诊",width:100,render(v){const danger=v>1e3,safe=v<100;return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",{style:{color:danger?"red":safe?"green":"unset",fontWeight:danger||safe?"bold":"normal"}},Object(_assets_format__WEBPACK_IMPORTED_MODULE_6__.a)(v))},align:"right"},{code:"suspectedCount",name:"疑似",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.a,align:"right"},{code:"curedCount",name:"治愈",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.a,align:"right",getCellProps(value,record){if(record.curedCount/record.confirmedCount>.3)return{style:{background:"#129835",color:"white",fontWeight:"bold"}}}},{code:"deadCount",name:"死亡",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.a,align:"right",getCellProps(value){if(value>0)return{style:{background:"#981c12",color:"white",fontWeight:"bold"}}}},{code:"updateTime",name:"最后更新时间",width:180,render:_assets_format__WEBPACK_IMPORTED_MODULE_6__.d}];return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h1",null,"样式说明"),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("p",null,"红色字体：确诊 > 1000"),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("p",null,"绿色背景：治愈 / 确诊 > 0.3"),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("p",null,"红色背景：死亡 > 0"),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_2__.a,{isLoading:isLoading,dataSource:dataSource,columns:columns}))},自定义表格行props=function 自定义表格行props(){const{isLoading:isLoading,dataSource:dataSource}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.e)(),[lastClickRowIndex,setLastClickRowIndex]=Object(react__WEBPACK_IMPORTED_MODULE_4__.useState)(2);return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_2__.a,{isLoading:isLoading,dataSource:dataSource.slice(0,6),columns:_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_8__.b,getRowProps:(record,rowIndex)=>({style:rowIndex===lastClickRowIndex?{outlineOffset:-2,outline:"2px solid #333",background:"#ddd"}:void 0,onClick(){setLastClickRowIndex(rowIndex)}})})}},function(module,exports,__webpack_require__){var map={"./af":336,"./af.js":336,"./ar":337,"./ar-dz":338,"./ar-dz.js":338,"./ar-kw":339,"./ar-kw.js":339,"./ar-ly":340,"./ar-ly.js":340,"./ar-ma":341,"./ar-ma.js":341,"./ar-sa":342,"./ar-sa.js":342,"./ar-tn":343,"./ar-tn.js":343,"./ar.js":337,"./az":344,"./az.js":344,"./be":345,"./be.js":345,"./bg":346,"./bg.js":346,"./bm":347,"./bm.js":347,"./bn":348,"./bn.js":348,"./bo":349,"./bo.js":349,"./br":350,"./br.js":350,"./bs":351,"./bs.js":351,"./ca":352,"./ca.js":352,"./cs":353,"./cs.js":353,"./cv":354,"./cv.js":354,"./cy":355,"./cy.js":355,"./da":356,"./da.js":356,"./de":357,"./de-at":358,"./de-at.js":358,"./de-ch":359,"./de-ch.js":359,"./de.js":357,"./dv":360,"./dv.js":360,"./el":361,"./el.js":361,"./en-au":362,"./en-au.js":362,"./en-ca":363,"./en-ca.js":363,"./en-gb":364,"./en-gb.js":364,"./en-ie":365,"./en-ie.js":365,"./en-il":366,"./en-il.js":366,"./en-in":367,"./en-in.js":367,"./en-nz":368,"./en-nz.js":368,"./en-sg":369,"./en-sg.js":369,"./eo":370,"./eo.js":370,"./es":371,"./es-do":372,"./es-do.js":372,"./es-us":373,"./es-us.js":373,"./es.js":371,"./et":374,"./et.js":374,"./eu":375,"./eu.js":375,"./fa":376,"./fa.js":376,"./fi":377,"./fi.js":377,"./fil":378,"./fil.js":378,"./fo":379,"./fo.js":379,"./fr":380,"./fr-ca":381,"./fr-ca.js":381,"./fr-ch":382,"./fr-ch.js":382,"./fr.js":380,"./fy":383,"./fy.js":383,"./ga":384,"./ga.js":384,"./gd":385,"./gd.js":385,"./gl":386,"./gl.js":386,"./gom-deva":387,"./gom-deva.js":387,"./gom-latn":388,"./gom-latn.js":388,"./gu":389,"./gu.js":389,"./he":390,"./he.js":390,"./hi":391,"./hi.js":391,"./hr":392,"./hr.js":392,"./hu":393,"./hu.js":393,"./hy-am":394,"./hy-am.js":394,"./id":395,"./id.js":395,"./is":396,"./is.js":396,"./it":397,"./it-ch":398,"./it-ch.js":398,"./it.js":397,"./ja":399,"./ja.js":399,"./jv":400,"./jv.js":400,"./ka":401,"./ka.js":401,"./kk":402,"./kk.js":402,"./km":403,"./km.js":403,"./kn":404,"./kn.js":404,"./ko":405,"./ko.js":405,"./ku":406,"./ku.js":406,"./ky":407,"./ky.js":407,"./lb":408,"./lb.js":408,"./lo":409,"./lo.js":409,"./lt":410,"./lt.js":410,"./lv":411,"./lv.js":411,"./me":412,"./me.js":412,"./mi":413,"./mi.js":413,"./mk":414,"./mk.js":414,"./ml":415,"./ml.js":415,"./mn":416,"./mn.js":416,"./mr":417,"./mr.js":417,"./ms":418,"./ms-my":419,"./ms-my.js":419,"./ms.js":418,"./mt":420,"./mt.js":420,"./my":421,"./my.js":421,"./nb":422,"./nb.js":422,"./ne":423,"./ne.js":423,"./nl":424,"./nl-be":425,"./nl-be.js":425,"./nl.js":424,"./nn":426,"./nn.js":426,"./oc-lnc":427,"./oc-lnc.js":427,"./pa-in":428,"./pa-in.js":428,"./pl":429,"./pl.js":429,"./pt":430,"./pt-br":431,"./pt-br.js":431,"./pt.js":430,"./ro":432,"./ro.js":432,"./ru":433,"./ru.js":433,"./sd":434,"./sd.js":434,"./se":435,"./se.js":435,"./si":436,"./si.js":436,"./sk":437,"./sk.js":437,"./sl":438,"./sl.js":438,"./sq":439,"./sq.js":439,"./sr":440,"./sr-cyrl":441,"./sr-cyrl.js":441,"./sr.js":440,"./ss":442,"./ss.js":442,"./sv":443,"./sv.js":443,"./sw":444,"./sw.js":444,"./ta":445,"./ta.js":445,"./te":446,"./te.js":446,"./tet":447,"./tet.js":447,"./tg":448,"./tg.js":448,"./th":449,"./th.js":449,"./tl-ph":450,"./tl-ph.js":450,"./tlh":451,"./tlh.js":451,"./tr":452,"./tr.js":452,"./tzl":453,"./tzl.js":453,"./tzm":454,"./tzm-latn":455,"./tzm-latn.js":455,"./tzm.js":454,"./ug-cn":456,"./ug-cn.js":456,"./uk":457,"./uk.js":457,"./ur":458,"./ur.js":458,"./uz":459,"./uz-latn":460,"./uz-latn.js":460,"./uz.js":459,"./vi":461,"./vi.js":461,"./x-pseudo":462,"./x-pseudo.js":462,"./yo":463,"./yo.js":463,"./zh-cn":464,"./zh-cn.js":464,"./zh-hk":465,"./zh-hk.js":465,"./zh-mo":466,"./zh-mo.js":466,"./zh-tw":467,"./zh-tw.js":467};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=781},,,,,function(module,exports){},,function(module,exports){},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){var map={"./biz.stories.mdx":837};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=836},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16),_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(58),_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default=__webpack_require__.n(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14__);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"表格功能拓展 / 文档",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"ali-react-table/biz 提供了业务开发中经常需要用到的一些功能，部分功能采用 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"p"},"统一的拓展机制")," 进行实现与提供，其他功能由导出函数 / React 组件 / React hooks 进行提供。"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"ali-react-table/biz 提供的常用功能如下："),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default.a,{kind:"表格功能拓展 / 常用功能 / 树状模式",story:"page",mdxType:"LinkTo"},"树状模式")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default.a,{kind:"表格功能拓展 / 常用功能 / 排序",story:"page",mdxType:"LinkTo"},"排序")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default.a,{kind:"表格功能拓展 / 常用功能 / 列高亮",story:"page",mdxType:"LinkTo"},"列高亮")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default.a,{kind:"表格功能拓展 / 常用功能 / 单元格自动合并",story:"page",mdxType:"LinkTo"},"单元格自动合并")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default.a,{kind:"表格功能拓展 / 常用功能 / 拖拽调整列宽",story:"page",mdxType:"LinkTo"},"拖拽调整列宽")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default.a,{kind:"表格功能拓展 / 常用功能 / 其他功能",story:"page",mdxType:"LinkTo"},"commonTransforms 中的其他功能")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default.a,{kind:"表格功能拓展 / hooks / 表格操作栏",story:"page",mdxType:"LinkTo"},"hooks：表格操作栏（包括自定列功能）")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default.a,{kind:"表格功能拓展 / react组件 / 自定义列对话框",story:"page",mdxType:"LinkTo"},"React 组件：自定义列对话框"))),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"BaseTable")," 基于 dataSource 和 column 渲染表格，对 dataSource/columns 进行一些包装和替换，可以实现丰富的表格特性：包括排序、树状模式、过滤等。"),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"ali-react-table/biz 基于 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"TableTransform")," 来对 BaseTable 进行功能增强。",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"Transform<T>")," 与 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"TableTransform")," 的接口如下："),_ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"TableTransform"),"（后面简称 transform）是一个简单的转换函数，输入",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"p"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("em",{parentName:"strong"},"列配置 + 数据源")),"，输出一份新的",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"p"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("em",{parentName:"strong"},"列配置 + 数据源")),"。每一个 transform 通过对 dataSource/columns 的包装或更新以实现一个新的特性，例如调整列的显示或隐藏，为某一行数据计算缩进，添加排序功能等."),_ref9=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"每个 transform 的输入和输出的类型相同，我们可以方便地将多个 transform 组合起来，得到一个大的 transform，从而实现不同功能的组合。"),_ref10=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"ali-react-table/biz 导出了 applyTransforms 方法来应用多个 transform 🌟："),_ref11=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"applyTransforms 只是一个简单的辅助函数，背后的逻辑如下："),_ref12=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"除了 commonTransforms 之外，我们也可以自己实现 transform，然后将其与其他 transform 组合到一起。"),_ref13=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"你可以在自定义的 transform 中执行任何逻辑，只要返回值仍然是有效的 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"dataSource / columns")," 即可。在自定义的 transform 中，对每一个列的处理方式可能是不同的，此时我们推荐利用 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"column.features")," 来为不同的列打上标记。"),_ref14=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h2"},"transformColumn"),_ref15=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"实现自定义 transform 需要注意 column 是树状结构（",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"column.children")," 存放了子节点），我们往往需要对 column 进行递归的处理。为此 ali-react-table/biz 提供了 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"transformColumn")," 方法用来简化创建针对列的 transform。提供一个针对单个 column 配置的转换函数，该方法可以生成对应的 TableTransform，接口如下："),_ref16=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"返回 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"null")," 时，对应的列将被移除；返回 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"ArtColumn")," 或一个数组时，返回的结果会替换对应的列。"),_ref17=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"下面是一些利用 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"transformColumn")," 实现的 transform："),_ref18=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"值得一提的是，commonTransforms 中的大部分 transform 都是通过该方法生成的。");function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"表格功能拓展"},"表格功能拓展"),_ref3,_ref4,_ref5,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"统一拓展机制"},"统一拓展机制"),_ref6,_ref7,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"type Transform<T> = (input: T) => T\n\ntype TableTransform = Transform<{\n  columns: ArtColumn[]\n  dataSource: any[]\n}>\n")),_ref8,_ref9,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"使用-transform"},"使用 transform"),_ref10,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-jsx"}),"import { BaseTable } from 'ali-react-table'\n// 注意导入的路径\nimport { applyTransforms } from 'ali-react-table/biz'\n\nconst renderData = applyTransforms(\n  // 输入放在第一个参数\n  { columns: inputColumns, dataSource: inputDataSource },\n  // transforms 作为后续的参数\n  transform1,\n  transform2,\n  transform3,\n  ...moreTransforms,\n)\n\nreturn <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} />\n")),_ref11,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-javascript"}),"const output = applyTransforms(input, transform_1, transform_2, transform_3)\n\n// 上面的代码相当于以下代码：\nconst temp1 = transform_1(input)\nconst temp2 = transform_2(temp1)\nconst output = transform_3(temp2)\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"自定义-transform"},"自定义 transform"),_ref12,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-javascript"}),"function doubleDataSourceTransform({ columns, dataSource }) {\n  const outputColumns = columns\n\n  const outputDataSource = dataSource.concat(dataSource)\n\n  return { columns: outputColumns, dataSource: outputDataSource }\n}\n")),_ref13,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"自定义-transform-辅助函数-transformcolumn"},"自定义 transform 辅助函数 ",_ref14),_ref15,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"function transformColumn(fn: (column: ArtColumn) => null | ArtColumn | ArtColumn[]): TableTransform\n")),_ref16,_ref17,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-javascript"}),"// 反转列的 hidden 属性\nconst invertHidden = transformColumn((col) => ({ ...col, hidden: !col.hidden }))\n\n// 将所有的列的标题字体大小设置为 24px\nconst bigTitle = transformColumn((col) => {\n  const title = col.title ?? col.name\n  return {\n    ...col,\n    title: <div style={{ fontSize: 24 }}>{title}</div>,\n  }\n})\n\n// 根据 features.showCompare 来添加对应的 对比列\nconst addCompareCol = transformColumn((col) => {\n  if (col.features?.showCompare) {\n    return [col, { ...col, name: '对比值', code: `compare_${col.code}` }]\n  }\n  return col\n})\n")),_ref18)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"表格功能拓展 / 文档",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref19=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref19}}),__webpack_exports__.default=componentMeta},function(module,exports,__webpack_require__){var map={"./1-tree-mode.stories.mdx":839,"./2-sort.stories.mdx":840,"./3-auto-row-span.stories.mdx":841,"./4-column-hover.stories.mdx":842,"./5-column-resize.stories.mdx":843,"./6-others.stories.mdx":844};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=838},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16),_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(58),_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default=__webpack_require__.n(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14__);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"表格功能拓展 / 常用功能 / 树状模式",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"本页文档将介绍 ali-react-table/biz 提供的树状模式的相关 API。本页中的示例源码可在 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default.a,{kind:"表格功能拓展 / 功能拓展示例",story:"树状表格",mdxType:"LinkTo"},"表格功能拓展-功能拓展示例")," 查看。"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"commonTransforms.buildTree(idProp: string, parentIdProp: string): TableTransform")),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"根据数据中的 id/parentId 字段，将 dataSource 转换为树状结构，树状结构下，父节点的 children 数组中包含对其子节点的引用。"),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"ali-react-table/biz 还导出了一个静态的 buildTree 函数，如果你只需要对数据进行处理，可以使用静态的 buildTree 函数。"),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"如果你已经有了树状结构的数据，那就可以跳过 buildTree 的调用，直接使用 treeMode 来进行渲染。"),_ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"commonTransforms.treeMode(options?: TreeModeOptions): TableTransform")),_ref9=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"该 transform 要求输入的 dataSource 为树状结构，即子节点位于父节点的 children 数组中"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"该 transform 会对 dataSource 和 columns 进行更新，根据逻辑如下：",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"根据 options.openKeys 计算出需要展示的表格行，并计算每一行的缩进和展开信息",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"缩进等信息会存放在输出的 dataSource 中，可以通过 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"record[commonTransform.treeMetaSymbol]")," 来获取该信息"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"该 transform 会对 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"columns[0]")," 进行更新，使其在渲染时处理缩进并绘制树状模式的展开/收拢按钮")))),_ref10=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"TreeModeOptions")," 具体定义："),_ref11=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},"transform 都是纯函数，所需的状态需要由上层提供"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"上层需要提供 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.openKeys")," 来告诉 treeMode 哪些节点是展开的，哪些行节点是收拢的"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.onChangeOpenKeys"),": 除了 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"nextKeys")," 之外，该回调函数还会接受到 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"key")," 与 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"action")," 参数，分别表示本次操作「对应的 key」与「操作类型」"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.isLeafNode"),": 该选项可用于自定义叶子节点的判定逻辑",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"对于每一个树中的节点，该回调函数都将被调用一次；调用时除了节点的数据本身（node 参数，即 dataSource 中的元素），回调函数还可以接收到该节点在树状默认下的一些元信息（深度、是否展开等）"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"若对于某一个节点，该函数返回了 false，则 treeMode 会认为该节点是「非叶节点」，将且其渲染收拢/展开按钮"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.indentSize")," 可以配置子节点的缩进宽度。")),_ref12=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"ali-react-table/biz 也提供了非受控的使用方式，useTreeModeTransform 是一个自定义 React hooks，其参数与 commonTransforms.treeMode 类似，但移除了 openKeys/onChangeOpenKeys，同时新增了 defaultOpenKeys 参数（默认为空数组）."),_ref13=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"表格功能拓展-功能拓展示例--树状表格",mdxType:"Story"})),_ref14=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"异步数据加载场景下，因为此时前端只有整棵树中一小部分的数据，我们必须主动告诉表格哪些节点是父节点（可被展开），哪些节点是子节点（不可被展开）。设置 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"TreeModeOptions#isLeafNode")," 覆盖默认的子节点判断方式，并在 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"TreeModeOptions#onChangeOpenKeys")," 中根据展开的节点判断是否需要加载更多数据，可以实现树状模式下异步数据加载功能。"),_ref15=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"示例-异步数据加载树状表格--async-loading-tree-table",mdxType:"Story"})),_ref16=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"在 onChangeOpenKeys 记录上一次用户展开的节点的 key，并使用 getRowProps 为相应的行设置 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},'className="last-open"'),"（也设置为其他类名）。这样就可以通过 CSS 来方便的控制「上次展开的位置」的样式。"),_ref17=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"表格行的 CSS 类名为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"art-table-row"),"（推荐使用 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"Classes.tableRow")," 来引用），展开/收拢图标为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"expansion-icon")),_ref18=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"示例-树状表格中的最近展开标记--tree-table-with-last-open-mark",mdxType:"Story"}));function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"树状模式"},"树状模式"),_ref3,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"buildtree-从列表数据中构建树状数据"},"buildTree 从列表数据中构建树状数据"),_ref4,_ref5,_ref6,_ref7,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"treemode-使用树状结构来渲染表格"},"treeMode 使用树状结构来渲染表格"),_ref8,_ref9,_ref10,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"export interface TreeModeOptions {\n  primaryKey: string\n  openKeys: string[]\n  onChangeOpenKeys(nextKeys: string[], key: string, action: 'expand' | 'collapse'): void\n\n  indentSize?: number\n  isLeafNode?(node: any, nodeMeta: { depth: number; expanded: boolean; rowKey: string }): boolean\n}\n")),_ref11,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"treemode-非受控用法"},"treeMode 非受控用法"),_ref12,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-javascript"}),"import { useTreeModeTransform } from 'ali-react-table/biz'\n\nfunction MyComponent() {\n  const treeModeTransform = useTreeModeTransform({ primaryKey: 'id', defaultOpenKeys: ['B2C'] })\n\n  const renderData = applyTransforms({ columns: columns, dataSource: state.data }, treeModeTransform)\n\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} />\n}\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"基本示例"},"基本示例"),_ref13,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"进阶用法--异步数据加载"},"进阶用法 —— 异步数据加载"),_ref14,_ref15,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"进阶用法--对上次展开位置进行标记"},"进阶用法 —— 对上次展开位置进行标记"),_ref16,_ref17,_ref18)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"表格功能拓展 / 常用功能 / 树状模式",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref19=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref19}}),__webpack_exports__.default=componentMeta},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16),_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(58),_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default=__webpack_require__.n(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14__);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"表格功能拓展 / 常用功能 / 排序",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"本页文档将介绍 ali-react-table/biz 提供的排序的相关 API。本页中的示例源码可在 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default.a,{kind:"表格功能拓展 / 功能拓展示例",story:"表格排序-单列",mdxType:"LinkTo"},"表格功能拓展-功能拓展示例")," 查看。"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"API 接口： ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"commonTransforms.sort(options: SortOptions): TableTransform")),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"该 transform 会对 dataSource 和 columns 进行更新"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"该 transform 会根据 options.sorts 来排序 dataSource",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.mode=multiple")," （默认值）时支持多字段排序（先按字段 1 排序，然后按字段 2 排序，依次类推）"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.mode=single")," 时表现为单字段排序"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"无论是多字段还是单字段排序，",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.sorts")," 始终为一个数组"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"该 transform 会根据 options.sorts 为列的表头渲染对应的排序图标"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},"注意默认情况下，列都是不可排序的。想让某一列支持排序，必须设置 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"strong"},"column.features.sortable = true")))),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"ali-react-table/biz 也提供了非受控的使用方式，useSortTransform 是一个自定义 React hooks，其参数与 commonTransforms.sort 类似，但移除了 sorts/onChangeSorts，同时新增了 defaultSorts 参数（默认为空数组）."),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"表格功能拓展-功能拓展示例--表格排序-单列",mdxType:"Story"})),_ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"commonTransforms.sort")," 默认就支持了树状排序，即对于树中的某一个父节点，对其子节点进行排序。使用时注意 transform 的调用顺序。"),_ref9=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"表格功能拓展-功能拓展示例--树状模式与层级排序",mdxType:"Story"})),_ref10=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"当为某一列设置 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"features.sortable = true")," 时，该列默认会按照自然序（对于数字）或字典序（对于字符串）进行排序。\n我们可以为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"features.sortable")," 设置一个函数来自定义某一列的比较规则，该函数将被作为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"Array#sort")," 的参数。"),_ref11=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"如果只想使用 sort 提供的交互与 UI，但不想让 sort 改变 dataSource，可以设置 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"options.keepDataSource = true"),"。"),_ref12=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"SortOptions#orders")," 可以用来指定排序切换顺序。该选项的默认值为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"['desc', 'asc', 'none']"),"，即连续点击某一列的表头时，先按降序排序，然后按升序排序，最后取消排序；传入自定义的 orders 可以覆盖默认的切换顺序。"),_ref13=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"SortOptions#SortHeaderCell")," 可用于自定义排序表头的内容和样式，组件接口如下："),_ref14=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"表格功能拓展-功能拓展示例--自定义样式的排序表头",mdxType:"Story"}));function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"排序"},"排序"),_ref3,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"sort-表格排序"},"sort 表格排序"),_ref4,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"export interface SortOptions {\n  /** 排序字段列表 */\n  sorts: SortItem[]\n\n  /** 更新排序字段列表的回调函数 */\n  onChangeSorts(nextSorts: SortItem[]): void\n\n  // 以下字段为可选参数\n\n  /** 排序切换顺序 */\n  orders?: SortOrder[]\n\n  /** 排序模式。单选 single，多选 multiple，默认为多选 */\n  mode?: 'single' | 'multiple'\n\n  /** 自定义排序表头 */\n  SortHeaderCell?: React.ComponentType<SortHeaderCellProps>\n\n  /** 是否保持 dataSource 不变 */\n  keepDataSource?: boolean\n}\n")),_ref5,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"sort-非受控用法"},"sort 非受控用法"),_ref6,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-javascript"}),"import { useSortTransform } from 'ali-react-table/biz'\n\nfunction MyComponent() {\n  const sortTransform = useSortTransform({\n    defaultSorts: [\n      { code: 'deadCount', order: 'asc' },\n      { code: 'confirmedCount', order: 'desc' },\n    ],\n  })\n\n  const renderData = applyTransforms({ columns: columns, dataSource: state.data }, sortTransform)\n\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} />\n}\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"基本示例"},"基本示例"),_ref7,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"进阶用法--树状排序"},"进阶用法 —— 树状排序"),_ref8,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-javascript"}),"const renderData = applyTransforms(\n  input,\n  commonTransforms.buildTree(args),\n  commonTransforms.sort(sortOptions), // 注意 sort 需要放在 treeMode\n  commonTransforms.treeMode(treeModeOptions),\n)\n")),_ref9,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"进阶用法--自定义比较函数"},"进阶用法 —— 自定义比较函数"),_ref10,_ref11,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"进阶功能--自定义切换顺序"},"进阶功能 —— 自定义切换顺序"),_ref12,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"进阶用法--自定义排序列表头渲染"},"进阶用法 —— 自定义排序列表头渲染"),_ref13,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"interface SortHeaderCellProps {\n  /** 调用 commonTransforms.sort(...) 时的参数 */\n  sortOptions: Required<Omit<SortOptions, 'SortHeaderCell'>>\n\n  /** 在添加排序相关的内容之前 表头原有的渲染内容 */\n  children: ReactNode\n\n  /** 当前排序 */\n  sortOrder: SortOrder\n\n  /** 多列排序下，sortIndex 指明了当前排序字段起作用的顺序. 当 sortOrder 为 none 时，sortIndex 为 -1 */\n  sortIndex: number\n\n  /** 当前列的配置 */\n  column: ArtColumn\n\n  /** 切换排序的回调 */\n  onToggle(): void\n}\n")),_ref14)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"表格功能拓展 / 常用功能 / 排序",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref15=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref15}}),__webpack_exports__.default=componentMeta},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16);__webpack_require__(58);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"表格功能拓展 / 常用功能 / 单元格自动合并",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"commonTransforms.autoRowSpan()"),"：根据上下单元格的值 是否相等 自动合并单元格。"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"在设置 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"column.feature.autoRowSpan")," 之后，如果该列上下两个单元格中的值相等，则自动合并这两个单元格。如果连续的多个单元格的值都相等，则合并所有这些单元格。 该 transform 会覆盖列中原有的 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"getSpanRect"),"，注意避免与其他 transform 的冲突。"),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"column.feature.autoRowSpan")," 也可以设置为一个比较函数，用来自定义「两个单元格中的值相等」的判断逻辑。其函数签名为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"(val1: any, val2: any) => boolean")),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"表格功能拓展-功能拓展示例--单元格自动合并",mdxType:"Story"}));function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"单元格自动合并"},"单元格自动合并"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"autorowspan-自动单元格合并"},"autoRowSpan 自动单元格合并"),_ref3,_ref4,_ref5,_ref6)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"表格功能拓展 / 常用功能 / 单元格自动合并",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref7}}),__webpack_exports__.default=componentMeta},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16);__webpack_require__(58);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"表格功能拓展 / 常用功能 / 列高亮",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"commonTransforms.columnHover(options: ColumnHoverOptions): TableTransform")),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"这是一个只会对 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"columns")," 进行更新的 transform"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"如果某一列的 colIndex 与 options.hoverColIndex 匹配，该 transform 会将该列单元格的背景色设置为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.hoverColor"),"，默认为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"'#f5f5f5'"))),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"表格功能拓展-功能拓展示例--列高亮",mdxType:"Story"})),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"commonTransforms.columnRangeHover(options: ColumnRangeHoverOptions): TableTransform")),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"这是一个只会对 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"columns")," 进行更新的 transform"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"如果某一列的 colIndex 与 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.hoverColor")," 匹配...",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"该 transform 会将该列单元格的背景色设置为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.hoverColor"),"，默认为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"'#f5f5f5'")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"该 transform 会将该列表头的背景色设置为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.headerHoverColor"),"，默认为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"'#ddd'"))))),_ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"表格功能拓展-功能拓展示例--列的范围高亮",mdxType:"Story"})),_ref9=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"ali-react-table/biz 也提供了非受控的使用方式：useColumnHoverTransform。两者与受控用法类似，但移除了 hoverColIndex/onChangeHoverColIndex，同时增加了 defaultHoverColIndex."),_ref10=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"非受控列范围高亮 useColumnRangeHoverTransform：useColumnHoverRangeTransform 在受控用法的基础上移除了 hoverRange/onChangeHoverRange，增加了 defaultHoverRange.");function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"列高亮"},"列高亮"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"columnhover-列高亮"},"columnHover 列高亮"),_ref3,_ref4,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"type ColumnHoverOptions = {\n  hoverColor?: string\n  hoverColIndex: number\n  onChangeHoverColIndex(nextColIndex: number): void\n}\n")),_ref5,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"columnrangehover-列范围高亮"},"columnRangeHover 列范围高亮"),_ref6,_ref7,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"type ColumnHoverOptions = {\n  hoverColor?: string\n  headerHoverColor?: string\n  hoverRange: { start: number; end: number }\n  onChangeHoverRange(nextColIndexRange: { start: number; end: number }): void\n}\n")),_ref8,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"非受控用法"},"非受控用法"),_ref9,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-javascript"}),"import { useColumnHoverTransform } from 'ali-react-table/biz'\n\nfunction MyComponent() {\n  const columnHover = useColumnHoverTransform()\n  const renderData = applyTransforms({ columns: inputColumns, dataSource: inputDataSource }, columnHover)\n\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} />\n}\n")),_ref10)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"表格功能拓展 / 常用功能 / 列高亮",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref11=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref11}}),__webpack_exports__.default=componentMeta},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16);__webpack_require__(58);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"表格功能拓展 / 常用功能 / 拖拽调整列宽",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"commonTransforms.columnResize(options: ColumnResizeOptions): TableTransform")),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"根据 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"options.sizes")," 重新设置每一列的宽度，并在每一列的表头右侧渲染一个 span，作为拖拽排序的 handle。"),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"表格功能拓展-功能拓展示例--拖拽调整列宽",mdxType:"Story"})),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"ali-react-table/biz 也提供了非受控的用法，useColumnResizeTransform 在受控的基础上移除了 sizes/onChangeSizes，同时新增了 defaultSizes 参数。");function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"拖拽调整列宽"},"拖拽调整列宽"),_ref3,_ref4,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"interface ColumnResizeOptions {\n  /** 每一列的宽度 */\n  sizes: number[]\n\n  /** 修改宽度的回调函数 */\n  onChangeSizes(nextSizes: number[]): void\n\n  // 以下为可选参数\n\n  /** 列的最小宽度，默认为 40 */\n  minSize?: number\n  /** 列的最大宽度，默认为 Infinity */\n  maxSize?: number\n  /** 是否在列的末尾追加可伸缩列，默认为 false */\n  appendExpander?: boolean\n  /** 是否在调整列宽时禁用 user-select，默认为 false */\n  disableUserSelectWhenResizing?: boolean\n}\n")),_ref5,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"非受控用法"},"非受控用法"),_ref6)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"表格功能拓展 / 常用功能 / 拖拽调整列宽",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref7}}),__webpack_exports__.default=componentMeta},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16);__webpack_require__(58);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"表格功能拓展 / 常用功能 / 其他功能",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"commonTransforms.flatten()")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"当分组的 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"features.flatten")," 为 true 时，将分组「压平」；即移除父节点，并将子节点数组展开后放在原来父节点的位置上"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"这是一个只会对 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"columns")," 进行更新的 transform")),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"commonTransforms.orderField(startOrder?: number)"),"：序号列"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"当列的 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"features.order")," 为 true 或是 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"features.orderField")," 为 true 时，覆盖该列的 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"getValue")," 方法，使其总是展示序号"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"这是一个只会对 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"columns")," 进行更新的 transform")),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"commonTransforms.tips(components: { Balloon: any })"),"：提示气泡",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"这是一个只会对 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"columns")," 进行更新的 transform"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"在列标题旁边展示一个 ℹ 符号，鼠标悬停时展示提示气泡，气泡内容由 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"columns.features.tips")," 提供")))),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"表格功能拓展-功能拓展示例--列气泡提示",mdxType:"Story"})),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"commonTransforms.visible(visibleCodes: string[]): TableTransform"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},"该 transform 不常用，一般情况下直接使用 表格操作栏 提供的自定义列功能即可")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"根据 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"visibleCodes")," 参数调整列的显示/隐藏状态 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"column.hidden")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"这是一个只会对 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"columns")," 进行更新的 transform"))));function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"flatten-「压平」分组"},"flatten 「压平」分组"),_ref3,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"orderfield-序号列"},"orderField 序号列"),_ref4,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"tips-提示气泡"},"tips 提示气泡"),_ref5,_ref6,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"visible-调整可见列"},"visible 调整可见列"),_ref7)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"表格功能拓展 / 常用功能 / 其他功能",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref8}}),__webpack_exports__.default=componentMeta},function(module,exports,__webpack_require__){var map={"./operation-bar.stories.mdx":846};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=845},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"表格功能拓展 / hooks / 表格操作栏",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h1"},"hooks useOperationBar"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"ali-react-table/biz 提供了一个简单的表格操作栏组件，并实现了一些常见的表格操作。和 transforms 不同，hooks 可以拥有自己的状态，故 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"useOperationBar")," 内部维护了若干表格操作栏的状态。"),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"function useOperationBar(options): { transforms, nodes, view }")),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.features")," 是一个配置对象的数组，每个对象表示开启一个特性，特性见下方"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.columns"),"：表格的列配置"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.components"),"：操作栏相关 UI 所使用的的组件；因为操作栏本身并没有依赖任何组件库，所以需要有由层向操作栏提供组件",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"组件库目前支持 hippo v1, hippo v2、fusion v1，任选一个即可"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"import * as hippo from '@alife/hippo'"),"，并将 hippo 传递给 components 参数"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"import * as fusion from '@alifd/next'"),"，并将 fusion 传递给 components 参数"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.actionColor"),"：操作按钮的颜色，默认为 hippo 的配色(",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"#23a3ff"),")")),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"useOperationBar(options)")," 会返回一个对象 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"operationBar"),"，该对象包含以下三个字段："),_ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"operation.transforms")," 是一个 transform 的数组，包含了来自 features 中的所有 transform；",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"记得使用 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"applyTransforms")," 来使用这些 transform，不然是不会生效的哟 (￣３￣)a"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"operation.nodes")," 是 features 对应的 UI，用于渲染操作栏中的功能按钮"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"operation.view")," 是一个 React 组件，提供了表格操作栏的",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},"容器样式"),"，用法与普通的 div 相同")),_ref9=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"{ type: 'custom-columns' }"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"自定义列"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"设置自定义列时，每一列是否默认可见需要在 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"column.features.defaultVisible")," 中配置",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"设置 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"column.features.enforceVisible")," 来使得一列总是可见"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"一般来说大部分的列都应当是默认可见的，此时推荐使用 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"proto")," 工具来简化重复配置声明"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"{ type: 'export'; onExport(): void }"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"数据导出"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"注意 onExport 需要自己实现，一般情况下可以调用 ali-react-table/biz 提供的工具方法 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"exportTableAsExcel")," 来将数据导出到 Excel 文件"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"{ type: 'separator' }"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"分隔符，没有逻辑，只影响工具栏的布局样式"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("del",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"del"},"{ type: 'toggle'; key: string; title: ReactNode; transform?(checked: boolean): TableTransform }")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("del",{parentName:"li"},"在工具栏中添加一个 Checkbox；并根据 Checkbox 勾选状态生成一个 transform")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"不推荐使用 toggle，请用 custom 代替 toggle"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"{ type: 'click'; node?: ReactNode; transform?: TableTransform }"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"在工具栏中添加一个可点击的文本区域"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"{ type: 'custom'; node?: ReactNode; transform?: TableTransform }"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"自定义的文本内容或 ReactNode")))),_ref10=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"这个例子展示了一个表格同时使用多个拓展功能的情况："),_ref11=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"表格操作工具栏"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"「展示环比」切换 —— 动态修改列的能力"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"Excel 导出功能"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"自定义列"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"展示数据量 —— 自定义工具栏的特性")),_ref12=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"useOperationBar")," 返回的 transform 与其他 transform 可以组合在一起，一同构建复杂表格。"),_ref13=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"示例-表格操作栏示例--表格操作栏示例",mdxType:"Story"}));function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"hooks-useoperationbar"},_ref3),_ref4,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"api"},"API"),_ref5,_ref6,_ref7,_ref8,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-js"}),"function MyComponent() {\n  const operationBar = useOperationBar(options)\n\n  // 注意一定要把 operationBar.transforms 用起来\n  const renderData = applyTransforms(inputData, ...operationBar.transforms)\n\n  return (\n    <div>\n      // operationBar.view 是一个普通的 React 组件，用法与 div 相同\n      <operationBar.view>{operationBar.nodes}</operationBar.view>\n      <BaseTable\n        dataSource={renderData.dataSource}\n        columns={renderData.columns}\n        isLoading={state.isLoading}\n        stickyTop={32}\n      />\n    </div>\n  )\n}\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"features-特性列表"},"features 特性列表"),_ref9,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"示例"},"示例"),_ref10,_ref11,_ref12,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-javascript"}),"/* 这是一份示例代码，不能直接运行 */\n\nimport * as fusion from '@alifd/next'\nimport { BaseTable } from 'ali-react-table'\nimport { useOperationBar, applyTransforms } from 'ali-react-table/biz'\n\nfunction MyComponent({ inputDataSource, inputColumns }) {\n  const operationBar = useOperationBar({\n    features: [\n      { type: 'toggle', key: 'lfl', title: '展示环比', transform: transformLfl },\n      { type: 'separator' },\n      { type: 'export', onExport },\n      { type: 'custom-columns' },\n      { type: 'custom', node: `共 ${state.isLoading ? '-' : state.data.length} 条数据` },\n    ],\n    components: fusion,\n    columns,\n  })\n\n  const renderData = applyTransforms(\n    { columns: inputColumns, dataSource: inputDataSource },\n    ...operationBar.transforms,\n    commonTransforms.orderField(),\n    commonTransforms.flatten(),\n  )\n\n  return (\n    <div>\n      <operationBar.view>{operationBar.nodes}</operationBar.view>\n      <BaseTable\n        dataSource={renderData.dataSource}\n        columns={renderData.columns}\n        isLoading={state.isLoading}\n        stickyTop={32}\n      />\n    </div>\n  )\n}\n")),_ref13)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"表格功能拓展 / hooks / 表格操作栏",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref14=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref14}}),__webpack_exports__.default=componentMeta},function(module,exports,__webpack_require__){var map={"./CustomColumnsDialog.stories.mdx":848};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=847},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"表格功能拓展 / React组件 / 自定义列对话框",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h1"},"CustomColumnsDialog"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"自定义列对话框组件"),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"表格功能拓展-功能拓展示例--自定义列对话框组件",mdxType:"Story"})),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"trigger"),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"(onOpen: () => void)=> ReactNode"),_ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"checkedCodes"),_ref9=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"string[]"),_ref10=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"onChangeCheckedCodes"),_ref11=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"(nextCodes: string[])=> void"),_ref12=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"columns"),_ref13=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"ArtColumn[]"),_ref14=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"components"),_ref15=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"typeof import('@alifd/next')"),_ref16=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"defaultCheckedCodes"),_ref17=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"string[]"),_ref18=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"defaultVisible"),_ref19=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"boolean"),_ref20=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"style"),_ref21=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"React.CSSProperties"),_ref22=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"className"),_ref23=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"string"),_ref24=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"enforceCheckedCodes"),_ref25=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"string[]"),_ref26=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"drawerProps"),_ref27=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"any"),_ref28=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"showCheckAll"),_ref29=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"boolean"),_ref30=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"showUncheckAll"),_ref31=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"boolean"),_ref32=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"drawerComponent"),_ref33=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"React.ComponentType"),_ref34=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"components")," 目前支持 fusion v0/v1（对应 hippo v1/v2），使用时选择其中一个组件库即可。",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"自定义列对话框并没有用到所有的 fusion/hippo 组件，实际用到的组件如下：Button, Checkbox, PageDialog/Drawer"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"defaultCheckedCodes")," 并不是 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"checkedCodes")," 的默认值，而是指点击「恢复默认」按钮时调用 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"onChangeCheckedCodes(...)")," 时的参数的值",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"当 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"defaultCheckedCodes")," 非空时，「恢复默认」的按钮才会被渲染"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"columns")," 一般对应的表格的列配置",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"自定义列对话框只用到了列配置中的三个字段： code, name, children"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"通过 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"style['--action-color']")," 可以调整「全选」、「全不选」的颜色"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"配合 styled-components v3 使用时，需要手动传入 drawerComponent 属性，具体传入方式如下：")),_ref35=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"styled-components 目前的最新版本为 v5，推荐使用最新的版本"));function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"customcolumnsdialog"},_ref3),_ref4,_ref5,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"必传的-props-列表"},"必传的 props 列表"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("table",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("thead",{parentName:"table"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"thead"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null}),"字段"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null}),"类型"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null}),"说明"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tbody",{parentName:"table"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref6),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref7),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"渲染自定列对话框的打开按钮/触发控件")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref8),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref9),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"当前勾选的 code 列表")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref10),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref11),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"勾选 code 列表被改变时的回调函数")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref12),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref13),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"表格的列配置")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref14),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref15),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"自定义列对话框使用的组件")))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"可选的-props-列表"},"可选的 props 列表"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("table",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("thead",{parentName:"table"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"thead"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null}),"字段"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null}),"类型"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null}),"说明"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tbody",{parentName:"table"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref16),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref17),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"默认勾选的 code 列表")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref18),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref19),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"自定义列对话框是否默认可见")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref20),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref21),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"自定义样式")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref22),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref23),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"自定义 CSS 类名")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref24),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref25),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"总是被选中的 字段列表")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref26),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref27),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"透传给 Drawer 组件的 props")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref28),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref29),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"是否展示「全选」按钮")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref30),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref31),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"是否展示「全不选」按钮")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref32),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref33),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"优先使用的 Drawer 组件")))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"使用说明"},"使用说明"),_ref34,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-js"}),"import { Drawer } from '@alifd/next'\n\nconst StyledDrawer = CustomColumnsDialog.makeStyledDrawer(Drawer)\n// 或是 const StyledDrawer = CustomColumnsDialog.makeStyledDrawer(PageDialog)\n\n// 然后将 StyledDrawer 传递给 CustomColumnsDialog 组件：\n<CustomColumnsDialog drawerComponent={StyledDrawer} {...othersProps} />\n\n// 如果你是通过表格操作栏使用自定义列对话框组件，那么要在 feature 中设置 drawerComponent：\nconst features = [ { type: 'custom-columns', drawerComponent: StyledDrawer } ]\n")),_ref35)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"表格功能拓展 / React组件 / 自定义列对话框",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref36=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref36}}),__webpack_exports__.default=componentMeta},function(module,exports,__webpack_require__){var map={"./examples.stories.tsx":850};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=849},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"树状表格",(function(){return 树状表格})),__webpack_require__.d(__webpack_exports__,"树状表格_非受控",(function(){return 树状表格_非受控})),__webpack_require__.d(__webpack_exports__,"表格排序_多列",(function(){return 表格排序_多列})),__webpack_require__.d(__webpack_exports__,"表格排序_多列_非受控",(function(){return 表格排序_多列_非受控})),__webpack_require__.d(__webpack_exports__,"表格排序_单列",(function(){return 表格排序_单列})),__webpack_require__.d(__webpack_exports__,"表格排序_单列_非受控",(function(){return 表格排序_单列_非受控})),__webpack_require__.d(__webpack_exports__,"表格操作栏",(function(){return 表格操作栏})),__webpack_require__.d(__webpack_exports__,"列高亮",(function(){return 列高亮})),__webpack_require__.d(__webpack_exports__,"列高亮_非受控",(function(){return 列高亮_非受控})),__webpack_require__.d(__webpack_exports__,"列的范围高亮",(function(){return 列的范围高亮})),__webpack_require__.d(__webpack_exports__,"列的范围高亮_非受控",(function(){return 列的范围高亮_非受控})),__webpack_require__.d(__webpack_exports__,"列气泡提示",(function(){return 列气泡提示})),__webpack_require__.d(__webpack_exports__,"树状模式与层级排序",(function(){return 树状模式与层级排序})),__webpack_require__.d(__webpack_exports__,"自定义列对话框组件",(function(){return 自定义列对话框组件})),__webpack_require__.d(__webpack_exports__,"单元格自动合并",(function(){return 单元格自动合并})),__webpack_require__.d(__webpack_exports__,"自定义样式的排序表头",(function(){return 自定义样式的排序表头})),__webpack_require__.d(__webpack_exports__,"拖拽调整列宽",(function(){return 拖拽调整列宽}));var _alifd_next__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(87),_alifd_next__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(96),_alifd_next__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(24),_carbon_icons_react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(53),ali_react_table__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(32),ali_react_table__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(219),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(61),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(50),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(127),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(173),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(511),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(68),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(146),react__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_13___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_13__),react_json_view__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(149),react_json_view__WEBPACK_IMPORTED_MODULE_14___default=__webpack_require__.n(react_json_view__WEBPACK_IMPORTED_MODULE_14__),_assets_cdn_data__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__(63),_assets_format__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(17),_assets_fusion_style__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__(66),_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__=__webpack_require__(19);__webpack_exports__.default={title:"表格功能拓展 / 功能拓展示例",parameters:{storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import * as fusion from '@alifd/next'\\nimport { Balloon, Button } from '@alifd/next'\\nimport { EarthFilled16, Row16, ThumbsDown16, ThumbsUp16 } from '@carbon/icons-react'\\nimport { ArtColumn, BaseTable, collectNodes } from 'ali-react-table'\\nimport {\\n  applyTransforms,\\n  commonTransforms,\\n  CustomColumnsDialog,\\n  exportTableAsExcel,\\n  proto,\\n  SortItem,\\n  useColumnHoverRangeTransform,\\n  useColumnHoverTransform,\\n  useOperationBar,\\n  useSortTransform,\\n  useTreeModeTransform,\\n} from 'ali-react-table/biz'\\nimport React, { useEffect, useState } from 'react'\\nimport ReactJson from 'react-json-view'\\nimport { getAppTrafficData } from '../../assets/cdn-data'\\nimport { amount, ratio, time } from '../../assets/format'\\nimport { FusionStyles } from '../../assets/fusion-style'\\nimport { cols, testProvColumns, useCityDataSource, useProvinceDataSource } from '../../assets/ncov19-assets'\\n\\nexport default {\\n  title: '表格功能拓展 / 功能拓展示例',\\n  parameters: {\\n    docs: {\\n      page() {\\n        return (\\n          <div\\n            style={{\\n              margin: 'auto',\\n              background: 'rgba(0, 0, 0, 0.03)',\\n              borderRadius: 10,\\n              padding: 30,\\n            }}\\n          >\\n            示例过多，docs page 已在此处禁用，请在页面上方切换到「Canvas」模式\\n          </div>\\n        )\\n      },\\n    },\\n  },\\n}\\n\\nexport function 树状表格() {\\n  const columns: ArtColumn[] = [\\n    {\\n      code: 'name',\\n      name: '数据维度',\\n      lock: true,\\n      width: 200,\\n      // 通过自定义 getValue，可以实现「根据节点深度选取合适的数据字段」\\n      // getValue(record: any) {\\n      //   const meta = record[commonTransforms.treeMetaSymbol]\\n      //   const array = [record.subsidiary_name, record.city_name, record.shop_name]\\n      //   return array[meta.depth]\\n      // },\\n    },\\n    { code: 'shop_name', name: '门店' },\\n    { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio, align: 'right' },\\n    { code: 'app_qty_pbt', name: 'APP件单价', align: 'right' },\\n    { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总', align: 'right' },\\n  ]\\n\\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\\n\\n  useEffect(() => {\\n    getAppTrafficData().then((data) => {\\n      setState({ isLoading: false, data })\\n    })\\n  }, [])\\n\\n  const [openKeys, onChangeOpenKeys] = useState(['B2C'])\\n\\n  // 注意 renderData 要用起来\\n  const renderData = applyTransforms(\\n    { columns: columns, dataSource: state.data },\\n\\n    // 从平铺的数据中，根据 id/parent_id 字段构建出树状结构\\n    commonTransforms.buildTree('id', 'parent_id'),\\n\\n    commonTransforms.treeMode({ primaryKey: 'id', openKeys, onChangeOpenKeys }),\\n  )\\n\\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\\n}\\n\\nexport function 树状表格_非受控() {\\n  const columns: ArtColumn[] = [\\n    { code: 'name', name: '数据维度', lock: true, width: 200 },\\n    { code: 'shop_name', name: '门店' },\\n    { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio, align: 'right' },\\n    { code: 'app_qty_pbt', name: 'APP件单价', align: 'right' },\\n    { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总', align: 'right' },\\n  ]\\n\\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\\n\\n  useEffect(() => {\\n    getAppTrafficData().then((data) => {\\n      setState({ isLoading: false, data })\\n    })\\n  }, [])\\n\\n  const treeModeTransform = useTreeModeTransform({ primaryKey: 'id', defaultOpenKeys: ['B2C'] })\\n\\n  const renderData = applyTransforms(\\n    { columns: columns, dataSource: state.data },\\n    commonTransforms.buildTree('id', 'parent_id'),\\n    treeModeTransform,\\n  )\\n\\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\\n}\\n\\nexport function 表格排序_多列() {\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n\\n  const columns: ArtColumn[] = [\\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\\n  ]\\n\\n  const [sorts, onChangeSorts] = useState<SortItem[]>([\\n    { code: 'deadCount', order: 'asc' },\\n    { code: 'confirmedCount', order: 'desc' },\\n  ])\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource },\\n    commonTransforms.sort({\\n      sorts,\\n      onChangeSorts,\\n    }),\\n  )\\n\\n  return (\\n    <div>\\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\\n        <div style={{ marginLeft: 8 }}>点击表头的排序图标对表格数据进行排序</div>\\n        <button style={{ marginLeft: 16 }} onClick={() => onChangeSorts([])}>\\n          清除排序\\n        </button>\\n      </div>\\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\\n    </div>\\n  )\\n}\\n\\nexport function 表格排序_多列_非受控() {\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n\\n  const columns: ArtColumn[] = [\\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\\n  ]\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource },\\n    useSortTransform({\\n      defaultSorts: [\\n        { code: 'deadCount', order: 'asc' },\\n        { code: 'confirmedCount', order: 'desc' },\\n      ],\\n    }),\\n  )\\n\\n  return (\\n    <div>\\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\\n        <div style={{ marginLeft: 8 }}>点击表头的排序图标对表格数据进行排序</div>\\n        <button style={{ marginLeft: 16 }} disabled>\\n          非受控模式下无法清除排序\\n        </button>\\n      </div>\\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\\n    </div>\\n  )\\n}\\n\\nexport function 表格排序_单列() {\\n  const { isLoading, dataSource: data } = useProvinceDataSource()\\n\\n  const columns: ArtColumn[] = [\\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\\n  ]\\n\\n  const [sorts, onChangeSorts] = useState<SortItem[]>([{ code: 'deadCount', order: 'desc' }])\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource: data.slice(0, 5) },\\n    commonTransforms.sort({\\n      sorts,\\n      onChangeSorts,\\n      mode: 'single', // 改为 multiple 可以使用多列排序\\n    }),\\n  )\\n\\n  return (\\n    <div>\\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\\n        <div style={{ marginLeft: 8 }}>点击表头的排序图标对表格数据进行排序</div>\\n      </div>\\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\\n    </div>\\n  )\\n}\\n\\nexport function 表格排序_单列_非受控() {\\n  const { isLoading, dataSource: data } = useProvinceDataSource()\\n\\n  const columns: ArtColumn[] = [\\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\\n  ]\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource: data.slice(0, 5) },\\n    useSortTransform({\\n      mode: 'single',\\n      defaultSorts: [{ code: 'deadCount', order: 'desc' }],\\n    }),\\n  )\\n\\n  return (\\n    <div>\\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\\n        <div style={{ marginLeft: 8 }}>点击表头的排序图标对表格数据进行排序</div>\\n      </div>\\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\\n    </div>\\n  )\\n}\\n\\nexport function 表格操作栏() {\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n\\n  const columns = testProvColumns.map((col, i) => ({\\n    ...col,\\n    features: {\\n      enforceVisible: i === 0,\\n      defaultVisible: true,\\n    },\\n  }))\\n\\n  const operationBar = useOperationBar({\\n    features: [\\n      { type: 'custom', node: '自定义文本' },\\n      {\\n        type: 'click',\\n        title: (\\n          <>\\n            <EarthFilled16 style={{ fill: 'currentColor', marginRight: 2 }} />\\n            自定义点击区域\\n          </>\\n        ),\\n      },\\n      { type: 'separator' },\\n      {\\n        type: 'export',\\n        onExport() {\\n          exportTableAsExcel(require('xlsx'), dataSource, columns, 'export.xlsx')\\n        },\\n      },\\n      { type: 'custom-columns' },\\n    ],\\n    columns,\\n    components: fusion,\\n    actionColor: '#5e85f7',\\n  })\\n\\n  const renderData = applyTransforms({ columns, dataSource }, ...operationBar.transforms)\\n\\n  return (\\n    <div>\\n      <FusionStyles />\\n      <operationBar.view>{operationBar.nodes}</operationBar.view>\\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\\n    </div>\\n  )\\n}\\n\\nexport function 列高亮() {\\n  const { isLoading, dataSource: data } = useProvinceDataSource()\\n\\n  const [hoverColIndex, onChangeHoverColIndex] = useState(-1)\\n\\n  const renderData = applyTransforms(\\n    { columns: testProvColumns, dataSource: data.slice(0, 5) },\\n    commonTransforms.columnHover({\\n      hoverColIndex,\\n      onChangeHoverColIndex,\\n    }),\\n  )\\n\\n  return <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\\n}\\n\\nexport function 列高亮_非受控() {\\n  const { isLoading, dataSource: data } = useProvinceDataSource()\\n\\n  const renderData = applyTransforms(\\n    { columns: testProvColumns, dataSource: data.slice(0, 5) },\\n    useColumnHoverTransform(),\\n  )\\n\\n  return <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\\n}\\n\\nexport function 列的范围高亮() {\\n  const appIndProto = proto.array<ArtColumn>({ align: 'right' })\\n  const rateIndProto = proto.array<ArtColumn>({ align: 'right', render: ratio })\\n\\n  // 列配置\\n  const columns: ArtColumn[] = [\\n    {\\n      name: '维度',\\n      children: [\\n        {\\n          name: '商品信息',\\n          children: [\\n            { code: 'sku_code', name: 'SKU code' },\\n            { code: 'sku_name', name: 'SKU名称' },\\n          ],\\n        },\\n        {\\n          name: '机构信息',\\n          children: [\\n            { code: 'city_name', name: '城市' },\\n            { code: 'shop_name', name: '门店', features: { defaultVisible: true } },\\n          ],\\n        },\\n        {\\n          name: '类目信息',\\n          children: [\\n            { code: 'merge_cate_level1_name', name: '一级类目' },\\n            { code: 'merge_cate_level2_name', name: '二级类目' },\\n            { code: 'merge_cate_level3_name', name: '三级类目' },\\n          ],\\n        },\\n      ],\\n    },\\n    {\\n      name: '指标',\\n      children: [\\n        {\\n          name: 'APP指标',\\n          children: appIndProto([\\n            { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio },\\n            { code: 'app_trd_amt_1d', name: 'APP成交金额', render: amount },\\n            { code: 'app_qty_pbt', name: 'APP件单价' },\\n            { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总' },\\n            { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数' },\\n            { code: 'appout_shop_num', name: '缺货门店数', render: amount },\\n            { code: 'all_time_len', name: '店均缺货时长', render: amount },\\n            { code: 'bad_rmk_rate', name: '订单差评率', render: ratio },\\n          ]),\\n        },\\n        {\\n          name: '转换率',\\n          children: rateIndProto([\\n            { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率' },\\n            { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率' },\\n            { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率' },\\n            { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率' },\\n            { code: 'my_page_imp2pay_rate', name: '我的曝光至成交转化率' },\\n            { code: 'pq_act_imp2pay_rate', name: '活动页曝光至成交转化率' },\\n            { code: 'other_imp2pay_rate', name: '其他曝光至成交转化率' },\\n          ]),\\n        },\\n      ],\\n    },\\n  ]\\n\\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\\n\\n  useEffect(() => {\\n    getAppTrafficData().then((data) => {\\n      setState({ isLoading: false, data: data.slice(0, 8) })\\n    })\\n  }, [])\\n\\n  const [hoverRange, onChangeHoverRange] = useState({ start: 0, end: 0 })\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource: state.data },\\n    commonTransforms.columnRangeHover({\\n      hoverRange,\\n      onChangeHoverRange,\\n    }),\\n  )\\n\\n  return (\\n    <BaseTable\\n      defaultColumnWidth={120}\\n      dataSource={renderData.dataSource}\\n      columns={renderData.columns}\\n      isLoading={state.isLoading}\\n    />\\n  )\\n}\\n\\nexport function 列的范围高亮_非受控() {\\n  const appIndProto = proto.array<ArtColumn>({ align: 'right' })\\n  const rateIndProto = proto.array<ArtColumn>({ align: 'right', render: ratio })\\n\\n  // 列配置\\n  const columns: ArtColumn[] = [\\n    {\\n      name: '维度',\\n      children: [\\n        {\\n          name: '商品信息',\\n          children: [\\n            { code: 'sku_code', name: 'SKU code' },\\n            { code: 'sku_name', name: 'SKU名称' },\\n          ],\\n        },\\n        {\\n          name: '机构信息',\\n          children: [\\n            { code: 'city_name', name: '城市' },\\n            { code: 'shop_name', name: '门店', features: { defaultVisible: true } },\\n          ],\\n        },\\n        {\\n          name: '类目信息',\\n          children: [\\n            { code: 'merge_cate_level1_name', name: '一级类目' },\\n            { code: 'merge_cate_level2_name', name: '二级类目' },\\n            { code: 'merge_cate_level3_name', name: '三级类目' },\\n          ],\\n        },\\n      ],\\n    },\\n    {\\n      name: '指标',\\n      children: [\\n        {\\n          name: 'APP指标',\\n          children: appIndProto([\\n            { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio },\\n            { code: 'app_trd_amt_1d', name: 'APP成交金额', render: amount },\\n            { code: 'app_qty_pbt', name: 'APP件单价' },\\n            { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总' },\\n            { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数' },\\n            { code: 'appout_shop_num', name: '缺货门店数', render: amount },\\n            { code: 'all_time_len', name: '店均缺货时长', render: amount },\\n            { code: 'bad_rmk_rate', name: '订单差评率', render: ratio },\\n          ]),\\n        },\\n        {\\n          name: '转换率',\\n          children: rateIndProto([\\n            { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率' },\\n            { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率' },\\n            { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率' },\\n            { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率' },\\n            { code: 'my_page_imp2pay_rate', name: '我的曝光至成交转化率' },\\n            { code: 'pq_act_imp2pay_rate', name: '活动页曝光至成交转化率' },\\n            { code: 'other_imp2pay_rate', name: '其他曝光至成交转化率' },\\n          ]),\\n        },\\n      ],\\n    },\\n  ]\\n\\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\\n\\n  useEffect(() => {\\n    getAppTrafficData().then((data) => {\\n      setState({ isLoading: false, data: data.slice(0, 8) })\\n    })\\n  }, [])\\n\\n  const renderData = applyTransforms({ columns, dataSource: state.data }, useColumnHoverRangeTransform())\\n\\n  return (\\n    <BaseTable\\n      defaultColumnWidth={120}\\n      dataSource={renderData.dataSource}\\n      columns={renderData.columns}\\n      isLoading={state.isLoading}\\n    />\\n  )\\n}\\n\\nexport function 列气泡提示() {\\n  const { isLoading, dataSource: data } = useProvinceDataSource()\\n\\n  const [sorts, onChangeSorts] = useState<SortItem[]>([])\\n\\n  const columns: ArtColumn[] = [\\n    {\\n      code: 'provinceName',\\n      name: '省份',\\n      features: {\\n        tips:\\n          '省份，即我国的省级行政区，是行政地位与省相同行政区的总称，为一级行政区，包括省、自治区、直辖市、特别行政区。' +\\n          '中国共计34个省级行政区，包括23个省、5个自治区、4个直辖市、2个特别行政区。',\\n      },\\n    },\\n    {\\n      code: 'curedCount',\\n      name: '治愈',\\n      render: amount,\\n      align: 'right',\\n      features: {\\n        sortable: true,\\n        tips: (\\n          <div>\\n            治愈是汉字词语，英文cure; heal，注音zhì yù，使恢复健康。如：在骨折完全治愈之前不要上班。\\n            治愈指动漫中温暖人心，净化心灵，悲伤时看能得到安慰，治愈自己心灵中的创伤、修补自己心灵上缺陷的作品。\\n            也可以指动漫中人物，拥有对主角内心抚慰、平复内心创伤的能力。可以分为行动上和语言上的。\\n          </div>\\n        ),\\n      },\\n    },\\n    {\\n      code: 'updateTime',\\n      name: '最后更新时间',\\n      render: time,\\n      features: {\\n        tips: (\\n          <div>\\n            时间，是物质的运动、变化的持续性、顺序性的表现，包含时刻和时段两个概念。\\n            时间是人类用以描述物质运动过程或事件发生过程的一个参数，确定时间，是靠不受外界影响的物质周期变化的规律。以地球自转为基础的时间计量系统称为世界时系统。日、月、年、世纪的时间计量属天文学中的历法范畴。\\n            以地球自转运动为基础的时间单位称为“日”，以月球绕地球公转运动为基础的时间单位称为“月”，以地球绕太阳公转运动为基础的时间单位称为“年”。\\n          </div>\\n        ),\\n      },\\n    },\\n  ]\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource: data.slice(0, 3) },\\n    commonTransforms.sort({ mode: 'single', sorts, onChangeSorts }),\\n    commonTransforms.tips({ Balloon }),\\n  )\\n\\n  return (\\n    <div>\\n      <FusionStyles />\\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource.slice(0, 10)} columns={renderData.columns} />\\n    </div>\\n  )\\n}\\n\\nexport function 树状模式与层级排序() {\\n  const columns: ArtColumn[] = [\\n    { code: 'name', name: '数据维度', lock: true, width: 200 },\\n    { code: 'shop_name', name: '门店', features: { sortable: true } },\\n    { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio, align: 'right', features: { sortable: true } },\\n    { code: 'app_qty_pbt', name: 'APP件单价', align: 'right', features: { sortable: true } },\\n    { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总', align: 'right', features: { sortable: true } },\\n  ]\\n\\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\\n\\n  useEffect(() => {\\n    getAppTrafficData().then((data) => {\\n      setState({ isLoading: false, data })\\n    })\\n  }, [])\\n\\n  const [openKeys, onChangeOpenKeys] = useState(['B2C'])\\n  const [sorts, onChangeSorts] = useState<SortItem[]>([])\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource: state.data },\\n    // 从平铺的数据中，根据 id/parent_id 字段构建出树状结构\\n    commonTransforms.buildTree('id', 'parent_id'),\\n    commonTransforms.sort({\\n      sorts,\\n      onChangeSorts,\\n      mode: 'single', // 改为 multiple 可以使用多列排序\\n    }),\\n    commonTransforms.treeMode({ primaryKey: 'id', openKeys, onChangeOpenKeys, indentSize: 20 }),\\n  )\\n\\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\\n}\\n\\nexport function 自定义列对话框组件() {\\n  const defaultVisibleIndProto = proto.array<ArtColumn>({\\n    features: { defaultVisible: true },\\n  })\\n\\n  const defaultHiddenIntProto = proto.array<ArtColumn>({\\n    features: { defaultVisible: false },\\n  })\\n\\n  // 列配置\\n  const columns: ArtColumn[] = [\\n    {\\n      name: '商品信息',\\n      children: defaultVisibleIndProto([\\n        { code: 'order', name: '序号', features: { enforceVisible: true } },\\n        { code: 'sku_code', name: 'SKU code' },\\n        { code: 'sku_name', name: 'SKU名称' },\\n      ]),\\n    },\\n    {\\n      name: '机构信息',\\n      children: defaultHiddenIntProto([\\n        { code: 'city_name', name: '城市' },\\n        { code: 'shop_name', name: '门店' },\\n      ]),\\n    },\\n    {\\n      name: '类目信息',\\n      children: defaultVisibleIndProto([\\n        { code: 'merge_cate_level1_name', name: '一级类目' },\\n        { code: 'merge_cate_level2_name', name: '二级类目' },\\n        { code: 'merge_cate_level3_name', name: '三级类目' },\\n      ]),\\n    },\\n    {\\n      name: 'APP指标',\\n      children: defaultVisibleIndProto([\\n        { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例' },\\n        { code: 'app_trd_amt_1d', name: 'APP成交金额' },\\n        { code: 'app_qty_pbt', name: 'APP件单价' },\\n        { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总' },\\n        { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数' },\\n        { code: 'appout_shop_num', name: '缺货门店数' },\\n        { code: 'all_time_len', name: '店均缺货时长' },\\n        { code: 'bad_rmk_rate', name: '订单差评率' },\\n      ]),\\n    },\\n    {\\n      name: '转换率',\\n      children: defaultHiddenIntProto([\\n        { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率' },\\n        { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率' },\\n        { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率' },\\n        { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率' },\\n        { code: 'my_page_imp2pay_rate', name: '我的曝光至成交转化率' },\\n        { code: 'pq_act_imp2pay_rate', name: '活动页曝光至成交转化率' },\\n        { code: 'other_imp2pay_rate', name: '其他曝光至成交转化率' },\\n      ]),\\n    },\\n  ]\\n\\n  const leafColumns = collectNodes(columns, 'leaf-only')\\n\\n  const defaultCheckedCodes = leafColumns.filter((col) => col.features?.defaultVisible).map((col) => col.code)\\n  const enforceCheckedCodes = leafColumns.filter((col) => col.features?.enforceVisible).map((col) => col.code)\\n\\n  const [checkedCodes, onChangeCheckedCodes] = useState(defaultCheckedCodes)\\n\\n  return (\\n    <>\\n      <CustomColumnsDialog\\n        components={fusion}\\n        columns={columns}\\n        checkedCodes={checkedCodes}\\n        defaultCheckedCodes={defaultCheckedCodes}\\n        enforceCheckedCodes={enforceCheckedCodes}\\n        trigger={(onOpen) => (\\n          <Button size=\\\"large\\\" type=\\\"primary\\\" onClick={onOpen}>\\n            打开自定义列对话框\\n          </Button>\\n        )}\\n        onChangeCheckedCodes={(nextCodes) => {\\n          console.log('自定义列对话框组件 onChangeCheckedCodes:', nextCodes)\\n          onChangeCheckedCodes(nextCodes)\\n        }}\\n      />\\n      <ReactJson\\n        style={{ marginTop: 12 }}\\n        src={columns.map((group) => ({\\n          ...group,\\n          children: group.children.map((col) => JSON.stringify(col, null, 1)),\\n        }))}\\n        name=\\\"对应的列配置：\\\"\\n        collapsed={0}\\n        enableClipboard={false}\\n        displayDataTypes={false}\\n        displayObjectSize={false}\\n      />\\n      <FusionStyles />\\n    </>\\n  )\\n}\\n\\nexport function 单元格自动合并() {\\n  const { dataSource: cityData, isLoading } = useCityDataSource()\\n\\n  const renderData = applyTransforms(\\n    {\\n      dataSource: cityData.slice(0, 4).flatMap((d) => d.children),\\n      columns: [\\n        {\\n          code: 'provinceName',\\n          name: '省份',\\n          width: 150,\\n          features: { autoRowSpan: true },\\n        },\\n        cols.cityName,\\n        ...cols.indCols,\\n        {\\n          code: 'updateTime',\\n          name: '最后更新时间',\\n          width: 180,\\n          render: time,\\n          features: { autoRowSpan: true },\\n        },\\n      ],\\n    },\\n    commonTransforms.autoRowSpan(),\\n  )\\n\\n  return (\\n    <BaseTable isLoading={isLoading} useOuterBorder dataSource={renderData.dataSource} columns={renderData.columns} />\\n  )\\n}\\n\\nfunction CustomSortHeaderCell({\\n  column,\\n  sortOptions,\\n  sortIndex,\\n  children,\\n  onToggle,\\n  sortOrder,\\n}: commonTransforms.SortHeaderCellProps) {\\n  // 通过 justify-content 来与 col.align 保持对齐方向一致\\n  const justifyContent = column.align === 'right' ? 'flex-end' : column.align === 'center' ? 'center' : 'flex-start'\\n\\n  return (\\n    <div\\n      onClick={onToggle}\\n      style={{\\n        display: 'flex',\\n        justifyContent,\\n        cursor: 'pointer',\\n      }}\\n    >\\n      {/* 别忘记渲染原来的表头内容 */}\\n      {children}\\n\\n      <span style={{ marginLeft: 4 }}>\\n        {sortOrder === 'none' && <Row16 />}\\n        {sortOrder === 'asc' && <ThumbsUp16 />}\\n        {sortOrder === 'desc' && <ThumbsDown16 />}\\n      </span>\\n\\n      {sortOptions.mode === 'multiple' && sortOrder !== 'none' && (\\n        <span style={{ marginLeft: 4 }}>{sortIndex + 1}</span>\\n      )}\\n    </div>\\n  )\\n}\\n\\nexport function 自定义样式的排序表头() {\\n  const { isLoading, dataSource: data } = useProvinceDataSource()\\n\\n  const columns: ArtColumn[] = [\\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\\n  ]\\n\\n  const [sorts, onChangeSorts] = useState<SortItem[]>([{ code: 'confirmedCount', order: 'desc' }])\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource: data.slice(0, 5) },\\n    commonTransforms.sort({\\n      sorts,\\n      onChangeSorts,\\n      SortHeaderCell: CustomSortHeaderCell,\\n    }),\\n  )\\n\\n  return (\\n    <div>\\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\\n        <div style={{ marginLeft: 8 }}>通过示例 options.SortHeaderCell 可以自定义排序表头的样式/内容</div>\\n        <button style={{ marginLeft: 16 }} onClick={() => onChangeSorts([])}>\\n          清除排序\\n        </button>\\n      </div>\\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\\n    </div>\\n  )\\n}\\n\\nexport function 拖拽调整列宽() {\\n  const { isLoading, dataSource: data } = useProvinceDataSource()\\n\\n  const columns: ArtColumn[] = [cols.provinceName, ...cols.indCols, cols.updateTime]\\n\\n  const defaultColumnWidth = 120\\n  // 注意 columns 可能是嵌套的结构，这里使用 collectNodes 来获取所有叶子节点\\n  // 同时注意部分列的 width 可能为空，此时可以用 defaultColumnWidth 作为列的宽度\\n  const defaultSizes = collectNodes(columns, 'leaf-only').map((col) => col.width ?? defaultColumnWidth)\\n  const [sizes, onChangeSizes] = useState(defaultSizes)\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource: data.slice(0, 5) },\\n    commonTransforms.columnResize({\\n      sizes,\\n      onChangeSizes,\\n      appendExpander: true,\\n      disableUserSelectWhenResizing: true,\\n      minSize: 60,\\n      maxSize: 500,\\n    }),\\n  )\\n\\n  return (\\n    <div>\\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\\n        <div style={{ marginLeft: 8 }}>拖拽调整列宽</div>\\n      </div>\\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\\n    </div>\\n  )\\n}\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"表格功能拓展-功能拓展示例--树状表格\":{\"startLoc\":{\"col\":7,\"line\":47},\"endLoc\":{\"col\":1,\"line\":88},\"startBody\":{\"col\":7,\"line\":47},\"endBody\":{\"col\":1,\"line\":88}},\"表格功能拓展-功能拓展示例--树状表格-非受控\":{\"startLoc\":{\"col\":7,\"line\":90},\"endLoc\":{\"col\":1,\"line\":116},\"startBody\":{\"col\":7,\"line\":90},\"endBody\":{\"col\":1,\"line\":116}},\"表格功能拓展-功能拓展示例--表格排序-多列\":{\"startLoc\":{\"col\":7,\"line\":118},\"endLoc\":{\"col\":1,\"line\":153},\"startBody\":{\"col\":7,\"line\":118},\"endBody\":{\"col\":1,\"line\":153}},\"表格功能拓展-功能拓展示例--表格排序-多列-非受控\":{\"startLoc\":{\"col\":7,\"line\":155},\"endLoc\":{\"col\":1,\"line\":187},\"startBody\":{\"col\":7,\"line\":155},\"endBody\":{\"col\":1,\"line\":187}},\"表格功能拓展-功能拓展示例--表格排序-单列\":{\"startLoc\":{\"col\":7,\"line\":189},\"endLoc\":{\"col\":1,\"line\":219},\"startBody\":{\"col\":7,\"line\":189},\"endBody\":{\"col\":1,\"line\":219}},\"表格功能拓展-功能拓展示例--表格排序-单列-非受控\":{\"startLoc\":{\"col\":7,\"line\":221},\"endLoc\":{\"col\":1,\"line\":248},\"startBody\":{\"col\":7,\"line\":221},\"endBody\":{\"col\":1,\"line\":248}},\"表格功能拓展-功能拓展示例--表格操作栏\":{\"startLoc\":{\"col\":7,\"line\":250},\"endLoc\":{\"col\":1,\"line\":296},\"startBody\":{\"col\":7,\"line\":250},\"endBody\":{\"col\":1,\"line\":296}},\"表格功能拓展-功能拓展示例--列高亮\":{\"startLoc\":{\"col\":7,\"line\":298},\"endLoc\":{\"col\":1,\"line\":312},\"startBody\":{\"col\":7,\"line\":298},\"endBody\":{\"col\":1,\"line\":312}},\"表格功能拓展-功能拓展示例--列高亮-非受控\":{\"startLoc\":{\"col\":7,\"line\":314},\"endLoc\":{\"col\":1,\"line\":323},\"startBody\":{\"col\":7,\"line\":314},\"endBody\":{\"col\":1,\"line\":323}},\"表格功能拓展-功能拓展示例--列的范围高亮\":{\"startLoc\":{\"col\":7,\"line\":325},\"endLoc\":{\"col\":1,\"line\":416},\"startBody\":{\"col\":7,\"line\":325},\"endBody\":{\"col\":1,\"line\":416}},\"表格功能拓展-功能拓展示例--列的范围高亮-非受控\":{\"startLoc\":{\"col\":7,\"line\":418},\"endLoc\":{\"col\":1,\"line\":501},\"startBody\":{\"col\":7,\"line\":418},\"endBody\":{\"col\":1,\"line\":501}},\"表格功能拓展-功能拓展示例--列气泡提示\":{\"startLoc\":{\"col\":7,\"line\":503},\"endLoc\":{\"col\":1,\"line\":562},\"startBody\":{\"col\":7,\"line\":503},\"endBody\":{\"col\":1,\"line\":562}},\"表格功能拓展-功能拓展示例--树状模式与层级排序\":{\"startLoc\":{\"col\":7,\"line\":564},\"endLoc\":{\"col\":1,\"line\":597},\"startBody\":{\"col\":7,\"line\":564},\"endBody\":{\"col\":1,\"line\":597}},\"表格功能拓展-功能拓展示例--自定义列对话框组件\":{\"startLoc\":{\"col\":7,\"line\":599},\"endLoc\":{\"col\":1,\"line\":700},\"startBody\":{\"col\":7,\"line\":599},\"endBody\":{\"col\":1,\"line\":700}},\"表格功能拓展-功能拓展示例--单元格自动合并\":{\"startLoc\":{\"col\":7,\"line\":702},\"endLoc\":{\"col\":1,\"line\":732},\"startBody\":{\"col\":7,\"line\":702},\"endBody\":{\"col\":1,\"line\":732}},\"表格功能拓展-功能拓展示例--自定义样式的排序表头\":{\"startLoc\":{\"col\":7,\"line\":770},\"endLoc\":{\"col\":1,\"line\":803},\"startBody\":{\"col\":7,\"line\":770},\"endBody\":{\"col\":1,\"line\":803}},\"表格功能拓展-功能拓展示例--拖拽调整列宽\":{\"startLoc\":{\"col\":7,\"line\":805},\"endLoc\":{\"col\":1,\"line\":836},\"startBody\":{\"col\":7,\"line\":805},\"endBody\":{\"col\":1,\"line\":836}}};\n    \nimport * as fusion from '@alifd/next'\nimport { Balloon, Button } from '@alifd/next'\nimport { EarthFilled16, Row16, ThumbsDown16, ThumbsUp16 } from '@carbon/icons-react'\nimport { ArtColumn, BaseTable, collectNodes } from 'ali-react-table'\nimport {\n  applyTransforms,\n  commonTransforms,\n  CustomColumnsDialog,\n  exportTableAsExcel,\n  proto,\n  SortItem,\n  useColumnHoverRangeTransform,\n  useColumnHoverTransform,\n  useOperationBar,\n  useSortTransform,\n  useTreeModeTransform,\n} from 'ali-react-table/biz'\nimport React, { useEffect, useState } from 'react'\nimport ReactJson from 'react-json-view'\nimport { getAppTrafficData } from '../../assets/cdn-data'\nimport { amount, ratio, time } from '../../assets/format'\nimport { FusionStyles } from '../../assets/fusion-style'\nimport { cols, testProvColumns, useCityDataSource, useProvinceDataSource } from '../../assets/ncov19-assets'\n\nexport default {\n  title: '表格功能拓展 / 功能拓展示例',\n  parameters: {\"storySource\":{\"source\":\"import * as fusion from '@alifd/next'\\nimport { Balloon, Button } from '@alifd/next'\\nimport { EarthFilled16, Row16, ThumbsDown16, ThumbsUp16 } from '@carbon/icons-react'\\nimport { ArtColumn, BaseTable, collectNodes } from 'ali-react-table'\\nimport {\\n  applyTransforms,\\n  commonTransforms,\\n  CustomColumnsDialog,\\n  exportTableAsExcel,\\n  proto,\\n  SortItem,\\n  useColumnHoverRangeTransform,\\n  useColumnHoverTransform,\\n  useOperationBar,\\n  useSortTransform,\\n  useTreeModeTransform,\\n} from 'ali-react-table/biz'\\nimport React, { useEffect, useState } from 'react'\\nimport ReactJson from 'react-json-view'\\nimport { getAppTrafficData } from '../../assets/cdn-data'\\nimport { amount, ratio, time } from '../../assets/format'\\nimport { FusionStyles } from '../../assets/fusion-style'\\nimport { cols, testProvColumns, useCityDataSource, useProvinceDataSource } from '../../assets/ncov19-assets'\\n\\nexport default {\\n  title: '表格功能拓展 / 功能拓展示例',\\n  parameters: {\\n    docs: {\\n      page() {\\n        return (\\n          <div\\n            style={{\\n              margin: 'auto',\\n              background: 'rgba(0, 0, 0, 0.03)',\\n              borderRadius: 10,\\n              padding: 30,\\n            }}\\n          >\\n            示例过多，docs page 已在此处禁用，请在页面上方切换到「Canvas」模式\\n          </div>\\n        )\\n      },\\n    },\\n  },\\n}\\n\\nexport function 树状表格() {\\n  const columns: ArtColumn[] = [\\n    {\\n      code: 'name',\\n      name: '数据维度',\\n      lock: true,\\n      width: 200,\\n      // 通过自定义 getValue，可以实现「根据节点深度选取合适的数据字段」\\n      // getValue(record: any) {\\n      //   const meta = record[commonTransforms.treeMetaSymbol]\\n      //   const array = [record.subsidiary_name, record.city_name, record.shop_name]\\n      //   return array[meta.depth]\\n      // },\\n    },\\n    { code: 'shop_name', name: '门店' },\\n    { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio, align: 'right' },\\n    { code: 'app_qty_pbt', name: 'APP件单价', align: 'right' },\\n    { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总', align: 'right' },\\n  ]\\n\\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\\n\\n  useEffect(() => {\\n    getAppTrafficData().then((data) => {\\n      setState({ isLoading: false, data })\\n    })\\n  }, [])\\n\\n  const [openKeys, onChangeOpenKeys] = useState(['B2C'])\\n\\n  // 注意 renderData 要用起来\\n  const renderData = applyTransforms(\\n    { columns: columns, dataSource: state.data },\\n\\n    // 从平铺的数据中，根据 id/parent_id 字段构建出树状结构\\n    commonTransforms.buildTree('id', 'parent_id'),\\n\\n    commonTransforms.treeMode({ primaryKey: 'id', openKeys, onChangeOpenKeys }),\\n  )\\n\\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\\n}\\n\\nexport function 树状表格_非受控() {\\n  const columns: ArtColumn[] = [\\n    { code: 'name', name: '数据维度', lock: true, width: 200 },\\n    { code: 'shop_name', name: '门店' },\\n    { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio, align: 'right' },\\n    { code: 'app_qty_pbt', name: 'APP件单价', align: 'right' },\\n    { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总', align: 'right' },\\n  ]\\n\\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\\n\\n  useEffect(() => {\\n    getAppTrafficData().then((data) => {\\n      setState({ isLoading: false, data })\\n    })\\n  }, [])\\n\\n  const treeModeTransform = useTreeModeTransform({ primaryKey: 'id', defaultOpenKeys: ['B2C'] })\\n\\n  const renderData = applyTransforms(\\n    { columns: columns, dataSource: state.data },\\n    commonTransforms.buildTree('id', 'parent_id'),\\n    treeModeTransform,\\n  )\\n\\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\\n}\\n\\nexport function 表格排序_多列() {\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n\\n  const columns: ArtColumn[] = [\\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\\n  ]\\n\\n  const [sorts, onChangeSorts] = useState<SortItem[]>([\\n    { code: 'deadCount', order: 'asc' },\\n    { code: 'confirmedCount', order: 'desc' },\\n  ])\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource },\\n    commonTransforms.sort({\\n      sorts,\\n      onChangeSorts,\\n    }),\\n  )\\n\\n  return (\\n    <div>\\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\\n        <div style={{ marginLeft: 8 }}>点击表头的排序图标对表格数据进行排序</div>\\n        <button style={{ marginLeft: 16 }} onClick={() => onChangeSorts([])}>\\n          清除排序\\n        </button>\\n      </div>\\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\\n    </div>\\n  )\\n}\\n\\nexport function 表格排序_多列_非受控() {\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n\\n  const columns: ArtColumn[] = [\\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\\n  ]\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource },\\n    useSortTransform({\\n      defaultSorts: [\\n        { code: 'deadCount', order: 'asc' },\\n        { code: 'confirmedCount', order: 'desc' },\\n      ],\\n    }),\\n  )\\n\\n  return (\\n    <div>\\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\\n        <div style={{ marginLeft: 8 }}>点击表头的排序图标对表格数据进行排序</div>\\n        <button style={{ marginLeft: 16 }} disabled>\\n          非受控模式下无法清除排序\\n        </button>\\n      </div>\\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\\n    </div>\\n  )\\n}\\n\\nexport function 表格排序_单列() {\\n  const { isLoading, dataSource: data } = useProvinceDataSource()\\n\\n  const columns: ArtColumn[] = [\\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\\n  ]\\n\\n  const [sorts, onChangeSorts] = useState<SortItem[]>([{ code: 'deadCount', order: 'desc' }])\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource: data.slice(0, 5) },\\n    commonTransforms.sort({\\n      sorts,\\n      onChangeSorts,\\n      mode: 'single', // 改为 multiple 可以使用多列排序\\n    }),\\n  )\\n\\n  return (\\n    <div>\\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\\n        <div style={{ marginLeft: 8 }}>点击表头的排序图标对表格数据进行排序</div>\\n      </div>\\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\\n    </div>\\n  )\\n}\\n\\nexport function 表格排序_单列_非受控() {\\n  const { isLoading, dataSource: data } = useProvinceDataSource()\\n\\n  const columns: ArtColumn[] = [\\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\\n  ]\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource: data.slice(0, 5) },\\n    useSortTransform({\\n      mode: 'single',\\n      defaultSorts: [{ code: 'deadCount', order: 'desc' }],\\n    }),\\n  )\\n\\n  return (\\n    <div>\\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\\n        <div style={{ marginLeft: 8 }}>点击表头的排序图标对表格数据进行排序</div>\\n      </div>\\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\\n    </div>\\n  )\\n}\\n\\nexport function 表格操作栏() {\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n\\n  const columns = testProvColumns.map((col, i) => ({\\n    ...col,\\n    features: {\\n      enforceVisible: i === 0,\\n      defaultVisible: true,\\n    },\\n  }))\\n\\n  const operationBar = useOperationBar({\\n    features: [\\n      { type: 'custom', node: '自定义文本' },\\n      {\\n        type: 'click',\\n        title: (\\n          <>\\n            <EarthFilled16 style={{ fill: 'currentColor', marginRight: 2 }} />\\n            自定义点击区域\\n          </>\\n        ),\\n      },\\n      { type: 'separator' },\\n      {\\n        type: 'export',\\n        onExport() {\\n          exportTableAsExcel(require('xlsx'), dataSource, columns, 'export.xlsx')\\n        },\\n      },\\n      { type: 'custom-columns' },\\n    ],\\n    columns,\\n    components: fusion,\\n    actionColor: '#5e85f7',\\n  })\\n\\n  const renderData = applyTransforms({ columns, dataSource }, ...operationBar.transforms)\\n\\n  return (\\n    <div>\\n      <FusionStyles />\\n      <operationBar.view>{operationBar.nodes}</operationBar.view>\\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\\n    </div>\\n  )\\n}\\n\\nexport function 列高亮() {\\n  const { isLoading, dataSource: data } = useProvinceDataSource()\\n\\n  const [hoverColIndex, onChangeHoverColIndex] = useState(-1)\\n\\n  const renderData = applyTransforms(\\n    { columns: testProvColumns, dataSource: data.slice(0, 5) },\\n    commonTransforms.columnHover({\\n      hoverColIndex,\\n      onChangeHoverColIndex,\\n    }),\\n  )\\n\\n  return <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\\n}\\n\\nexport function 列高亮_非受控() {\\n  const { isLoading, dataSource: data } = useProvinceDataSource()\\n\\n  const renderData = applyTransforms(\\n    { columns: testProvColumns, dataSource: data.slice(0, 5) },\\n    useColumnHoverTransform(),\\n  )\\n\\n  return <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\\n}\\n\\nexport function 列的范围高亮() {\\n  const appIndProto = proto.array<ArtColumn>({ align: 'right' })\\n  const rateIndProto = proto.array<ArtColumn>({ align: 'right', render: ratio })\\n\\n  // 列配置\\n  const columns: ArtColumn[] = [\\n    {\\n      name: '维度',\\n      children: [\\n        {\\n          name: '商品信息',\\n          children: [\\n            { code: 'sku_code', name: 'SKU code' },\\n            { code: 'sku_name', name: 'SKU名称' },\\n          ],\\n        },\\n        {\\n          name: '机构信息',\\n          children: [\\n            { code: 'city_name', name: '城市' },\\n            { code: 'shop_name', name: '门店', features: { defaultVisible: true } },\\n          ],\\n        },\\n        {\\n          name: '类目信息',\\n          children: [\\n            { code: 'merge_cate_level1_name', name: '一级类目' },\\n            { code: 'merge_cate_level2_name', name: '二级类目' },\\n            { code: 'merge_cate_level3_name', name: '三级类目' },\\n          ],\\n        },\\n      ],\\n    },\\n    {\\n      name: '指标',\\n      children: [\\n        {\\n          name: 'APP指标',\\n          children: appIndProto([\\n            { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio },\\n            { code: 'app_trd_amt_1d', name: 'APP成交金额', render: amount },\\n            { code: 'app_qty_pbt', name: 'APP件单价' },\\n            { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总' },\\n            { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数' },\\n            { code: 'appout_shop_num', name: '缺货门店数', render: amount },\\n            { code: 'all_time_len', name: '店均缺货时长', render: amount },\\n            { code: 'bad_rmk_rate', name: '订单差评率', render: ratio },\\n          ]),\\n        },\\n        {\\n          name: '转换率',\\n          children: rateIndProto([\\n            { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率' },\\n            { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率' },\\n            { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率' },\\n            { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率' },\\n            { code: 'my_page_imp2pay_rate', name: '我的曝光至成交转化率' },\\n            { code: 'pq_act_imp2pay_rate', name: '活动页曝光至成交转化率' },\\n            { code: 'other_imp2pay_rate', name: '其他曝光至成交转化率' },\\n          ]),\\n        },\\n      ],\\n    },\\n  ]\\n\\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\\n\\n  useEffect(() => {\\n    getAppTrafficData().then((data) => {\\n      setState({ isLoading: false, data: data.slice(0, 8) })\\n    })\\n  }, [])\\n\\n  const [hoverRange, onChangeHoverRange] = useState({ start: 0, end: 0 })\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource: state.data },\\n    commonTransforms.columnRangeHover({\\n      hoverRange,\\n      onChangeHoverRange,\\n    }),\\n  )\\n\\n  return (\\n    <BaseTable\\n      defaultColumnWidth={120}\\n      dataSource={renderData.dataSource}\\n      columns={renderData.columns}\\n      isLoading={state.isLoading}\\n    />\\n  )\\n}\\n\\nexport function 列的范围高亮_非受控() {\\n  const appIndProto = proto.array<ArtColumn>({ align: 'right' })\\n  const rateIndProto = proto.array<ArtColumn>({ align: 'right', render: ratio })\\n\\n  // 列配置\\n  const columns: ArtColumn[] = [\\n    {\\n      name: '维度',\\n      children: [\\n        {\\n          name: '商品信息',\\n          children: [\\n            { code: 'sku_code', name: 'SKU code' },\\n            { code: 'sku_name', name: 'SKU名称' },\\n          ],\\n        },\\n        {\\n          name: '机构信息',\\n          children: [\\n            { code: 'city_name', name: '城市' },\\n            { code: 'shop_name', name: '门店', features: { defaultVisible: true } },\\n          ],\\n        },\\n        {\\n          name: '类目信息',\\n          children: [\\n            { code: 'merge_cate_level1_name', name: '一级类目' },\\n            { code: 'merge_cate_level2_name', name: '二级类目' },\\n            { code: 'merge_cate_level3_name', name: '三级类目' },\\n          ],\\n        },\\n      ],\\n    },\\n    {\\n      name: '指标',\\n      children: [\\n        {\\n          name: 'APP指标',\\n          children: appIndProto([\\n            { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio },\\n            { code: 'app_trd_amt_1d', name: 'APP成交金额', render: amount },\\n            { code: 'app_qty_pbt', name: 'APP件单价' },\\n            { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总' },\\n            { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数' },\\n            { code: 'appout_shop_num', name: '缺货门店数', render: amount },\\n            { code: 'all_time_len', name: '店均缺货时长', render: amount },\\n            { code: 'bad_rmk_rate', name: '订单差评率', render: ratio },\\n          ]),\\n        },\\n        {\\n          name: '转换率',\\n          children: rateIndProto([\\n            { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率' },\\n            { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率' },\\n            { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率' },\\n            { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率' },\\n            { code: 'my_page_imp2pay_rate', name: '我的曝光至成交转化率' },\\n            { code: 'pq_act_imp2pay_rate', name: '活动页曝光至成交转化率' },\\n            { code: 'other_imp2pay_rate', name: '其他曝光至成交转化率' },\\n          ]),\\n        },\\n      ],\\n    },\\n  ]\\n\\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\\n\\n  useEffect(() => {\\n    getAppTrafficData().then((data) => {\\n      setState({ isLoading: false, data: data.slice(0, 8) })\\n    })\\n  }, [])\\n\\n  const renderData = applyTransforms({ columns, dataSource: state.data }, useColumnHoverRangeTransform())\\n\\n  return (\\n    <BaseTable\\n      defaultColumnWidth={120}\\n      dataSource={renderData.dataSource}\\n      columns={renderData.columns}\\n      isLoading={state.isLoading}\\n    />\\n  )\\n}\\n\\nexport function 列气泡提示() {\\n  const { isLoading, dataSource: data } = useProvinceDataSource()\\n\\n  const [sorts, onChangeSorts] = useState<SortItem[]>([])\\n\\n  const columns: ArtColumn[] = [\\n    {\\n      code: 'provinceName',\\n      name: '省份',\\n      features: {\\n        tips:\\n          '省份，即我国的省级行政区，是行政地位与省相同行政区的总称，为一级行政区，包括省、自治区、直辖市、特别行政区。' +\\n          '中国共计34个省级行政区，包括23个省、5个自治区、4个直辖市、2个特别行政区。',\\n      },\\n    },\\n    {\\n      code: 'curedCount',\\n      name: '治愈',\\n      render: amount,\\n      align: 'right',\\n      features: {\\n        sortable: true,\\n        tips: (\\n          <div>\\n            治愈是汉字词语，英文cure; heal，注音zhì yù，使恢复健康。如：在骨折完全治愈之前不要上班。\\n            治愈指动漫中温暖人心，净化心灵，悲伤时看能得到安慰，治愈自己心灵中的创伤、修补自己心灵上缺陷的作品。\\n            也可以指动漫中人物，拥有对主角内心抚慰、平复内心创伤的能力。可以分为行动上和语言上的。\\n          </div>\\n        ),\\n      },\\n    },\\n    {\\n      code: 'updateTime',\\n      name: '最后更新时间',\\n      render: time,\\n      features: {\\n        tips: (\\n          <div>\\n            时间，是物质的运动、变化的持续性、顺序性的表现，包含时刻和时段两个概念。\\n            时间是人类用以描述物质运动过程或事件发生过程的一个参数，确定时间，是靠不受外界影响的物质周期变化的规律。以地球自转为基础的时间计量系统称为世界时系统。日、月、年、世纪的时间计量属天文学中的历法范畴。\\n            以地球自转运动为基础的时间单位称为“日”，以月球绕地球公转运动为基础的时间单位称为“月”，以地球绕太阳公转运动为基础的时间单位称为“年”。\\n          </div>\\n        ),\\n      },\\n    },\\n  ]\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource: data.slice(0, 3) },\\n    commonTransforms.sort({ mode: 'single', sorts, onChangeSorts }),\\n    commonTransforms.tips({ Balloon }),\\n  )\\n\\n  return (\\n    <div>\\n      <FusionStyles />\\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource.slice(0, 10)} columns={renderData.columns} />\\n    </div>\\n  )\\n}\\n\\nexport function 树状模式与层级排序() {\\n  const columns: ArtColumn[] = [\\n    { code: 'name', name: '数据维度', lock: true, width: 200 },\\n    { code: 'shop_name', name: '门店', features: { sortable: true } },\\n    { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio, align: 'right', features: { sortable: true } },\\n    { code: 'app_qty_pbt', name: 'APP件单价', align: 'right', features: { sortable: true } },\\n    { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总', align: 'right', features: { sortable: true } },\\n  ]\\n\\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\\n\\n  useEffect(() => {\\n    getAppTrafficData().then((data) => {\\n      setState({ isLoading: false, data })\\n    })\\n  }, [])\\n\\n  const [openKeys, onChangeOpenKeys] = useState(['B2C'])\\n  const [sorts, onChangeSorts] = useState<SortItem[]>([])\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource: state.data },\\n    // 从平铺的数据中，根据 id/parent_id 字段构建出树状结构\\n    commonTransforms.buildTree('id', 'parent_id'),\\n    commonTransforms.sort({\\n      sorts,\\n      onChangeSorts,\\n      mode: 'single', // 改为 multiple 可以使用多列排序\\n    }),\\n    commonTransforms.treeMode({ primaryKey: 'id', openKeys, onChangeOpenKeys, indentSize: 20 }),\\n  )\\n\\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\\n}\\n\\nexport function 自定义列对话框组件() {\\n  const defaultVisibleIndProto = proto.array<ArtColumn>({\\n    features: { defaultVisible: true },\\n  })\\n\\n  const defaultHiddenIntProto = proto.array<ArtColumn>({\\n    features: { defaultVisible: false },\\n  })\\n\\n  // 列配置\\n  const columns: ArtColumn[] = [\\n    {\\n      name: '商品信息',\\n      children: defaultVisibleIndProto([\\n        { code: 'order', name: '序号', features: { enforceVisible: true } },\\n        { code: 'sku_code', name: 'SKU code' },\\n        { code: 'sku_name', name: 'SKU名称' },\\n      ]),\\n    },\\n    {\\n      name: '机构信息',\\n      children: defaultHiddenIntProto([\\n        { code: 'city_name', name: '城市' },\\n        { code: 'shop_name', name: '门店' },\\n      ]),\\n    },\\n    {\\n      name: '类目信息',\\n      children: defaultVisibleIndProto([\\n        { code: 'merge_cate_level1_name', name: '一级类目' },\\n        { code: 'merge_cate_level2_name', name: '二级类目' },\\n        { code: 'merge_cate_level3_name', name: '三级类目' },\\n      ]),\\n    },\\n    {\\n      name: 'APP指标',\\n      children: defaultVisibleIndProto([\\n        { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例' },\\n        { code: 'app_trd_amt_1d', name: 'APP成交金额' },\\n        { code: 'app_qty_pbt', name: 'APP件单价' },\\n        { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总' },\\n        { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数' },\\n        { code: 'appout_shop_num', name: '缺货门店数' },\\n        { code: 'all_time_len', name: '店均缺货时长' },\\n        { code: 'bad_rmk_rate', name: '订单差评率' },\\n      ]),\\n    },\\n    {\\n      name: '转换率',\\n      children: defaultHiddenIntProto([\\n        { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率' },\\n        { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率' },\\n        { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率' },\\n        { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率' },\\n        { code: 'my_page_imp2pay_rate', name: '我的曝光至成交转化率' },\\n        { code: 'pq_act_imp2pay_rate', name: '活动页曝光至成交转化率' },\\n        { code: 'other_imp2pay_rate', name: '其他曝光至成交转化率' },\\n      ]),\\n    },\\n  ]\\n\\n  const leafColumns = collectNodes(columns, 'leaf-only')\\n\\n  const defaultCheckedCodes = leafColumns.filter((col) => col.features?.defaultVisible).map((col) => col.code)\\n  const enforceCheckedCodes = leafColumns.filter((col) => col.features?.enforceVisible).map((col) => col.code)\\n\\n  const [checkedCodes, onChangeCheckedCodes] = useState(defaultCheckedCodes)\\n\\n  return (\\n    <>\\n      <CustomColumnsDialog\\n        components={fusion}\\n        columns={columns}\\n        checkedCodes={checkedCodes}\\n        defaultCheckedCodes={defaultCheckedCodes}\\n        enforceCheckedCodes={enforceCheckedCodes}\\n        trigger={(onOpen) => (\\n          <Button size=\\\"large\\\" type=\\\"primary\\\" onClick={onOpen}>\\n            打开自定义列对话框\\n          </Button>\\n        )}\\n        onChangeCheckedCodes={(nextCodes) => {\\n          console.log('自定义列对话框组件 onChangeCheckedCodes:', nextCodes)\\n          onChangeCheckedCodes(nextCodes)\\n        }}\\n      />\\n      <ReactJson\\n        style={{ marginTop: 12 }}\\n        src={columns.map((group) => ({\\n          ...group,\\n          children: group.children.map((col) => JSON.stringify(col, null, 1)),\\n        }))}\\n        name=\\\"对应的列配置：\\\"\\n        collapsed={0}\\n        enableClipboard={false}\\n        displayDataTypes={false}\\n        displayObjectSize={false}\\n      />\\n      <FusionStyles />\\n    </>\\n  )\\n}\\n\\nexport function 单元格自动合并() {\\n  const { dataSource: cityData, isLoading } = useCityDataSource()\\n\\n  const renderData = applyTransforms(\\n    {\\n      dataSource: cityData.slice(0, 4).flatMap((d) => d.children),\\n      columns: [\\n        {\\n          code: 'provinceName',\\n          name: '省份',\\n          width: 150,\\n          features: { autoRowSpan: true },\\n        },\\n        cols.cityName,\\n        ...cols.indCols,\\n        {\\n          code: 'updateTime',\\n          name: '最后更新时间',\\n          width: 180,\\n          render: time,\\n          features: { autoRowSpan: true },\\n        },\\n      ],\\n    },\\n    commonTransforms.autoRowSpan(),\\n  )\\n\\n  return (\\n    <BaseTable isLoading={isLoading} useOuterBorder dataSource={renderData.dataSource} columns={renderData.columns} />\\n  )\\n}\\n\\nfunction CustomSortHeaderCell({\\n  column,\\n  sortOptions,\\n  sortIndex,\\n  children,\\n  onToggle,\\n  sortOrder,\\n}: commonTransforms.SortHeaderCellProps) {\\n  // 通过 justify-content 来与 col.align 保持对齐方向一致\\n  const justifyContent = column.align === 'right' ? 'flex-end' : column.align === 'center' ? 'center' : 'flex-start'\\n\\n  return (\\n    <div\\n      onClick={onToggle}\\n      style={{\\n        display: 'flex',\\n        justifyContent,\\n        cursor: 'pointer',\\n      }}\\n    >\\n      {/* 别忘记渲染原来的表头内容 */}\\n      {children}\\n\\n      <span style={{ marginLeft: 4 }}>\\n        {sortOrder === 'none' && <Row16 />}\\n        {sortOrder === 'asc' && <ThumbsUp16 />}\\n        {sortOrder === 'desc' && <ThumbsDown16 />}\\n      </span>\\n\\n      {sortOptions.mode === 'multiple' && sortOrder !== 'none' && (\\n        <span style={{ marginLeft: 4 }}>{sortIndex + 1}</span>\\n      )}\\n    </div>\\n  )\\n}\\n\\nexport function 自定义样式的排序表头() {\\n  const { isLoading, dataSource: data } = useProvinceDataSource()\\n\\n  const columns: ArtColumn[] = [\\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\\n  ]\\n\\n  const [sorts, onChangeSorts] = useState<SortItem[]>([{ code: 'confirmedCount', order: 'desc' }])\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource: data.slice(0, 5) },\\n    commonTransforms.sort({\\n      sorts,\\n      onChangeSorts,\\n      SortHeaderCell: CustomSortHeaderCell,\\n    }),\\n  )\\n\\n  return (\\n    <div>\\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\\n        <div style={{ marginLeft: 8 }}>通过示例 options.SortHeaderCell 可以自定义排序表头的样式/内容</div>\\n        <button style={{ marginLeft: 16 }} onClick={() => onChangeSorts([])}>\\n          清除排序\\n        </button>\\n      </div>\\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\\n    </div>\\n  )\\n}\\n\\nexport function 拖拽调整列宽() {\\n  const { isLoading, dataSource: data } = useProvinceDataSource()\\n\\n  const columns: ArtColumn[] = [cols.provinceName, ...cols.indCols, cols.updateTime]\\n\\n  const defaultColumnWidth = 120\\n  // 注意 columns 可能是嵌套的结构，这里使用 collectNodes 来获取所有叶子节点\\n  // 同时注意部分列的 width 可能为空，此时可以用 defaultColumnWidth 作为列的宽度\\n  const defaultSizes = collectNodes(columns, 'leaf-only').map((col) => col.width ?? defaultColumnWidth)\\n  const [sizes, onChangeSizes] = useState(defaultSizes)\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource: data.slice(0, 5) },\\n    commonTransforms.columnResize({\\n      sizes,\\n      onChangeSizes,\\n      appendExpander: true,\\n      disableUserSelectWhenResizing: true,\\n      minSize: 60,\\n      maxSize: 500,\\n    }),\\n  )\\n\\n  return (\\n    <div>\\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\\n        <div style={{ marginLeft: 8 }}>拖拽调整列宽</div>\\n      </div>\\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\\n    </div>\\n  )\\n}\\n\",\"locationsMap\":{\"表格功能拓展-功能拓展示例--树状表格\":{\"startLoc\":{\"col\":7,\"line\":47},\"endLoc\":{\"col\":1,\"line\":88},\"startBody\":{\"col\":7,\"line\":47},\"endBody\":{\"col\":1,\"line\":88}},\"表格功能拓展-功能拓展示例--树状表格-非受控\":{\"startLoc\":{\"col\":7,\"line\":90},\"endLoc\":{\"col\":1,\"line\":116},\"startBody\":{\"col\":7,\"line\":90},\"endBody\":{\"col\":1,\"line\":116}},\"表格功能拓展-功能拓展示例--表格排序-多列\":{\"startLoc\":{\"col\":7,\"line\":118},\"endLoc\":{\"col\":1,\"line\":153},\"startBody\":{\"col\":7,\"line\":118},\"endBody\":{\"col\":1,\"line\":153}},\"表格功能拓展-功能拓展示例--表格排序-多列-非受控\":{\"startLoc\":{\"col\":7,\"line\":155},\"endLoc\":{\"col\":1,\"line\":187},\"startBody\":{\"col\":7,\"line\":155},\"endBody\":{\"col\":1,\"line\":187}},\"表格功能拓展-功能拓展示例--表格排序-单列\":{\"startLoc\":{\"col\":7,\"line\":189},\"endLoc\":{\"col\":1,\"line\":219},\"startBody\":{\"col\":7,\"line\":189},\"endBody\":{\"col\":1,\"line\":219}},\"表格功能拓展-功能拓展示例--表格排序-单列-非受控\":{\"startLoc\":{\"col\":7,\"line\":221},\"endLoc\":{\"col\":1,\"line\":248},\"startBody\":{\"col\":7,\"line\":221},\"endBody\":{\"col\":1,\"line\":248}},\"表格功能拓展-功能拓展示例--表格操作栏\":{\"startLoc\":{\"col\":7,\"line\":250},\"endLoc\":{\"col\":1,\"line\":296},\"startBody\":{\"col\":7,\"line\":250},\"endBody\":{\"col\":1,\"line\":296}},\"表格功能拓展-功能拓展示例--列高亮\":{\"startLoc\":{\"col\":7,\"line\":298},\"endLoc\":{\"col\":1,\"line\":312},\"startBody\":{\"col\":7,\"line\":298},\"endBody\":{\"col\":1,\"line\":312}},\"表格功能拓展-功能拓展示例--列高亮-非受控\":{\"startLoc\":{\"col\":7,\"line\":314},\"endLoc\":{\"col\":1,\"line\":323},\"startBody\":{\"col\":7,\"line\":314},\"endBody\":{\"col\":1,\"line\":323}},\"表格功能拓展-功能拓展示例--列的范围高亮\":{\"startLoc\":{\"col\":7,\"line\":325},\"endLoc\":{\"col\":1,\"line\":416},\"startBody\":{\"col\":7,\"line\":325},\"endBody\":{\"col\":1,\"line\":416}},\"表格功能拓展-功能拓展示例--列的范围高亮-非受控\":{\"startLoc\":{\"col\":7,\"line\":418},\"endLoc\":{\"col\":1,\"line\":501},\"startBody\":{\"col\":7,\"line\":418},\"endBody\":{\"col\":1,\"line\":501}},\"表格功能拓展-功能拓展示例--列气泡提示\":{\"startLoc\":{\"col\":7,\"line\":503},\"endLoc\":{\"col\":1,\"line\":562},\"startBody\":{\"col\":7,\"line\":503},\"endBody\":{\"col\":1,\"line\":562}},\"表格功能拓展-功能拓展示例--树状模式与层级排序\":{\"startLoc\":{\"col\":7,\"line\":564},\"endLoc\":{\"col\":1,\"line\":597},\"startBody\":{\"col\":7,\"line\":564},\"endBody\":{\"col\":1,\"line\":597}},\"表格功能拓展-功能拓展示例--自定义列对话框组件\":{\"startLoc\":{\"col\":7,\"line\":599},\"endLoc\":{\"col\":1,\"line\":700},\"startBody\":{\"col\":7,\"line\":599},\"endBody\":{\"col\":1,\"line\":700}},\"表格功能拓展-功能拓展示例--单元格自动合并\":{\"startLoc\":{\"col\":7,\"line\":702},\"endLoc\":{\"col\":1,\"line\":732},\"startBody\":{\"col\":7,\"line\":702},\"endBody\":{\"col\":1,\"line\":732}},\"表格功能拓展-功能拓展示例--自定义样式的排序表头\":{\"startLoc\":{\"col\":7,\"line\":770},\"endLoc\":{\"col\":1,\"line\":803},\"startBody\":{\"col\":7,\"line\":770},\"endBody\":{\"col\":1,\"line\":803}},\"表格功能拓展-功能拓展示例--拖拽调整列宽\":{\"startLoc\":{\"col\":7,\"line\":805},\"endLoc\":{\"col\":1,\"line\":836},\"startBody\":{\"col\":7,\"line\":805},\"endBody\":{\"col\":1,\"line\":836}}}},\n    docs: {\n      page() {\n        return (\n          <div\n            style={{\n              margin: 'auto',\n              background: 'rgba(0, 0, 0, 0.03)',\n              borderRadius: 10,\n              padding: 30,\n            }}\n          >\n            示例过多，docs page 已在此处禁用，请在页面上方切换到「Canvas」模式\n          </div>\n        )\n      },\n    },\n  },\n}\n\nexport const 树状表格 = function 树状表格() {\n  const columns: ArtColumn[] = [\n    {\n      code: 'name',\n      name: '数据维度',\n      lock: true,\n      width: 200,\n      // 通过自定义 getValue，可以实现「根据节点深度选取合适的数据字段」\n      // getValue(record: any) {\n      //   const meta = record[commonTransforms.treeMetaSymbol]\n      //   const array = [record.subsidiary_name, record.city_name, record.shop_name]\n      //   return array[meta.depth]\n      // },\n    },\n    { code: 'shop_name', name: '门店' },\n    { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio, align: 'right' },\n    { code: 'app_qty_pbt', name: 'APP件单价', align: 'right' },\n    { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总', align: 'right' },\n  ]\n\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\n\n  useEffect(() => {\n    getAppTrafficData().then((data) => {\n      setState({ isLoading: false, data })\n    })\n  }, [])\n\n  const [openKeys, onChangeOpenKeys] = useState(['B2C'])\n\n  // 注意 renderData 要用起来\n  const renderData = applyTransforms(\n    { columns: columns, dataSource: state.data },\n\n    // 从平铺的数据中，根据 id/parent_id 字段构建出树状结构\n    commonTransforms.buildTree('id', 'parent_id'),\n\n    commonTransforms.treeMode({ primaryKey: 'id', openKeys, onChangeOpenKeys }),\n  )\n\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\n};\n\nexport const 树状表格_非受控 = function 树状表格_非受控() {\n  const columns: ArtColumn[] = [\n    { code: 'name', name: '数据维度', lock: true, width: 200 },\n    { code: 'shop_name', name: '门店' },\n    { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio, align: 'right' },\n    { code: 'app_qty_pbt', name: 'APP件单价', align: 'right' },\n    { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总', align: 'right' },\n  ]\n\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\n\n  useEffect(() => {\n    getAppTrafficData().then((data) => {\n      setState({ isLoading: false, data })\n    })\n  }, [])\n\n  const treeModeTransform = useTreeModeTransform({ primaryKey: 'id', defaultOpenKeys: ['B2C'] })\n\n  const renderData = applyTransforms(\n    { columns: columns, dataSource: state.data },\n    commonTransforms.buildTree('id', 'parent_id'),\n    treeModeTransform,\n  )\n\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\n};\n\nexport const 表格排序_多列 = function 表格排序_多列() {\n  const { isLoading, dataSource } = useProvinceDataSource()\n\n  const columns: ArtColumn[] = [\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\n  ]\n\n  const [sorts, onChangeSorts] = useState<SortItem[]>([\n    { code: 'deadCount', order: 'asc' },\n    { code: 'confirmedCount', order: 'desc' },\n  ])\n\n  const renderData = applyTransforms(\n    { columns, dataSource },\n    commonTransforms.sort({\n      sorts,\n      onChangeSorts,\n    }),\n  )\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\n        <div style={{ marginLeft: 8 }}>点击表头的排序图标对表格数据进行排序</div>\n        <button style={{ marginLeft: 16 }} onClick={() => onChangeSorts([])}>\n          清除排序\n        </button>\n      </div>\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\n    </div>\n  )\n};\n\nexport const 表格排序_多列_非受控 = function 表格排序_多列_非受控() {\n  const { isLoading, dataSource } = useProvinceDataSource()\n\n  const columns: ArtColumn[] = [\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\n  ]\n\n  const renderData = applyTransforms(\n    { columns, dataSource },\n    useSortTransform({\n      defaultSorts: [\n        { code: 'deadCount', order: 'asc' },\n        { code: 'confirmedCount', order: 'desc' },\n      ],\n    }),\n  )\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\n        <div style={{ marginLeft: 8 }}>点击表头的排序图标对表格数据进行排序</div>\n        <button style={{ marginLeft: 16 }} disabled>\n          非受控模式下无法清除排序\n        </button>\n      </div>\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\n    </div>\n  )\n};\n\nexport const 表格排序_单列 = function 表格排序_单列() {\n  const { isLoading, dataSource: data } = useProvinceDataSource()\n\n  const columns: ArtColumn[] = [\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\n  ]\n\n  const [sorts, onChangeSorts] = useState<SortItem[]>([{ code: 'deadCount', order: 'desc' }])\n\n  const renderData = applyTransforms(\n    { columns, dataSource: data.slice(0, 5) },\n    commonTransforms.sort({\n      sorts,\n      onChangeSorts,\n      mode: 'single', // 改为 multiple 可以使用多列排序\n    }),\n  )\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\n        <div style={{ marginLeft: 8 }}>点击表头的排序图标对表格数据进行排序</div>\n      </div>\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\n    </div>\n  )\n};\n\nexport const 表格排序_单列_非受控 = function 表格排序_单列_非受控() {\n  const { isLoading, dataSource: data } = useProvinceDataSource()\n\n  const columns: ArtColumn[] = [\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\n  ]\n\n  const renderData = applyTransforms(\n    { columns, dataSource: data.slice(0, 5) },\n    useSortTransform({\n      mode: 'single',\n      defaultSorts: [{ code: 'deadCount', order: 'desc' }],\n    }),\n  )\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\n        <div style={{ marginLeft: 8 }}>点击表头的排序图标对表格数据进行排序</div>\n      </div>\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\n    </div>\n  )\n};\n\nexport const 表格操作栏 = function 表格操作栏() {\n  const { isLoading, dataSource } = useProvinceDataSource()\n\n  const columns = testProvColumns.map((col, i) => ({\n    ...col,\n    features: {\n      enforceVisible: i === 0,\n      defaultVisible: true,\n    },\n  }))\n\n  const operationBar = useOperationBar({\n    features: [\n      { type: 'custom', node: '自定义文本' },\n      {\n        type: 'click',\n        title: (\n          <>\n            <EarthFilled16 style={{ fill: 'currentColor', marginRight: 2 }} />\n            自定义点击区域\n          </>\n        ),\n      },\n      { type: 'separator' },\n      {\n        type: 'export',\n        onExport() {\n          exportTableAsExcel(require('xlsx'), dataSource, columns, 'export.xlsx')\n        },\n      },\n      { type: 'custom-columns' },\n    ],\n    columns,\n    components: fusion,\n    actionColor: '#5e85f7',\n  })\n\n  const renderData = applyTransforms({ columns, dataSource }, ...operationBar.transforms)\n\n  return (\n    <div>\n      <FusionStyles />\n      <operationBar.view>{operationBar.nodes}</operationBar.view>\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\n    </div>\n  )\n};\n\nexport const 列高亮 = function 列高亮() {\n  const { isLoading, dataSource: data } = useProvinceDataSource()\n\n  const [hoverColIndex, onChangeHoverColIndex] = useState(-1)\n\n  const renderData = applyTransforms(\n    { columns: testProvColumns, dataSource: data.slice(0, 5) },\n    commonTransforms.columnHover({\n      hoverColIndex,\n      onChangeHoverColIndex,\n    }),\n  )\n\n  return <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\n};\n\nexport const 列高亮_非受控 = function 列高亮_非受控() {\n  const { isLoading, dataSource: data } = useProvinceDataSource()\n\n  const renderData = applyTransforms(\n    { columns: testProvColumns, dataSource: data.slice(0, 5) },\n    useColumnHoverTransform(),\n  )\n\n  return <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\n};\n\nexport const 列的范围高亮 = function 列的范围高亮() {\n  const appIndProto = proto.array<ArtColumn>({ align: 'right' })\n  const rateIndProto = proto.array<ArtColumn>({ align: 'right', render: ratio })\n\n  // 列配置\n  const columns: ArtColumn[] = [\n    {\n      name: '维度',\n      children: [\n        {\n          name: '商品信息',\n          children: [\n            { code: 'sku_code', name: 'SKU code' },\n            { code: 'sku_name', name: 'SKU名称' },\n          ],\n        },\n        {\n          name: '机构信息',\n          children: [\n            { code: 'city_name', name: '城市' },\n            { code: 'shop_name', name: '门店', features: { defaultVisible: true } },\n          ],\n        },\n        {\n          name: '类目信息',\n          children: [\n            { code: 'merge_cate_level1_name', name: '一级类目' },\n            { code: 'merge_cate_level2_name', name: '二级类目' },\n            { code: 'merge_cate_level3_name', name: '三级类目' },\n          ],\n        },\n      ],\n    },\n    {\n      name: '指标',\n      children: [\n        {\n          name: 'APP指标',\n          children: appIndProto([\n            { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio },\n            { code: 'app_trd_amt_1d', name: 'APP成交金额', render: amount },\n            { code: 'app_qty_pbt', name: 'APP件单价' },\n            { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总' },\n            { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数' },\n            { code: 'appout_shop_num', name: '缺货门店数', render: amount },\n            { code: 'all_time_len', name: '店均缺货时长', render: amount },\n            { code: 'bad_rmk_rate', name: '订单差评率', render: ratio },\n          ]),\n        },\n        {\n          name: '转换率',\n          children: rateIndProto([\n            { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率' },\n            { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率' },\n            { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率' },\n            { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率' },\n            { code: 'my_page_imp2pay_rate', name: '我的曝光至成交转化率' },\n            { code: 'pq_act_imp2pay_rate', name: '活动页曝光至成交转化率' },\n            { code: 'other_imp2pay_rate', name: '其他曝光至成交转化率' },\n          ]),\n        },\n      ],\n    },\n  ]\n\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\n\n  useEffect(() => {\n    getAppTrafficData().then((data) => {\n      setState({ isLoading: false, data: data.slice(0, 8) })\n    })\n  }, [])\n\n  const [hoverRange, onChangeHoverRange] = useState({ start: 0, end: 0 })\n\n  const renderData = applyTransforms(\n    { columns, dataSource: state.data },\n    commonTransforms.columnRangeHover({\n      hoverRange,\n      onChangeHoverRange,\n    }),\n  )\n\n  return (\n    <BaseTable\n      defaultColumnWidth={120}\n      dataSource={renderData.dataSource}\n      columns={renderData.columns}\n      isLoading={state.isLoading}\n    />\n  )\n};\n\nexport const 列的范围高亮_非受控 = function 列的范围高亮_非受控() {\n  const appIndProto = proto.array<ArtColumn>({ align: 'right' })\n  const rateIndProto = proto.array<ArtColumn>({ align: 'right', render: ratio })\n\n  // 列配置\n  const columns: ArtColumn[] = [\n    {\n      name: '维度',\n      children: [\n        {\n          name: '商品信息',\n          children: [\n            { code: 'sku_code', name: 'SKU code' },\n            { code: 'sku_name', name: 'SKU名称' },\n          ],\n        },\n        {\n          name: '机构信息',\n          children: [\n            { code: 'city_name', name: '城市' },\n            { code: 'shop_name', name: '门店', features: { defaultVisible: true } },\n          ],\n        },\n        {\n          name: '类目信息',\n          children: [\n            { code: 'merge_cate_level1_name', name: '一级类目' },\n            { code: 'merge_cate_level2_name', name: '二级类目' },\n            { code: 'merge_cate_level3_name', name: '三级类目' },\n          ],\n        },\n      ],\n    },\n    {\n      name: '指标',\n      children: [\n        {\n          name: 'APP指标',\n          children: appIndProto([\n            { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio },\n            { code: 'app_trd_amt_1d', name: 'APP成交金额', render: amount },\n            { code: 'app_qty_pbt', name: 'APP件单价' },\n            { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总' },\n            { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数' },\n            { code: 'appout_shop_num', name: '缺货门店数', render: amount },\n            { code: 'all_time_len', name: '店均缺货时长', render: amount },\n            { code: 'bad_rmk_rate', name: '订单差评率', render: ratio },\n          ]),\n        },\n        {\n          name: '转换率',\n          children: rateIndProto([\n            { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率' },\n            { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率' },\n            { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率' },\n            { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率' },\n            { code: 'my_page_imp2pay_rate', name: '我的曝光至成交转化率' },\n            { code: 'pq_act_imp2pay_rate', name: '活动页曝光至成交转化率' },\n            { code: 'other_imp2pay_rate', name: '其他曝光至成交转化率' },\n          ]),\n        },\n      ],\n    },\n  ]\n\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\n\n  useEffect(() => {\n    getAppTrafficData().then((data) => {\n      setState({ isLoading: false, data: data.slice(0, 8) })\n    })\n  }, [])\n\n  const renderData = applyTransforms({ columns, dataSource: state.data }, useColumnHoverRangeTransform())\n\n  return (\n    <BaseTable\n      defaultColumnWidth={120}\n      dataSource={renderData.dataSource}\n      columns={renderData.columns}\n      isLoading={state.isLoading}\n    />\n  )\n};\n\nexport const 列气泡提示 = function 列气泡提示() {\n  const { isLoading, dataSource: data } = useProvinceDataSource()\n\n  const [sorts, onChangeSorts] = useState<SortItem[]>([])\n\n  const columns: ArtColumn[] = [\n    {\n      code: 'provinceName',\n      name: '省份',\n      features: {\n        tips:\n          '省份，即我国的省级行政区，是行政地位与省相同行政区的总称，为一级行政区，包括省、自治区、直辖市、特别行政区。' +\n          '中国共计34个省级行政区，包括23个省、5个自治区、4个直辖市、2个特别行政区。',\n      },\n    },\n    {\n      code: 'curedCount',\n      name: '治愈',\n      render: amount,\n      align: 'right',\n      features: {\n        sortable: true,\n        tips: (\n          <div>\n            治愈是汉字词语，英文cure; heal，注音zhì yù，使恢复健康。如：在骨折完全治愈之前不要上班。\n            治愈指动漫中温暖人心，净化心灵，悲伤时看能得到安慰，治愈自己心灵中的创伤、修补自己心灵上缺陷的作品。\n            也可以指动漫中人物，拥有对主角内心抚慰、平复内心创伤的能力。可以分为行动上和语言上的。\n          </div>\n        ),\n      },\n    },\n    {\n      code: 'updateTime',\n      name: '最后更新时间',\n      render: time,\n      features: {\n        tips: (\n          <div>\n            时间，是物质的运动、变化的持续性、顺序性的表现，包含时刻和时段两个概念。\n            时间是人类用以描述物质运动过程或事件发生过程的一个参数，确定时间，是靠不受外界影响的物质周期变化的规律。以地球自转为基础的时间计量系统称为世界时系统。日、月、年、世纪的时间计量属天文学中的历法范畴。\n            以地球自转运动为基础的时间单位称为“日”，以月球绕地球公转运动为基础的时间单位称为“月”，以地球绕太阳公转运动为基础的时间单位称为“年”。\n          </div>\n        ),\n      },\n    },\n  ]\n\n  const renderData = applyTransforms(\n    { columns, dataSource: data.slice(0, 3) },\n    commonTransforms.sort({ mode: 'single', sorts, onChangeSorts }),\n    commonTransforms.tips({ Balloon }),\n  )\n\n  return (\n    <div>\n      <FusionStyles />\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource.slice(0, 10)} columns={renderData.columns} />\n    </div>\n  )\n};\n\nexport const 树状模式与层级排序 = function 树状模式与层级排序() {\n  const columns: ArtColumn[] = [\n    { code: 'name', name: '数据维度', lock: true, width: 200 },\n    { code: 'shop_name', name: '门店', features: { sortable: true } },\n    { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio, align: 'right', features: { sortable: true } },\n    { code: 'app_qty_pbt', name: 'APP件单价', align: 'right', features: { sortable: true } },\n    { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总', align: 'right', features: { sortable: true } },\n  ]\n\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\n\n  useEffect(() => {\n    getAppTrafficData().then((data) => {\n      setState({ isLoading: false, data })\n    })\n  }, [])\n\n  const [openKeys, onChangeOpenKeys] = useState(['B2C'])\n  const [sorts, onChangeSorts] = useState<SortItem[]>([])\n\n  const renderData = applyTransforms(\n    { columns, dataSource: state.data },\n    // 从平铺的数据中，根据 id/parent_id 字段构建出树状结构\n    commonTransforms.buildTree('id', 'parent_id'),\n    commonTransforms.sort({\n      sorts,\n      onChangeSorts,\n      mode: 'single', // 改为 multiple 可以使用多列排序\n    }),\n    commonTransforms.treeMode({ primaryKey: 'id', openKeys, onChangeOpenKeys, indentSize: 20 }),\n  )\n\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\n};\n\nexport const 自定义列对话框组件 = function 自定义列对话框组件() {\n  const defaultVisibleIndProto = proto.array<ArtColumn>({\n    features: { defaultVisible: true },\n  })\n\n  const defaultHiddenIntProto = proto.array<ArtColumn>({\n    features: { defaultVisible: false },\n  })\n\n  // 列配置\n  const columns: ArtColumn[] = [\n    {\n      name: '商品信息',\n      children: defaultVisibleIndProto([\n        { code: 'order', name: '序号', features: { enforceVisible: true } },\n        { code: 'sku_code', name: 'SKU code' },\n        { code: 'sku_name', name: 'SKU名称' },\n      ]),\n    },\n    {\n      name: '机构信息',\n      children: defaultHiddenIntProto([\n        { code: 'city_name', name: '城市' },\n        { code: 'shop_name', name: '门店' },\n      ]),\n    },\n    {\n      name: '类目信息',\n      children: defaultVisibleIndProto([\n        { code: 'merge_cate_level1_name', name: '一级类目' },\n        { code: 'merge_cate_level2_name', name: '二级类目' },\n        { code: 'merge_cate_level3_name', name: '三级类目' },\n      ]),\n    },\n    {\n      name: 'APP指标',\n      children: defaultVisibleIndProto([\n        { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例' },\n        { code: 'app_trd_amt_1d', name: 'APP成交金额' },\n        { code: 'app_qty_pbt', name: 'APP件单价' },\n        { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总' },\n        { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数' },\n        { code: 'appout_shop_num', name: '缺货门店数' },\n        { code: 'all_time_len', name: '店均缺货时长' },\n        { code: 'bad_rmk_rate', name: '订单差评率' },\n      ]),\n    },\n    {\n      name: '转换率',\n      children: defaultHiddenIntProto([\n        { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率' },\n        { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率' },\n        { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率' },\n        { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率' },\n        { code: 'my_page_imp2pay_rate', name: '我的曝光至成交转化率' },\n        { code: 'pq_act_imp2pay_rate', name: '活动页曝光至成交转化率' },\n        { code: 'other_imp2pay_rate', name: '其他曝光至成交转化率' },\n      ]),\n    },\n  ]\n\n  const leafColumns = collectNodes(columns, 'leaf-only')\n\n  const defaultCheckedCodes = leafColumns.filter((col) => col.features?.defaultVisible).map((col) => col.code)\n  const enforceCheckedCodes = leafColumns.filter((col) => col.features?.enforceVisible).map((col) => col.code)\n\n  const [checkedCodes, onChangeCheckedCodes] = useState(defaultCheckedCodes)\n\n  return (\n    <>\n      <CustomColumnsDialog\n        components={fusion}\n        columns={columns}\n        checkedCodes={checkedCodes}\n        defaultCheckedCodes={defaultCheckedCodes}\n        enforceCheckedCodes={enforceCheckedCodes}\n        trigger={(onOpen) => (\n          <Button size=\"large\" type=\"primary\" onClick={onOpen}>\n            打开自定义列对话框\n          </Button>\n        )}\n        onChangeCheckedCodes={(nextCodes) => {\n          console.log('自定义列对话框组件 onChangeCheckedCodes:', nextCodes)\n          onChangeCheckedCodes(nextCodes)\n        }}\n      />\n      <ReactJson\n        style={{ marginTop: 12 }}\n        src={columns.map((group) => ({\n          ...group,\n          children: group.children.map((col) => JSON.stringify(col, null, 1)),\n        }))}\n        name=\"对应的列配置：\"\n        collapsed={0}\n        enableClipboard={false}\n        displayDataTypes={false}\n        displayObjectSize={false}\n      />\n      <FusionStyles />\n    </>\n  )\n};\n\nexport const 单元格自动合并 = function 单元格自动合并() {\n  const { dataSource: cityData, isLoading } = useCityDataSource()\n\n  const renderData = applyTransforms(\n    {\n      dataSource: cityData.slice(0, 4).flatMap((d) => d.children),\n      columns: [\n        {\n          code: 'provinceName',\n          name: '省份',\n          width: 150,\n          features: { autoRowSpan: true },\n        },\n        cols.cityName,\n        ...cols.indCols,\n        {\n          code: 'updateTime',\n          name: '最后更新时间',\n          width: 180,\n          render: time,\n          features: { autoRowSpan: true },\n        },\n      ],\n    },\n    commonTransforms.autoRowSpan(),\n  )\n\n  return (\n    <BaseTable isLoading={isLoading} useOuterBorder dataSource={renderData.dataSource} columns={renderData.columns} />\n  )\n};\n\nfunction CustomSortHeaderCell({\n  column,\n  sortOptions,\n  sortIndex,\n  children,\n  onToggle,\n  sortOrder,\n}: commonTransforms.SortHeaderCellProps) {\n  // 通过 justify-content 来与 col.align 保持对齐方向一致\n  const justifyContent = column.align === 'right' ? 'flex-end' : column.align === 'center' ? 'center' : 'flex-start'\n\n  return (\n    <div\n      onClick={onToggle}\n      style={{\n        display: 'flex',\n        justifyContent,\n        cursor: 'pointer',\n      }}\n    >\n      {/* 别忘记渲染原来的表头内容 */}\n      {children}\n\n      <span style={{ marginLeft: 4 }}>\n        {sortOrder === 'none' && <Row16 />}\n        {sortOrder === 'asc' && <ThumbsUp16 />}\n        {sortOrder === 'desc' && <ThumbsDown16 />}\n      </span>\n\n      {sortOptions.mode === 'multiple' && sortOrder !== 'none' && (\n        <span style={{ marginLeft: 4 }}>{sortIndex + 1}</span>\n      )}\n    </div>\n  )\n}\n\nexport const 自定义样式的排序表头 = function 自定义样式的排序表头() {\n  const { isLoading, dataSource: data } = useProvinceDataSource()\n\n  const columns: ArtColumn[] = [\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\n  ]\n\n  const [sorts, onChangeSorts] = useState<SortItem[]>([{ code: 'confirmedCount', order: 'desc' }])\n\n  const renderData = applyTransforms(\n    { columns, dataSource: data.slice(0, 5) },\n    commonTransforms.sort({\n      sorts,\n      onChangeSorts,\n      SortHeaderCell: CustomSortHeaderCell,\n    }),\n  )\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\n        <div style={{ marginLeft: 8 }}>通过示例 options.SortHeaderCell 可以自定义排序表头的样式/内容</div>\n        <button style={{ marginLeft: 16 }} onClick={() => onChangeSorts([])}>\n          清除排序\n        </button>\n      </div>\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\n    </div>\n  )\n};\n\nexport const 拖拽调整列宽 = function 拖拽调整列宽() {\n  const { isLoading, dataSource: data } = useProvinceDataSource()\n\n  const columns: ArtColumn[] = [cols.provinceName, ...cols.indCols, cols.updateTime]\n\n  const defaultColumnWidth = 120\n  // 注意 columns 可能是嵌套的结构，这里使用 collectNodes 来获取所有叶子节点\n  // 同时注意部分列的 width 可能为空，此时可以用 defaultColumnWidth 作为列的宽度\n  const defaultSizes = collectNodes(columns, 'leaf-only').map((col) => col.width ?? defaultColumnWidth)\n  const [sizes, onChangeSizes] = useState(defaultSizes)\n\n  const renderData = applyTransforms(\n    { columns, dataSource: data.slice(0, 5) },\n    commonTransforms.columnResize({\n      sizes,\n      onChangeSizes,\n      appendExpander: true,\n      disableUserSelectWhenResizing: true,\n      minSize: 60,\n      maxSize: 500,\n    }),\n  )\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\n        <div style={{ marginLeft: 8 }}>拖拽调整列宽</div>\n      </div>\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\n    </div>\n  )\n};",locationsMap:{"表格功能拓展-功能拓展示例--树状表格":{startLoc:{col:20,line:55},endLoc:{col:1,line:96},startBody:{col:20,line:55},endBody:{col:1,line:96}},"表格功能拓展-功能拓展示例--树状表格-非受控":{startLoc:{col:24,line:98},endLoc:{col:1,line:124},startBody:{col:24,line:98},endBody:{col:1,line:124}},"表格功能拓展-功能拓展示例--表格排序-多列":{startLoc:{col:23,line:126},endLoc:{col:1,line:161},startBody:{col:23,line:126},endBody:{col:1,line:161}},"表格功能拓展-功能拓展示例--表格排序-多列-非受控":{startLoc:{col:27,line:163},endLoc:{col:1,line:195},startBody:{col:27,line:163},endBody:{col:1,line:195}},"表格功能拓展-功能拓展示例--表格排序-单列":{startLoc:{col:23,line:197},endLoc:{col:1,line:227},startBody:{col:23,line:197},endBody:{col:1,line:227}},"表格功能拓展-功能拓展示例--表格排序-单列-非受控":{startLoc:{col:27,line:229},endLoc:{col:1,line:256},startBody:{col:27,line:229},endBody:{col:1,line:256}},"表格功能拓展-功能拓展示例--表格操作栏":{startLoc:{col:21,line:258},endLoc:{col:1,line:304},startBody:{col:21,line:258},endBody:{col:1,line:304}},"表格功能拓展-功能拓展示例--列高亮":{startLoc:{col:19,line:306},endLoc:{col:1,line:320},startBody:{col:19,line:306},endBody:{col:1,line:320}},"表格功能拓展-功能拓展示例--列高亮-非受控":{startLoc:{col:23,line:322},endLoc:{col:1,line:331},startBody:{col:23,line:322},endBody:{col:1,line:331}},"表格功能拓展-功能拓展示例--列的范围高亮":{startLoc:{col:22,line:333},endLoc:{col:1,line:424},startBody:{col:22,line:333},endBody:{col:1,line:424}},"表格功能拓展-功能拓展示例--列的范围高亮-非受控":{startLoc:{col:26,line:426},endLoc:{col:1,line:509},startBody:{col:26,line:426},endBody:{col:1,line:509}},"表格功能拓展-功能拓展示例--列气泡提示":{startLoc:{col:21,line:511},endLoc:{col:1,line:570},startBody:{col:21,line:511},endBody:{col:1,line:570}},"表格功能拓展-功能拓展示例--树状模式与层级排序":{startLoc:{col:25,line:572},endLoc:{col:1,line:605},startBody:{col:25,line:572},endBody:{col:1,line:605}},"表格功能拓展-功能拓展示例--自定义列对话框组件":{startLoc:{col:25,line:607},endLoc:{col:1,line:708},startBody:{col:25,line:607},endBody:{col:1,line:708}},"表格功能拓展-功能拓展示例--单元格自动合并":{startLoc:{col:23,line:710},endLoc:{col:1,line:740},startBody:{col:23,line:710},endBody:{col:1,line:740}},"表格功能拓展-功能拓展示例--自定义样式的排序表头":{startLoc:{col:26,line:778},endLoc:{col:1,line:811},startBody:{col:26,line:778},endBody:{col:1,line:811}},"表格功能拓展-功能拓展示例--拖拽调整列宽":{startLoc:{col:22,line:813},endLoc:{col:1,line:844},startBody:{col:22,line:813},endBody:{col:1,line:844}}}},storySource:{source:"import * as fusion from '@alifd/next'\nimport { Balloon, Button } from '@alifd/next'\nimport { EarthFilled16, Row16, ThumbsDown16, ThumbsUp16 } from '@carbon/icons-react'\nimport { ArtColumn, BaseTable, collectNodes } from 'ali-react-table'\nimport {\n  applyTransforms,\n  commonTransforms,\n  CustomColumnsDialog,\n  exportTableAsExcel,\n  proto,\n  SortItem,\n  useColumnHoverRangeTransform,\n  useColumnHoverTransform,\n  useOperationBar,\n  useSortTransform,\n  useTreeModeTransform,\n} from 'ali-react-table/biz'\nimport React, { useEffect, useState } from 'react'\nimport ReactJson from 'react-json-view'\nimport { getAppTrafficData } from '../../assets/cdn-data'\nimport { amount, ratio, time } from '../../assets/format'\nimport { FusionStyles } from '../../assets/fusion-style'\nimport { cols, testProvColumns, useCityDataSource, useProvinceDataSource } from '../../assets/ncov19-assets'\n\nexport default {\n  title: '表格功能拓展 / 功能拓展示例',\n  parameters: {\n    docs: {\n      page() {\n        return (\n          <div\n            style={{\n              margin: 'auto',\n              background: 'rgba(0, 0, 0, 0.03)',\n              borderRadius: 10,\n              padding: 30,\n            }}\n          >\n            示例过多，docs page 已在此处禁用，请在页面上方切换到「Canvas」模式\n          </div>\n        )\n      },\n    },\n  },\n}\n\nexport function 树状表格() {\n  const columns: ArtColumn[] = [\n    {\n      code: 'name',\n      name: '数据维度',\n      lock: true,\n      width: 200,\n      // 通过自定义 getValue，可以实现「根据节点深度选取合适的数据字段」\n      // getValue(record: any) {\n      //   const meta = record[commonTransforms.treeMetaSymbol]\n      //   const array = [record.subsidiary_name, record.city_name, record.shop_name]\n      //   return array[meta.depth]\n      // },\n    },\n    { code: 'shop_name', name: '门店' },\n    { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio, align: 'right' },\n    { code: 'app_qty_pbt', name: 'APP件单价', align: 'right' },\n    { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总', align: 'right' },\n  ]\n\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\n\n  useEffect(() => {\n    getAppTrafficData().then((data) => {\n      setState({ isLoading: false, data })\n    })\n  }, [])\n\n  const [openKeys, onChangeOpenKeys] = useState(['B2C'])\n\n  // 注意 renderData 要用起来\n  const renderData = applyTransforms(\n    { columns: columns, dataSource: state.data },\n\n    // 从平铺的数据中，根据 id/parent_id 字段构建出树状结构\n    commonTransforms.buildTree('id', 'parent_id'),\n\n    commonTransforms.treeMode({ primaryKey: 'id', openKeys, onChangeOpenKeys }),\n  )\n\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\n}\n\nexport function 树状表格_非受控() {\n  const columns: ArtColumn[] = [\n    { code: 'name', name: '数据维度', lock: true, width: 200 },\n    { code: 'shop_name', name: '门店' },\n    { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio, align: 'right' },\n    { code: 'app_qty_pbt', name: 'APP件单价', align: 'right' },\n    { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总', align: 'right' },\n  ]\n\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\n\n  useEffect(() => {\n    getAppTrafficData().then((data) => {\n      setState({ isLoading: false, data })\n    })\n  }, [])\n\n  const treeModeTransform = useTreeModeTransform({ primaryKey: 'id', defaultOpenKeys: ['B2C'] })\n\n  const renderData = applyTransforms(\n    { columns: columns, dataSource: state.data },\n    commonTransforms.buildTree('id', 'parent_id'),\n    treeModeTransform,\n  )\n\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\n}\n\nexport function 表格排序_多列() {\n  const { isLoading, dataSource } = useProvinceDataSource()\n\n  const columns: ArtColumn[] = [\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\n  ]\n\n  const [sorts, onChangeSorts] = useState<SortItem[]>([\n    { code: 'deadCount', order: 'asc' },\n    { code: 'confirmedCount', order: 'desc' },\n  ])\n\n  const renderData = applyTransforms(\n    { columns, dataSource },\n    commonTransforms.sort({\n      sorts,\n      onChangeSorts,\n    }),\n  )\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\n        <div style={{ marginLeft: 8 }}>点击表头的排序图标对表格数据进行排序</div>\n        <button style={{ marginLeft: 16 }} onClick={() => onChangeSorts([])}>\n          清除排序\n        </button>\n      </div>\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\n    </div>\n  )\n}\n\nexport function 表格排序_多列_非受控() {\n  const { isLoading, dataSource } = useProvinceDataSource()\n\n  const columns: ArtColumn[] = [\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\n  ]\n\n  const renderData = applyTransforms(\n    { columns, dataSource },\n    useSortTransform({\n      defaultSorts: [\n        { code: 'deadCount', order: 'asc' },\n        { code: 'confirmedCount', order: 'desc' },\n      ],\n    }),\n  )\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\n        <div style={{ marginLeft: 8 }}>点击表头的排序图标对表格数据进行排序</div>\n        <button style={{ marginLeft: 16 }} disabled>\n          非受控模式下无法清除排序\n        </button>\n      </div>\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\n    </div>\n  )\n}\n\nexport function 表格排序_单列() {\n  const { isLoading, dataSource: data } = useProvinceDataSource()\n\n  const columns: ArtColumn[] = [\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\n  ]\n\n  const [sorts, onChangeSorts] = useState<SortItem[]>([{ code: 'deadCount', order: 'desc' }])\n\n  const renderData = applyTransforms(\n    { columns, dataSource: data.slice(0, 5) },\n    commonTransforms.sort({\n      sorts,\n      onChangeSorts,\n      mode: 'single', // 改为 multiple 可以使用多列排序\n    }),\n  )\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\n        <div style={{ marginLeft: 8 }}>点击表头的排序图标对表格数据进行排序</div>\n      </div>\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\n    </div>\n  )\n}\n\nexport function 表格排序_单列_非受控() {\n  const { isLoading, dataSource: data } = useProvinceDataSource()\n\n  const columns: ArtColumn[] = [\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\n  ]\n\n  const renderData = applyTransforms(\n    { columns, dataSource: data.slice(0, 5) },\n    useSortTransform({\n      mode: 'single',\n      defaultSorts: [{ code: 'deadCount', order: 'desc' }],\n    }),\n  )\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\n        <div style={{ marginLeft: 8 }}>点击表头的排序图标对表格数据进行排序</div>\n      </div>\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\n    </div>\n  )\n}\n\nexport function 表格操作栏() {\n  const { isLoading, dataSource } = useProvinceDataSource()\n\n  const columns = testProvColumns.map((col, i) => ({\n    ...col,\n    features: {\n      enforceVisible: i === 0,\n      defaultVisible: true,\n    },\n  }))\n\n  const operationBar = useOperationBar({\n    features: [\n      { type: 'custom', node: '自定义文本' },\n      {\n        type: 'click',\n        title: (\n          <>\n            <EarthFilled16 style={{ fill: 'currentColor', marginRight: 2 }} />\n            自定义点击区域\n          </>\n        ),\n      },\n      { type: 'separator' },\n      {\n        type: 'export',\n        onExport() {\n          exportTableAsExcel(require('xlsx'), dataSource, columns, 'export.xlsx')\n        },\n      },\n      { type: 'custom-columns' },\n    ],\n    columns,\n    components: fusion,\n    actionColor: '#5e85f7',\n  })\n\n  const renderData = applyTransforms({ columns, dataSource }, ...operationBar.transforms)\n\n  return (\n    <div>\n      <FusionStyles />\n      <operationBar.view>{operationBar.nodes}</operationBar.view>\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\n    </div>\n  )\n}\n\nexport function 列高亮() {\n  const { isLoading, dataSource: data } = useProvinceDataSource()\n\n  const [hoverColIndex, onChangeHoverColIndex] = useState(-1)\n\n  const renderData = applyTransforms(\n    { columns: testProvColumns, dataSource: data.slice(0, 5) },\n    commonTransforms.columnHover({\n      hoverColIndex,\n      onChangeHoverColIndex,\n    }),\n  )\n\n  return <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\n}\n\nexport function 列高亮_非受控() {\n  const { isLoading, dataSource: data } = useProvinceDataSource()\n\n  const renderData = applyTransforms(\n    { columns: testProvColumns, dataSource: data.slice(0, 5) },\n    useColumnHoverTransform(),\n  )\n\n  return <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\n}\n\nexport function 列的范围高亮() {\n  const appIndProto = proto.array<ArtColumn>({ align: 'right' })\n  const rateIndProto = proto.array<ArtColumn>({ align: 'right', render: ratio })\n\n  // 列配置\n  const columns: ArtColumn[] = [\n    {\n      name: '维度',\n      children: [\n        {\n          name: '商品信息',\n          children: [\n            { code: 'sku_code', name: 'SKU code' },\n            { code: 'sku_name', name: 'SKU名称' },\n          ],\n        },\n        {\n          name: '机构信息',\n          children: [\n            { code: 'city_name', name: '城市' },\n            { code: 'shop_name', name: '门店', features: { defaultVisible: true } },\n          ],\n        },\n        {\n          name: '类目信息',\n          children: [\n            { code: 'merge_cate_level1_name', name: '一级类目' },\n            { code: 'merge_cate_level2_name', name: '二级类目' },\n            { code: 'merge_cate_level3_name', name: '三级类目' },\n          ],\n        },\n      ],\n    },\n    {\n      name: '指标',\n      children: [\n        {\n          name: 'APP指标',\n          children: appIndProto([\n            { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio },\n            { code: 'app_trd_amt_1d', name: 'APP成交金额', render: amount },\n            { code: 'app_qty_pbt', name: 'APP件单价' },\n            { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总' },\n            { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数' },\n            { code: 'appout_shop_num', name: '缺货门店数', render: amount },\n            { code: 'all_time_len', name: '店均缺货时长', render: amount },\n            { code: 'bad_rmk_rate', name: '订单差评率', render: ratio },\n          ]),\n        },\n        {\n          name: '转换率',\n          children: rateIndProto([\n            { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率' },\n            { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率' },\n            { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率' },\n            { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率' },\n            { code: 'my_page_imp2pay_rate', name: '我的曝光至成交转化率' },\n            { code: 'pq_act_imp2pay_rate', name: '活动页曝光至成交转化率' },\n            { code: 'other_imp2pay_rate', name: '其他曝光至成交转化率' },\n          ]),\n        },\n      ],\n    },\n  ]\n\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\n\n  useEffect(() => {\n    getAppTrafficData().then((data) => {\n      setState({ isLoading: false, data: data.slice(0, 8) })\n    })\n  }, [])\n\n  const [hoverRange, onChangeHoverRange] = useState({ start: 0, end: 0 })\n\n  const renderData = applyTransforms(\n    { columns, dataSource: state.data },\n    commonTransforms.columnRangeHover({\n      hoverRange,\n      onChangeHoverRange,\n    }),\n  )\n\n  return (\n    <BaseTable\n      defaultColumnWidth={120}\n      dataSource={renderData.dataSource}\n      columns={renderData.columns}\n      isLoading={state.isLoading}\n    />\n  )\n}\n\nexport function 列的范围高亮_非受控() {\n  const appIndProto = proto.array<ArtColumn>({ align: 'right' })\n  const rateIndProto = proto.array<ArtColumn>({ align: 'right', render: ratio })\n\n  // 列配置\n  const columns: ArtColumn[] = [\n    {\n      name: '维度',\n      children: [\n        {\n          name: '商品信息',\n          children: [\n            { code: 'sku_code', name: 'SKU code' },\n            { code: 'sku_name', name: 'SKU名称' },\n          ],\n        },\n        {\n          name: '机构信息',\n          children: [\n            { code: 'city_name', name: '城市' },\n            { code: 'shop_name', name: '门店', features: { defaultVisible: true } },\n          ],\n        },\n        {\n          name: '类目信息',\n          children: [\n            { code: 'merge_cate_level1_name', name: '一级类目' },\n            { code: 'merge_cate_level2_name', name: '二级类目' },\n            { code: 'merge_cate_level3_name', name: '三级类目' },\n          ],\n        },\n      ],\n    },\n    {\n      name: '指标',\n      children: [\n        {\n          name: 'APP指标',\n          children: appIndProto([\n            { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio },\n            { code: 'app_trd_amt_1d', name: 'APP成交金额', render: amount },\n            { code: 'app_qty_pbt', name: 'APP件单价' },\n            { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总' },\n            { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数' },\n            { code: 'appout_shop_num', name: '缺货门店数', render: amount },\n            { code: 'all_time_len', name: '店均缺货时长', render: amount },\n            { code: 'bad_rmk_rate', name: '订单差评率', render: ratio },\n          ]),\n        },\n        {\n          name: '转换率',\n          children: rateIndProto([\n            { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率' },\n            { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率' },\n            { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率' },\n            { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率' },\n            { code: 'my_page_imp2pay_rate', name: '我的曝光至成交转化率' },\n            { code: 'pq_act_imp2pay_rate', name: '活动页曝光至成交转化率' },\n            { code: 'other_imp2pay_rate', name: '其他曝光至成交转化率' },\n          ]),\n        },\n      ],\n    },\n  ]\n\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\n\n  useEffect(() => {\n    getAppTrafficData().then((data) => {\n      setState({ isLoading: false, data: data.slice(0, 8) })\n    })\n  }, [])\n\n  const renderData = applyTransforms({ columns, dataSource: state.data }, useColumnHoverRangeTransform())\n\n  return (\n    <BaseTable\n      defaultColumnWidth={120}\n      dataSource={renderData.dataSource}\n      columns={renderData.columns}\n      isLoading={state.isLoading}\n    />\n  )\n}\n\nexport function 列气泡提示() {\n  const { isLoading, dataSource: data } = useProvinceDataSource()\n\n  const [sorts, onChangeSorts] = useState<SortItem[]>([])\n\n  const columns: ArtColumn[] = [\n    {\n      code: 'provinceName',\n      name: '省份',\n      features: {\n        tips:\n          '省份，即我国的省级行政区，是行政地位与省相同行政区的总称，为一级行政区，包括省、自治区、直辖市、特别行政区。' +\n          '中国共计34个省级行政区，包括23个省、5个自治区、4个直辖市、2个特别行政区。',\n      },\n    },\n    {\n      code: 'curedCount',\n      name: '治愈',\n      render: amount,\n      align: 'right',\n      features: {\n        sortable: true,\n        tips: (\n          <div>\n            治愈是汉字词语，英文cure; heal，注音zhì yù，使恢复健康。如：在骨折完全治愈之前不要上班。\n            治愈指动漫中温暖人心，净化心灵，悲伤时看能得到安慰，治愈自己心灵中的创伤、修补自己心灵上缺陷的作品。\n            也可以指动漫中人物，拥有对主角内心抚慰、平复内心创伤的能力。可以分为行动上和语言上的。\n          </div>\n        ),\n      },\n    },\n    {\n      code: 'updateTime',\n      name: '最后更新时间',\n      render: time,\n      features: {\n        tips: (\n          <div>\n            时间，是物质的运动、变化的持续性、顺序性的表现，包含时刻和时段两个概念。\n            时间是人类用以描述物质运动过程或事件发生过程的一个参数，确定时间，是靠不受外界影响的物质周期变化的规律。以地球自转为基础的时间计量系统称为世界时系统。日、月、年、世纪的时间计量属天文学中的历法范畴。\n            以地球自转运动为基础的时间单位称为“日”，以月球绕地球公转运动为基础的时间单位称为“月”，以地球绕太阳公转运动为基础的时间单位称为“年”。\n          </div>\n        ),\n      },\n    },\n  ]\n\n  const renderData = applyTransforms(\n    { columns, dataSource: data.slice(0, 3) },\n    commonTransforms.sort({ mode: 'single', sorts, onChangeSorts }),\n    commonTransforms.tips({ Balloon }),\n  )\n\n  return (\n    <div>\n      <FusionStyles />\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource.slice(0, 10)} columns={renderData.columns} />\n    </div>\n  )\n}\n\nexport function 树状模式与层级排序() {\n  const columns: ArtColumn[] = [\n    { code: 'name', name: '数据维度', lock: true, width: 200 },\n    { code: 'shop_name', name: '门店', features: { sortable: true } },\n    { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio, align: 'right', features: { sortable: true } },\n    { code: 'app_qty_pbt', name: 'APP件单价', align: 'right', features: { sortable: true } },\n    { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总', align: 'right', features: { sortable: true } },\n  ]\n\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\n\n  useEffect(() => {\n    getAppTrafficData().then((data) => {\n      setState({ isLoading: false, data })\n    })\n  }, [])\n\n  const [openKeys, onChangeOpenKeys] = useState(['B2C'])\n  const [sorts, onChangeSorts] = useState<SortItem[]>([])\n\n  const renderData = applyTransforms(\n    { columns, dataSource: state.data },\n    // 从平铺的数据中，根据 id/parent_id 字段构建出树状结构\n    commonTransforms.buildTree('id', 'parent_id'),\n    commonTransforms.sort({\n      sorts,\n      onChangeSorts,\n      mode: 'single', // 改为 multiple 可以使用多列排序\n    }),\n    commonTransforms.treeMode({ primaryKey: 'id', openKeys, onChangeOpenKeys, indentSize: 20 }),\n  )\n\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\n}\n\nexport function 自定义列对话框组件() {\n  const defaultVisibleIndProto = proto.array<ArtColumn>({\n    features: { defaultVisible: true },\n  })\n\n  const defaultHiddenIntProto = proto.array<ArtColumn>({\n    features: { defaultVisible: false },\n  })\n\n  // 列配置\n  const columns: ArtColumn[] = [\n    {\n      name: '商品信息',\n      children: defaultVisibleIndProto([\n        { code: 'order', name: '序号', features: { enforceVisible: true } },\n        { code: 'sku_code', name: 'SKU code' },\n        { code: 'sku_name', name: 'SKU名称' },\n      ]),\n    },\n    {\n      name: '机构信息',\n      children: defaultHiddenIntProto([\n        { code: 'city_name', name: '城市' },\n        { code: 'shop_name', name: '门店' },\n      ]),\n    },\n    {\n      name: '类目信息',\n      children: defaultVisibleIndProto([\n        { code: 'merge_cate_level1_name', name: '一级类目' },\n        { code: 'merge_cate_level2_name', name: '二级类目' },\n        { code: 'merge_cate_level3_name', name: '三级类目' },\n      ]),\n    },\n    {\n      name: 'APP指标',\n      children: defaultVisibleIndProto([\n        { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例' },\n        { code: 'app_trd_amt_1d', name: 'APP成交金额' },\n        { code: 'app_qty_pbt', name: 'APP件单价' },\n        { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总' },\n        { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数' },\n        { code: 'appout_shop_num', name: '缺货门店数' },\n        { code: 'all_time_len', name: '店均缺货时长' },\n        { code: 'bad_rmk_rate', name: '订单差评率' },\n      ]),\n    },\n    {\n      name: '转换率',\n      children: defaultHiddenIntProto([\n        { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率' },\n        { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率' },\n        { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率' },\n        { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率' },\n        { code: 'my_page_imp2pay_rate', name: '我的曝光至成交转化率' },\n        { code: 'pq_act_imp2pay_rate', name: '活动页曝光至成交转化率' },\n        { code: 'other_imp2pay_rate', name: '其他曝光至成交转化率' },\n      ]),\n    },\n  ]\n\n  const leafColumns = collectNodes(columns, 'leaf-only')\n\n  const defaultCheckedCodes = leafColumns.filter((col) => col.features?.defaultVisible).map((col) => col.code)\n  const enforceCheckedCodes = leafColumns.filter((col) => col.features?.enforceVisible).map((col) => col.code)\n\n  const [checkedCodes, onChangeCheckedCodes] = useState(defaultCheckedCodes)\n\n  return (\n    <>\n      <CustomColumnsDialog\n        components={fusion}\n        columns={columns}\n        checkedCodes={checkedCodes}\n        defaultCheckedCodes={defaultCheckedCodes}\n        enforceCheckedCodes={enforceCheckedCodes}\n        trigger={(onOpen) => (\n          <Button size=\"large\" type=\"primary\" onClick={onOpen}>\n            打开自定义列对话框\n          </Button>\n        )}\n        onChangeCheckedCodes={(nextCodes) => {\n          console.log('自定义列对话框组件 onChangeCheckedCodes:', nextCodes)\n          onChangeCheckedCodes(nextCodes)\n        }}\n      />\n      <ReactJson\n        style={{ marginTop: 12 }}\n        src={columns.map((group) => ({\n          ...group,\n          children: group.children.map((col) => JSON.stringify(col, null, 1)),\n        }))}\n        name=\"对应的列配置：\"\n        collapsed={0}\n        enableClipboard={false}\n        displayDataTypes={false}\n        displayObjectSize={false}\n      />\n      <FusionStyles />\n    </>\n  )\n}\n\nexport function 单元格自动合并() {\n  const { dataSource: cityData, isLoading } = useCityDataSource()\n\n  const renderData = applyTransforms(\n    {\n      dataSource: cityData.slice(0, 4).flatMap((d) => d.children),\n      columns: [\n        {\n          code: 'provinceName',\n          name: '省份',\n          width: 150,\n          features: { autoRowSpan: true },\n        },\n        cols.cityName,\n        ...cols.indCols,\n        {\n          code: 'updateTime',\n          name: '最后更新时间',\n          width: 180,\n          render: time,\n          features: { autoRowSpan: true },\n        },\n      ],\n    },\n    commonTransforms.autoRowSpan(),\n  )\n\n  return (\n    <BaseTable isLoading={isLoading} useOuterBorder dataSource={renderData.dataSource} columns={renderData.columns} />\n  )\n}\n\nfunction CustomSortHeaderCell({\n  column,\n  sortOptions,\n  sortIndex,\n  children,\n  onToggle,\n  sortOrder,\n}: commonTransforms.SortHeaderCellProps) {\n  // 通过 justify-content 来与 col.align 保持对齐方向一致\n  const justifyContent = column.align === 'right' ? 'flex-end' : column.align === 'center' ? 'center' : 'flex-start'\n\n  return (\n    <div\n      onClick={onToggle}\n      style={{\n        display: 'flex',\n        justifyContent,\n        cursor: 'pointer',\n      }}\n    >\n      {/* 别忘记渲染原来的表头内容 */}\n      {children}\n\n      <span style={{ marginLeft: 4 }}>\n        {sortOrder === 'none' && <Row16 />}\n        {sortOrder === 'asc' && <ThumbsUp16 />}\n        {sortOrder === 'desc' && <ThumbsDown16 />}\n      </span>\n\n      {sortOptions.mode === 'multiple' && sortOrder !== 'none' && (\n        <span style={{ marginLeft: 4 }}>{sortIndex + 1}</span>\n      )}\n    </div>\n  )\n}\n\nexport function 自定义样式的排序表头() {\n  const { isLoading, dataSource: data } = useProvinceDataSource()\n\n  const columns: ArtColumn[] = [\n    { code: 'provinceName', name: '省份', width: 150, features: { sortable: true } },\n    { code: 'confirmedCount', name: '确诊', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'curedCount', name: '治愈', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'deadCount', name: '死亡', width: 100, render: amount, align: 'right', features: { sortable: true } },\n    { code: 'updateTime', name: '最后更新时间', width: 180, render: time },\n  ]\n\n  const [sorts, onChangeSorts] = useState<SortItem[]>([{ code: 'confirmedCount', order: 'desc' }])\n\n  const renderData = applyTransforms(\n    { columns, dataSource: data.slice(0, 5) },\n    commonTransforms.sort({\n      sorts,\n      onChangeSorts,\n      SortHeaderCell: CustomSortHeaderCell,\n    }),\n  )\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\n        <div style={{ marginLeft: 8 }}>通过示例 options.SortHeaderCell 可以自定义排序表头的样式/内容</div>\n        <button style={{ marginLeft: 16 }} onClick={() => onChangeSorts([])}>\n          清除排序\n        </button>\n      </div>\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\n    </div>\n  )\n}\n\nexport function 拖拽调整列宽() {\n  const { isLoading, dataSource: data } = useProvinceDataSource()\n\n  const columns: ArtColumn[] = [cols.provinceName, ...cols.indCols, cols.updateTime]\n\n  const defaultColumnWidth = 120\n  // 注意 columns 可能是嵌套的结构，这里使用 collectNodes 来获取所有叶子节点\n  // 同时注意部分列的 width 可能为空，此时可以用 defaultColumnWidth 作为列的宽度\n  const defaultSizes = collectNodes(columns, 'leaf-only').map((col) => col.width ?? defaultColumnWidth)\n  const [sizes, onChangeSizes] = useState(defaultSizes)\n\n  const renderData = applyTransforms(\n    { columns, dataSource: data.slice(0, 5) },\n    commonTransforms.columnResize({\n      sizes,\n      onChangeSizes,\n      appendExpander: true,\n      disableUserSelectWhenResizing: true,\n      minSize: 60,\n      maxSize: 500,\n    }),\n  )\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', height: 40 }}>\n        <div style={{ marginLeft: 8 }}>拖拽调整列宽</div>\n      </div>\n      <BaseTable isLoading={isLoading} dataSource={renderData.dataSource} columns={renderData.columns} />\n    </div>\n  )\n}\n",locationsMap:{"表格功能拓展-功能拓展示例--树状表格":{startLoc:{col:7,line:47},endLoc:{col:1,line:88},startBody:{col:7,line:47},endBody:{col:1,line:88}},"表格功能拓展-功能拓展示例--树状表格-非受控":{startLoc:{col:7,line:90},endLoc:{col:1,line:116},startBody:{col:7,line:90},endBody:{col:1,line:116}},"表格功能拓展-功能拓展示例--表格排序-多列":{startLoc:{col:7,line:118},endLoc:{col:1,line:153},startBody:{col:7,line:118},endBody:{col:1,line:153}},"表格功能拓展-功能拓展示例--表格排序-多列-非受控":{startLoc:{col:7,line:155},endLoc:{col:1,line:187},startBody:{col:7,line:155},endBody:{col:1,line:187}},"表格功能拓展-功能拓展示例--表格排序-单列":{startLoc:{col:7,line:189},endLoc:{col:1,line:219},startBody:{col:7,line:189},endBody:{col:1,line:219}},"表格功能拓展-功能拓展示例--表格排序-单列-非受控":{startLoc:{col:7,line:221},endLoc:{col:1,line:248},startBody:{col:7,line:221},endBody:{col:1,line:248}},"表格功能拓展-功能拓展示例--表格操作栏":{startLoc:{col:7,line:250},endLoc:{col:1,line:296},startBody:{col:7,line:250},endBody:{col:1,line:296}},"表格功能拓展-功能拓展示例--列高亮":{startLoc:{col:7,line:298},endLoc:{col:1,line:312},startBody:{col:7,line:298},endBody:{col:1,line:312}},"表格功能拓展-功能拓展示例--列高亮-非受控":{startLoc:{col:7,line:314},endLoc:{col:1,line:323},startBody:{col:7,line:314},endBody:{col:1,line:323}},"表格功能拓展-功能拓展示例--列的范围高亮":{startLoc:{col:7,line:325},endLoc:{col:1,line:416},startBody:{col:7,line:325},endBody:{col:1,line:416}},"表格功能拓展-功能拓展示例--列的范围高亮-非受控":{startLoc:{col:7,line:418},endLoc:{col:1,line:501},startBody:{col:7,line:418},endBody:{col:1,line:501}},"表格功能拓展-功能拓展示例--列气泡提示":{startLoc:{col:7,line:503},endLoc:{col:1,line:562},startBody:{col:7,line:503},endBody:{col:1,line:562}},"表格功能拓展-功能拓展示例--树状模式与层级排序":{startLoc:{col:7,line:564},endLoc:{col:1,line:597},startBody:{col:7,line:564},endBody:{col:1,line:597}},"表格功能拓展-功能拓展示例--自定义列对话框组件":{startLoc:{col:7,line:599},endLoc:{col:1,line:700},startBody:{col:7,line:599},endBody:{col:1,line:700}},"表格功能拓展-功能拓展示例--单元格自动合并":{startLoc:{col:7,line:702},endLoc:{col:1,line:732},startBody:{col:7,line:702},endBody:{col:1,line:732}},"表格功能拓展-功能拓展示例--自定义样式的排序表头":{startLoc:{col:7,line:770},endLoc:{col:1,line:803},startBody:{col:7,line:770},endBody:{col:1,line:803}},"表格功能拓展-功能拓展示例--拖拽调整列宽":{startLoc:{col:7,line:805},endLoc:{col:1,line:836},startBody:{col:7,line:805},endBody:{col:1,line:836}}}},docs:{page:()=>react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",{style:{margin:"auto",background:"rgba(0, 0, 0, 0.03)",borderRadius:10,padding:30}},"示例过多，docs page 已在此处禁用，请在页面上方切换到「Canvas」模式")}}};const 树状表格=function 树状表格(){const columns=[{code:"name",name:"数据维度",lock:!0,width:200},{code:"shop_name",name:"门店"},{code:"imp_uv_dau_pct",name:"曝光UV占DAU比例",render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.c,align:"right"},{code:"app_qty_pbt",name:"APP件单价",align:"right"},{code:"all_app_trd_amt_1d",name:"APP成交金额汇总",align:"right"}],[state,setState]=Object(react__WEBPACK_IMPORTED_MODULE_13__.useState)({isLoading:!0,data:[]});Object(react__WEBPACK_IMPORTED_MODULE_13__.useEffect)(()=>{Object(_assets_cdn_data__WEBPACK_IMPORTED_MODULE_15__.a)().then(data=>{setState({isLoading:!1,data:data})})},[]);const[openKeys,onChangeOpenKeys]=Object(react__WEBPACK_IMPORTED_MODULE_13__.useState)(["B2C"]),renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a)({columns:columns,dataSource:state.data},ali_react_table_biz__WEBPACK_IMPORTED_MODULE_7__.a.buildTree("id","parent_id"),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_7__.a.treeMode({primaryKey:"id",openKeys:openKeys,onChangeOpenKeys:onChangeOpenKeys}));return react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_4__.a,{dataSource:renderData.dataSource,columns:renderData.columns,isLoading:state.isLoading})},树状表格_非受控=function 树状表格_非受控(){const columns=[{code:"name",name:"数据维度",lock:!0,width:200},{code:"shop_name",name:"门店"},{code:"imp_uv_dau_pct",name:"曝光UV占DAU比例",render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.c,align:"right"},{code:"app_qty_pbt",name:"APP件单价",align:"right"},{code:"all_app_trd_amt_1d",name:"APP成交金额汇总",align:"right"}],[state,setState]=Object(react__WEBPACK_IMPORTED_MODULE_13__.useState)({isLoading:!0,data:[]});Object(react__WEBPACK_IMPORTED_MODULE_13__.useEffect)(()=>{Object(_assets_cdn_data__WEBPACK_IMPORTED_MODULE_15__.a)().then(data=>{setState({isLoading:!1,data:data})})},[]);const treeModeTransform=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_8__.d)({primaryKey:"id",defaultOpenKeys:["B2C"]}),renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a)({columns:columns,dataSource:state.data},ali_react_table_biz__WEBPACK_IMPORTED_MODULE_7__.a.buildTree("id","parent_id"),treeModeTransform);return react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_4__.a,{dataSource:renderData.dataSource,columns:renderData.columns,isLoading:state.isLoading})},表格排序_多列=function 表格排序_多列(){const{isLoading:isLoading,dataSource:dataSource}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.e)(),columns=[{code:"provinceName",name:"省份",width:150,features:{sortable:!0}},{code:"confirmedCount",name:"确诊",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a,align:"right",features:{sortable:!0}},{code:"curedCount",name:"治愈",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a,align:"right",features:{sortable:!0}},{code:"deadCount",name:"死亡",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a,align:"right",features:{sortable:!0}},{code:"updateTime",name:"最后更新时间",width:180,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.d}],[sorts,onChangeSorts]=Object(react__WEBPACK_IMPORTED_MODULE_13__.useState)([{code:"deadCount",order:"asc"},{code:"confirmedCount",order:"desc"}]),renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a)({columns:columns,dataSource:dataSource},ali_react_table_biz__WEBPACK_IMPORTED_MODULE_7__.a.sort({sorts:sorts,onChangeSorts:onChangeSorts}));return react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",{style:{display:"flex",alignItems:"center",height:40}},react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",{style:{marginLeft:8}},"点击表头的排序图标对表格数据进行排序"),react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("button",{style:{marginLeft:16},onClick:()=>onChangeSorts([])},"清除排序")),react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_4__.a,{isLoading:isLoading,dataSource:renderData.dataSource,columns:renderData.columns}))},表格排序_多列_非受控=function 表格排序_多列_非受控(){const{isLoading:isLoading,dataSource:dataSource}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.e)(),columns=[{code:"provinceName",name:"省份",width:150,features:{sortable:!0}},{code:"confirmedCount",name:"确诊",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a,align:"right",features:{sortable:!0}},{code:"curedCount",name:"治愈",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a,align:"right",features:{sortable:!0}},{code:"deadCount",name:"死亡",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a,align:"right",features:{sortable:!0}},{code:"updateTime",name:"最后更新时间",width:180,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.d}],renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a)({columns:columns,dataSource:dataSource},Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_8__.c)({defaultSorts:[{code:"deadCount",order:"asc"},{code:"confirmedCount",order:"desc"}]}));return react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",{style:{display:"flex",alignItems:"center",height:40}},react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",{style:{marginLeft:8}},"点击表头的排序图标对表格数据进行排序"),react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("button",{style:{marginLeft:16},disabled:!0},"非受控模式下无法清除排序")),react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_4__.a,{isLoading:isLoading,dataSource:renderData.dataSource,columns:renderData.columns}))},表格排序_单列=function 表格排序_单列(){const{isLoading:isLoading,dataSource:data}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.e)(),columns=[{code:"provinceName",name:"省份",width:150,features:{sortable:!0}},{code:"confirmedCount",name:"确诊",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a,align:"right",features:{sortable:!0}},{code:"curedCount",name:"治愈",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a,align:"right",features:{sortable:!0}},{code:"deadCount",name:"死亡",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a,align:"right",features:{sortable:!0}},{code:"updateTime",name:"最后更新时间",width:180,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.d}],[sorts,onChangeSorts]=Object(react__WEBPACK_IMPORTED_MODULE_13__.useState)([{code:"deadCount",order:"desc"}]),renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a)({columns:columns,dataSource:data.slice(0,5)},ali_react_table_biz__WEBPACK_IMPORTED_MODULE_7__.a.sort({sorts:sorts,onChangeSorts:onChangeSorts,mode:"single"}));return react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",{style:{display:"flex",alignItems:"center",height:40}},react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",{style:{marginLeft:8}},"点击表头的排序图标对表格数据进行排序")),react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_4__.a,{isLoading:isLoading,dataSource:renderData.dataSource,columns:renderData.columns}))},表格排序_单列_非受控=function 表格排序_单列_非受控(){const{isLoading:isLoading,dataSource:data}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.e)(),columns=[{code:"provinceName",name:"省份",width:150,features:{sortable:!0}},{code:"confirmedCount",name:"确诊",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a,align:"right",features:{sortable:!0}},{code:"curedCount",name:"治愈",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a,align:"right",features:{sortable:!0}},{code:"deadCount",name:"死亡",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a,align:"right",features:{sortable:!0}},{code:"updateTime",name:"最后更新时间",width:180,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.d}],renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a)({columns:columns,dataSource:data.slice(0,5)},Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_8__.c)({mode:"single",defaultSorts:[{code:"deadCount",order:"desc"}]}));return react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",{style:{display:"flex",alignItems:"center",height:40}},react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",{style:{marginLeft:8}},"点击表头的排序图标对表格数据进行排序")),react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_4__.a,{isLoading:isLoading,dataSource:renderData.dataSource,columns:renderData.columns}))},表格操作栏=function 表格操作栏(){const{isLoading:isLoading,dataSource:dataSource}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.e)(),columns=_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.b.map((col,i)=>({...col,features:{enforceVisible:0===i,defaultVisible:!0}})),operationBar=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_9__.a)({features:[{type:"custom",node:"自定义文本"},{type:"click",title:react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_13___default.a.Fragment,null,react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(_carbon_icons_react__WEBPACK_IMPORTED_MODULE_3__.f,{style:{fill:"currentColor",marginRight:2}}),"自定义点击区域")},{type:"separator"},{type:"export",onExport(){Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_10__.a)(__webpack_require__(484),dataSource,columns,"export.xlsx")}},{type:"custom-columns"}],columns:columns,components:_alifd_next__WEBPACK_IMPORTED_MODULE_0__,actionColor:"#5e85f7"}),renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a)({columns:columns,dataSource:dataSource},...operationBar.transforms);return react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(_assets_fusion_style__WEBPACK_IMPORTED_MODULE_17__.a,null),react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(operationBar.view,null,operationBar.nodes),react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_4__.a,{isLoading:isLoading,dataSource:renderData.dataSource,columns:renderData.columns}))},列高亮=function 列高亮(){const{isLoading:isLoading,dataSource:data}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.e)(),[hoverColIndex,onChangeHoverColIndex]=Object(react__WEBPACK_IMPORTED_MODULE_13__.useState)(-1),renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a)({columns:_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.b,dataSource:data.slice(0,5)},ali_react_table_biz__WEBPACK_IMPORTED_MODULE_7__.a.columnHover({hoverColIndex:hoverColIndex,onChangeHoverColIndex:onChangeHoverColIndex}));return react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_4__.a,{isLoading:isLoading,dataSource:renderData.dataSource,columns:renderData.columns})},列高亮_非受控=function 列高亮_非受控(){const{isLoading:isLoading,dataSource:data}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.e)(),renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a)({columns:_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.b,dataSource:data.slice(0,5)},Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_8__.b)());return react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_4__.a,{isLoading:isLoading,dataSource:renderData.dataSource,columns:renderData.columns})},列的范围高亮=function 列的范围高亮(){const appIndProto=ali_react_table_biz__WEBPACK_IMPORTED_MODULE_11__.a.array({align:"right"}),rateIndProto=ali_react_table_biz__WEBPACK_IMPORTED_MODULE_11__.a.array({align:"right",render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.c}),columns=[{name:"维度",children:[{name:"商品信息",children:[{code:"sku_code",name:"SKU code"},{code:"sku_name",name:"SKU名称"}]},{name:"机构信息",children:[{code:"city_name",name:"城市"},{code:"shop_name",name:"门店",features:{defaultVisible:!0}}]},{name:"类目信息",children:[{code:"merge_cate_level1_name",name:"一级类目"},{code:"merge_cate_level2_name",name:"二级类目"},{code:"merge_cate_level3_name",name:"三级类目"}]}]},{name:"指标",children:[{name:"APP指标",children:appIndProto([{code:"imp_uv_dau_pct",name:"曝光UV占DAU比例",render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.c},{code:"app_trd_amt_1d",name:"APP成交金额",render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a},{code:"app_qty_pbt",name:"APP件单价"},{code:"all_app_trd_amt_1d",name:"APP成交金额汇总"},{code:"app_trd_usr_cnt_1d",name:"APP成交用户数"},{code:"appout_shop_num",name:"缺货门店数",render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a},{code:"all_time_len",name:"店均缺货时长",render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a},{code:"bad_rmk_rate",name:"订单差评率",render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.c}])},{name:"转换率",children:rateIndProto([{code:"all_imp2pay_rate",name:"整体曝光至成交转化率"},{code:"search_imp2pay_rate",name:"搜索曝光至成交转化率"},{code:"classis_imp2pay_rate",name:"分类曝光至成交转化率"},{code:"cart_imp2pay_rate",name:"购物车曝光至成交转化率"},{code:"my_page_imp2pay_rate",name:"我的曝光至成交转化率"},{code:"pq_act_imp2pay_rate",name:"活动页曝光至成交转化率"},{code:"other_imp2pay_rate",name:"其他曝光至成交转化率"}])}]}],[state,setState]=Object(react__WEBPACK_IMPORTED_MODULE_13__.useState)({isLoading:!0,data:[]});Object(react__WEBPACK_IMPORTED_MODULE_13__.useEffect)(()=>{Object(_assets_cdn_data__WEBPACK_IMPORTED_MODULE_15__.a)().then(data=>{setState({isLoading:!1,data:data.slice(0,8)})})},[]);const[hoverRange,onChangeHoverRange]=Object(react__WEBPACK_IMPORTED_MODULE_13__.useState)({start:0,end:0}),renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a)({columns:columns,dataSource:state.data},ali_react_table_biz__WEBPACK_IMPORTED_MODULE_7__.a.columnRangeHover({hoverRange:hoverRange,onChangeHoverRange:onChangeHoverRange}));return react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_4__.a,{defaultColumnWidth:120,dataSource:renderData.dataSource,columns:renderData.columns,isLoading:state.isLoading})},列的范围高亮_非受控=function 列的范围高亮_非受控(){const appIndProto=ali_react_table_biz__WEBPACK_IMPORTED_MODULE_11__.a.array({align:"right"}),rateIndProto=ali_react_table_biz__WEBPACK_IMPORTED_MODULE_11__.a.array({align:"right",render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.c}),columns=[{name:"维度",children:[{name:"商品信息",children:[{code:"sku_code",name:"SKU code"},{code:"sku_name",name:"SKU名称"}]},{name:"机构信息",children:[{code:"city_name",name:"城市"},{code:"shop_name",name:"门店",features:{defaultVisible:!0}}]},{name:"类目信息",children:[{code:"merge_cate_level1_name",name:"一级类目"},{code:"merge_cate_level2_name",name:"二级类目"},{code:"merge_cate_level3_name",name:"三级类目"}]}]},{name:"指标",children:[{name:"APP指标",children:appIndProto([{code:"imp_uv_dau_pct",name:"曝光UV占DAU比例",render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.c},{code:"app_trd_amt_1d",name:"APP成交金额",render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a},{code:"app_qty_pbt",name:"APP件单价"},{code:"all_app_trd_amt_1d",name:"APP成交金额汇总"},{code:"app_trd_usr_cnt_1d",name:"APP成交用户数"},{code:"appout_shop_num",name:"缺货门店数",render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a},{code:"all_time_len",name:"店均缺货时长",render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a},{code:"bad_rmk_rate",name:"订单差评率",render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.c}])},{name:"转换率",children:rateIndProto([{code:"all_imp2pay_rate",name:"整体曝光至成交转化率"},{code:"search_imp2pay_rate",name:"搜索曝光至成交转化率"},{code:"classis_imp2pay_rate",name:"分类曝光至成交转化率"},{code:"cart_imp2pay_rate",name:"购物车曝光至成交转化率"},{code:"my_page_imp2pay_rate",name:"我的曝光至成交转化率"},{code:"pq_act_imp2pay_rate",name:"活动页曝光至成交转化率"},{code:"other_imp2pay_rate",name:"其他曝光至成交转化率"}])}]}],[state,setState]=Object(react__WEBPACK_IMPORTED_MODULE_13__.useState)({isLoading:!0,data:[]});Object(react__WEBPACK_IMPORTED_MODULE_13__.useEffect)(()=>{Object(_assets_cdn_data__WEBPACK_IMPORTED_MODULE_15__.a)().then(data=>{setState({isLoading:!1,data:data.slice(0,8)})})},[]);const renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a)({columns:columns,dataSource:state.data},Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_8__.a)());return react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_4__.a,{defaultColumnWidth:120,dataSource:renderData.dataSource,columns:renderData.columns,isLoading:state.isLoading})},列气泡提示=function 列气泡提示(){const{isLoading:isLoading,dataSource:data}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.e)(),[sorts,onChangeSorts]=Object(react__WEBPACK_IMPORTED_MODULE_13__.useState)([]),columns=[{code:"provinceName",name:"省份",features:{tips:"省份，即我国的省级行政区，是行政地位与省相同行政区的总称，为一级行政区，包括省、自治区、直辖市、特别行政区。中国共计34个省级行政区，包括23个省、5个自治区、4个直辖市、2个特别行政区。"}},{code:"curedCount",name:"治愈",render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a,align:"right",features:{sortable:!0,tips:react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",null,"治愈是汉字词语，英文cure; heal，注音zhì yù，使恢复健康。如：在骨折完全治愈之前不要上班。 治愈指动漫中温暖人心，净化心灵，悲伤时看能得到安慰，治愈自己心灵中的创伤、修补自己心灵上缺陷的作品。 也可以指动漫中人物，拥有对主角内心抚慰、平复内心创伤的能力。可以分为行动上和语言上的。")}},{code:"updateTime",name:"最后更新时间",render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.d,features:{tips:react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",null,"时间，是物质的运动、变化的持续性、顺序性的表现，包含时刻和时段两个概念。 时间是人类用以描述物质运动过程或事件发生过程的一个参数，确定时间，是靠不受外界影响的物质周期变化的规律。以地球自转为基础的时间计量系统称为世界时系统。日、月、年、世纪的时间计量属天文学中的历法范畴。 以地球自转运动为基础的时间单位称为“日”，以月球绕地球公转运动为基础的时间单位称为“月”，以地球绕太阳公转运动为基础的时间单位称为“年”。")}}],renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a)({columns:columns,dataSource:data.slice(0,3)},ali_react_table_biz__WEBPACK_IMPORTED_MODULE_7__.a.sort({mode:"single",sorts:sorts,onChangeSorts:onChangeSorts}),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_7__.a.tips({Balloon:_alifd_next__WEBPACK_IMPORTED_MODULE_1__.a}));return react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(_assets_fusion_style__WEBPACK_IMPORTED_MODULE_17__.a,null),react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_4__.a,{isLoading:isLoading,dataSource:renderData.dataSource.slice(0,10),columns:renderData.columns}))},树状模式与层级排序=function 树状模式与层级排序(){const columns=[{code:"name",name:"数据维度",lock:!0,width:200},{code:"shop_name",name:"门店",features:{sortable:!0}},{code:"imp_uv_dau_pct",name:"曝光UV占DAU比例",render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.c,align:"right",features:{sortable:!0}},{code:"app_qty_pbt",name:"APP件单价",align:"right",features:{sortable:!0}},{code:"all_app_trd_amt_1d",name:"APP成交金额汇总",align:"right",features:{sortable:!0}}],[state,setState]=Object(react__WEBPACK_IMPORTED_MODULE_13__.useState)({isLoading:!0,data:[]});Object(react__WEBPACK_IMPORTED_MODULE_13__.useEffect)(()=>{Object(_assets_cdn_data__WEBPACK_IMPORTED_MODULE_15__.a)().then(data=>{setState({isLoading:!1,data:data})})},[]);const[openKeys,onChangeOpenKeys]=Object(react__WEBPACK_IMPORTED_MODULE_13__.useState)(["B2C"]),[sorts,onChangeSorts]=Object(react__WEBPACK_IMPORTED_MODULE_13__.useState)([]),renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a)({columns:columns,dataSource:state.data},ali_react_table_biz__WEBPACK_IMPORTED_MODULE_7__.a.buildTree("id","parent_id"),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_7__.a.sort({sorts:sorts,onChangeSorts:onChangeSorts,mode:"single"}),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_7__.a.treeMode({primaryKey:"id",openKeys:openKeys,onChangeOpenKeys:onChangeOpenKeys,indentSize:20}));return react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_4__.a,{dataSource:renderData.dataSource,columns:renderData.columns,isLoading:state.isLoading})},自定义列对话框组件=function 自定义列对话框组件(){const defaultVisibleIndProto=ali_react_table_biz__WEBPACK_IMPORTED_MODULE_11__.a.array({features:{defaultVisible:!0}}),defaultHiddenIntProto=ali_react_table_biz__WEBPACK_IMPORTED_MODULE_11__.a.array({features:{defaultVisible:!1}}),columns=[{name:"商品信息",children:defaultVisibleIndProto([{code:"order",name:"序号",features:{enforceVisible:!0}},{code:"sku_code",name:"SKU code"},{code:"sku_name",name:"SKU名称"}])},{name:"机构信息",children:defaultHiddenIntProto([{code:"city_name",name:"城市"},{code:"shop_name",name:"门店"}])},{name:"类目信息",children:defaultVisibleIndProto([{code:"merge_cate_level1_name",name:"一级类目"},{code:"merge_cate_level2_name",name:"二级类目"},{code:"merge_cate_level3_name",name:"三级类目"}])},{name:"APP指标",children:defaultVisibleIndProto([{code:"imp_uv_dau_pct",name:"曝光UV占DAU比例"},{code:"app_trd_amt_1d",name:"APP成交金额"},{code:"app_qty_pbt",name:"APP件单价"},{code:"all_app_trd_amt_1d",name:"APP成交金额汇总"},{code:"app_trd_usr_cnt_1d",name:"APP成交用户数"},{code:"appout_shop_num",name:"缺货门店数"},{code:"all_time_len",name:"店均缺货时长"},{code:"bad_rmk_rate",name:"订单差评率"}])},{name:"转换率",children:defaultHiddenIntProto([{code:"all_imp2pay_rate",name:"整体曝光至成交转化率"},{code:"search_imp2pay_rate",name:"搜索曝光至成交转化率"},{code:"classis_imp2pay_rate",name:"分类曝光至成交转化率"},{code:"cart_imp2pay_rate",name:"购物车曝光至成交转化率"},{code:"my_page_imp2pay_rate",name:"我的曝光至成交转化率"},{code:"pq_act_imp2pay_rate",name:"活动页曝光至成交转化率"},{code:"other_imp2pay_rate",name:"其他曝光至成交转化率"}])}],leafColumns=Object(ali_react_table__WEBPACK_IMPORTED_MODULE_5__.a)(columns,"leaf-only"),defaultCheckedCodes=leafColumns.filter(col=>{var _a;return null===(_a=col.features)||void 0===_a?void 0:_a.defaultVisible}).map(col=>col.code),enforceCheckedCodes=leafColumns.filter(col=>{var _a;return null===(_a=col.features)||void 0===_a?void 0:_a.enforceVisible}).map(col=>col.code),[checkedCodes,onChangeCheckedCodes]=Object(react__WEBPACK_IMPORTED_MODULE_13__.useState)(defaultCheckedCodes);return react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_13___default.a.Fragment,null,react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_12__.a,{components:_alifd_next__WEBPACK_IMPORTED_MODULE_0__,columns:columns,checkedCodes:checkedCodes,defaultCheckedCodes:defaultCheckedCodes,enforceCheckedCodes:enforceCheckedCodes,trigger:onOpen=>react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_2__.a,{size:"large",type:"primary",onClick:onOpen},"打开自定义列对话框"),onChangeCheckedCodes:nextCodes=>{console.log("自定义列对话框组件 onChangeCheckedCodes:",nextCodes),onChangeCheckedCodes(nextCodes)}}),react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(react_json_view__WEBPACK_IMPORTED_MODULE_14___default.a,{style:{marginTop:12},src:columns.map(group=>({...group,children:group.children.map(col=>JSON.stringify(col,null,1))})),name:"对应的列配置：",collapsed:0,enableClipboard:!1,displayDataTypes:!1,displayObjectSize:!1}),react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(_assets_fusion_style__WEBPACK_IMPORTED_MODULE_17__.a,null))},单元格自动合并=function 单元格自动合并(){const{dataSource:cityData,isLoading:isLoading}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.d)(),renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a)({dataSource:cityData.slice(0,4).flatMap(d=>d.children),columns:[{code:"provinceName",name:"省份",width:150,features:{autoRowSpan:!0}},_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.a.cityName,..._assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.a.indCols,{code:"updateTime",name:"最后更新时间",width:180,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.d,features:{autoRowSpan:!0}}]},ali_react_table_biz__WEBPACK_IMPORTED_MODULE_7__.a.autoRowSpan());return react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_4__.a,{isLoading:isLoading,useOuterBorder:!0,dataSource:renderData.dataSource,columns:renderData.columns})};function CustomSortHeaderCell({column:column,sortOptions:sortOptions,sortIndex:sortIndex,children:children,onToggle:onToggle,sortOrder:sortOrder}){const justifyContent="right"===column.align?"flex-end":"center"===column.align?"center":"flex-start";return react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",{onClick:onToggle,style:{display:"flex",justifyContent:justifyContent,cursor:"pointer"}},children,react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("span",{style:{marginLeft:4}},"none"===sortOrder&&react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(_carbon_icons_react__WEBPACK_IMPORTED_MODULE_3__.r,null),"asc"===sortOrder&&react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(_carbon_icons_react__WEBPACK_IMPORTED_MODULE_3__.v,null),"desc"===sortOrder&&react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(_carbon_icons_react__WEBPACK_IMPORTED_MODULE_3__.u,null)),"multiple"===sortOptions.mode&&"none"!==sortOrder&&react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("span",{style:{marginLeft:4}},sortIndex+1))}const 自定义样式的排序表头=function 自定义样式的排序表头(){const{isLoading:isLoading,dataSource:data}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.e)(),columns=[{code:"provinceName",name:"省份",width:150,features:{sortable:!0}},{code:"confirmedCount",name:"确诊",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a,align:"right",features:{sortable:!0}},{code:"curedCount",name:"治愈",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a,align:"right",features:{sortable:!0}},{code:"deadCount",name:"死亡",width:100,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.a,align:"right",features:{sortable:!0}},{code:"updateTime",name:"最后更新时间",width:180,render:_assets_format__WEBPACK_IMPORTED_MODULE_16__.d}],[sorts,onChangeSorts]=Object(react__WEBPACK_IMPORTED_MODULE_13__.useState)([{code:"confirmedCount",order:"desc"}]),renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a)({columns:columns,dataSource:data.slice(0,5)},ali_react_table_biz__WEBPACK_IMPORTED_MODULE_7__.a.sort({sorts:sorts,onChangeSorts:onChangeSorts,SortHeaderCell:CustomSortHeaderCell}));return react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",{style:{display:"flex",alignItems:"center",height:40}},react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",{style:{marginLeft:8}},"通过示例 options.SortHeaderCell 可以自定义排序表头的样式/内容"),react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("button",{style:{marginLeft:16},onClick:()=>onChangeSorts([])},"清除排序")),react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_4__.a,{isLoading:isLoading,dataSource:renderData.dataSource,columns:renderData.columns}))},拖拽调整列宽=function 拖拽调整列宽(){const{isLoading:isLoading,dataSource:data}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.e)(),columns=[_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.a.provinceName,..._assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.a.indCols,_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_18__.a.updateTime],defaultSizes=Object(ali_react_table__WEBPACK_IMPORTED_MODULE_5__.a)(columns,"leaf-only").map(col=>{var _a;return null!==(_a=col.width)&&void 0!==_a?_a:120}),[sizes,onChangeSizes]=Object(react__WEBPACK_IMPORTED_MODULE_13__.useState)(defaultSizes),renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a)({columns:columns,dataSource:data.slice(0,5)},ali_react_table_biz__WEBPACK_IMPORTED_MODULE_7__.a.columnResize({sizes:sizes,onChangeSizes:onChangeSizes,appendExpander:!0,disableUserSelectWhenResizing:!0,minSize:60,maxSize:500}));return react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",{style:{display:"flex",alignItems:"center",height:40}},react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement("div",{style:{marginLeft:8}},"拖拽调整列宽")),react__WEBPACK_IMPORTED_MODULE_13___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_4__.a,{isLoading:isLoading,dataSource:renderData.dataSource,columns:renderData.columns}))}},,function(module,exports){},function(module,exports){},,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){var map={"./cross-table.stories.mdx":879};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=878},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"交叉与透视 / 交叉表",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"交叉表是一个比较底层的 React 组件，仅提供相应表格结构的渲染能力。注意交叉表..."),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("em",{parentName:"strong"},"没有"))," 透视能力"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("em",{parentName:"strong"},"没有"))," 收拢展开功能")),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"不依赖特定组件库，可独立使用"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"简单、一致的 API 与渲染模型：",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"strong"},"左树 + 上树 => 表格"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"高性能：数据量较大时，自动开启虚拟滚动")),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"在简单的场景下，交叉表的用法很简单："),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"通过 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"leftTree")," 描述表格左侧的树状结构；"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"通过 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"topTree")," 描述表格上方的树状结构；"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"通过 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"getValue")," 来定义每个单元格的内容；"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"交叉表组件会根据 leftTree/topTree 来渲染表格结构，并调用 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"getValue")," 获取单元格的内容")),_ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"交叉与透视-交叉表示例--基本用法",mdxType:"Story"})),_ref9=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"交叉表左侧的树（leftTree）是一个树节点的数组，每个树节点的结构如下："),_ref10=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"主要属性：",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"key")," 用于在树中唯一标记一个节点；"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"value")," 表示节点中的文本值；"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"children")," 为子节点数组；"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"可选属性：",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"title")," 若非空，被渲染在页面中时，节点内容将由 title 提供",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"在不是页面渲染的情况下（例如导出到文件），title 将被忽略"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"hidden")," 表示是否隐藏节点"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"data")," 为附加在节点上的数据",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"data")," 中可以放任何内容"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"放在节点中的数据，可在渲染单元格时取出，用于决定渲染结果")))))),_ref11=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"topTree 的结构与 leftTree 类似，但其树节点的配置较为丰富，结构如下："),_ref12=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"上方的树节点继承（extends）了左侧树节点的结构，拥有相同的 key/value/data/title/hidden/children 字段。"),_ref13=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"交叉表底层使用了 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"BaseTable")," 进行渲染，而 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"BaseTable")," 中主要的表格配置是放在每一列之上的。在 topTree 中，每个叶子节点都对应的了表格中的一列，所以每个节点除了包含 key/value/data/children 之外，还包含了部分列配置（即 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"ArtColumnStaticPart"),"）。",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"ArtColumnStaticPart")," 的结构如下："),_ref14=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"name")," 列的名称；注意因为树节点已经含有 value 字段，故 name 字段在 TopCrossTreeNode 中是不起作用的）"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"code")," 在数据中的字段 code；注意交叉表使用自定义的 getValue/render 进行取值或渲染，会屏蔽掉 code 的默认取值方式"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"title")," 列标题，如果该字段非空，在渲染时会覆盖 value 字段"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"width")," 列的宽度"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"align")," 单元格中的文本或内容的 对其方向"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"hidden")," 是否锁列；",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},"不推荐"),"为交叉表的数据列设置隐藏"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"lock")," 是否锁列；",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},"不推荐"),"为交叉表的数据列设置锁列"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"features")," 功能开关")),_ref15=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"交叉表的底层依赖了 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"BaseTable"),"，故两者的 props 大部分是相同的。两者的不同点具体如下："),_ref16=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"交叉表没有 dataSource 和 columns",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"表格结构由 leftTree 和 rightTree 提供，而单元格内容由 getValue 提供"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"单元格渲染内容可使用 render 进行自定义；单元格的 props（即表格内的 td 元素）可使用 getCellProps 进行自定义"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"交叉表没有 primaryKey",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"交叉表左侧树中每个节点都有一个唯一的 key 值，故不再需要上层指定 primaryKey"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"其他新增的 props",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"交叉表使用 leftMetaColumns 来描述 leftTree 所处的列的配置",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"交叉表渲染时，左侧的树会占据表格的前几列，并自动设置 lock=true，leftMetaColumns 可用于自定义这些列"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"leftTotalNode：当 leftTree 为空时，leftTotalNode 用于渲染「总计行」，避免表格中没有数据行"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"topTotalNode：当 topTree 为空时，topTotalNode 用于渲染「总计列」，避免表格中没有数据列")))),_ref17=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"交叉表的 props 具体如下："),_ref18=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"不要被长长的 TypeScript 类型代码吓到，交叉表的 props 其实和 BaseTable 差别不大。"),_ref19=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"交叉表的左树/上树的结构被设计为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"{ key, value, children }")," 的简单结构，方便上层调用者能够从不同的数据源中生成 leftTree/topTree。"),_ref20=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"在复杂场景下，需要上层根据业务需求手动生成 leftTree/topTree/getValue。ali-react-table 也提供了一定的透视能力，可在交叉表的基础上实现前端聚合的透视表，可供使用和参考。");function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"交叉表"},"交叉表"),_ref3,_ref4,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"主要特性"},"主要特性"),_ref5,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"基本用法"},"基本用法"),_ref6,_ref7,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-js"}),"<CrossTable\n  // 推荐为交叉表设置一个默认列宽\n  defaultColumnWidth={100}\n  leftTree={leftTree}\n  topTree={topTree}\n  getValue={(leftNode, topNode) => {\n    // 自定义的取数逻辑，针对每个单元格都会调用一次\n    // leftNode 表示当前单元格对应的左侧树节点，topNode 是对应的上方树节点\n  }}\n  render={(value, leftNode, topNode) => {\n    // 可选的 自定义的渲染逻辑\n    return value\n  }}\n/>\n")),_ref8,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"lefttree-的结构"},"leftTree 的结构"),_ref9,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"/** 交叉表左侧或上方的树节点基类 */\ninterface CrossTreeNode {\n  key: string\n  value: string\n  title?: ReactNode\n  data?: any\n  hidden?: boolean\n  children?: CrossTreeNode[]\n}\n\n/** 交叉表左侧树状结构的树节点 */\ninterface LeftCrossTreeNode extends CrossTreeNode {\n  children?: CrossTreeNode[]\n}\n")),_ref10,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"toptree-的结构"},"topTree 的结构"),_ref11,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"/** 交叉表上方树状结构的树节点\n * 列的名称现由 value 字段提供，故从 ArtColumnStaticPart 移除了 name 字段 */\ninterface TopCrossTreeNode extends CrossTreeNode, Omit<ArtColumnStaticPart, 'name'> {\n  children?: TopCrossTreeNode[]\n}\n")),_ref12,_ref13,_ref14,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"其他-props"},"其他 props"),_ref15,_ref16,_ref17,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"interface CrossTableProps extends Omit<BaseTableProps, 'dataSource' | 'columns' | 'primaryKey'> {\n  leftTree: LeftCrossTreeNode[]\n  topTree: TopCrossTreeNode[]\n  leftMetaColumns?: CrossTableLeftMetaColumn[]\n  leftTotalNode?: LeftCrossTreeNode\n  topTotalNode?: TopCrossTreeNode\n\n  getValue(leftNode: LeftCrossTreeNode, topNode: TopCrossTreeNode, leftDepth: number, topDepth: number): any\n\n  render?(\n    value: any,\n    leftNode: LeftCrossTreeNode,\n    topNode: TopCrossTreeNode,\n    leftDepth: number,\n    topDepth: number,\n  ): ReactNode\n\n  getCellProps?(\n    value: any,\n    leftNode: LeftCrossTreeNode,\n    topNode: TopCrossTreeNode,\n    leftDepth: number,\n    topDepth: number,\n  ): React.TdHTMLAttributes<HTMLTableDataCellElement>\n}\n\nexport interface CrossTableLeftMetaColumn extends Omit<ArtColumnStaticPart, 'hidden'> {\n  /** 自定义渲染方法 */\n  render?(leftNode: LeftCrossTreeNode, leftDepth: number): ReactNode\n\n  /** 自定义的获取单元格 props 的方法 */\n  getCellProps?(leftNode: LeftCrossTreeNode, leftDepth: number): React.TdHTMLAttributes<HTMLTableCellElement>\n}\n")),_ref18,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"复杂场景下的交叉表"},"复杂场景下的交叉表"),_ref19,_ref20)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"交叉与透视 / 交叉表",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref21=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref21}}),__webpack_exports__.default=componentMeta},function(module,exports,__webpack_require__){var map={"./cross-table.stories.tsx":881};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=880},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"基本用法",(function(){return 基本用法}));var ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(222),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);__webpack_exports__.default={parameters:{storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import { CrossTable, LeftCrossTreeNode, TopCrossTreeNode } from 'ali-react-table/pivot'\\nimport React from 'react'\\n\\nexport default { title: '交叉与透视 / 交叉表示例' }\\n\\nexport function 基本用法() {\\n  const leftTree: LeftCrossTreeNode[] = [\\n    {\\n      key: 'forenoon',\\n      value: '上午',\\n      children: [\\n        { key: '9', value: '9:00-10:00' },\\n        { key: '10', value: '10:00-11:00' },\\n        { key: '11', value: '11:00-12:00' },\\n      ],\\n    },\\n    { key: 'lunch', value: '午餐' },\\n    {\\n      key: 'afternoon',\\n      value: '下午',\\n      children: [\\n        { key: '14', value: '14:00-15:00' },\\n        { key: '15', value: '15:00-16:00' },\\n        { key: '16', value: '16:00-17:00' },\\n      ],\\n    },\\n    { key: 'dinner', value: '晚餐' },\\n    {\\n      key: 'evening',\\n      value: '晚上',\\n      children: [\\n        { key: '20', value: '20:00-21:00' },\\n        { key: '21', value: '21:00-22:00' },\\n      ],\\n    },\\n  ]\\n\\n  const makeTopChildren = (keyPrefix: string): TopCrossTreeNode[] => [\\n    { key: `${keyPrefix}-week-0`, value: '第一周', width: 80 },\\n    { key: `${keyPrefix}-week-1`, value: '第二周', width: 80 },\\n    { key: `${keyPrefix}-week-2`, value: '第三周', width: 80 },\\n    { key: `${keyPrefix}-week-3`, value: '第四周', width: 80 },\\n  ]\\n  const topTree: TopCrossTreeNode[] = [\\n    { key: '2020-01', value: '2020-01', children: makeTopChildren('2020-01') },\\n    { key: '2020-02', value: '2020-02', children: makeTopChildren('2020-02') },\\n    { key: '2020-03', value: '2020-03', children: makeTopChildren('2020-03') },\\n    { key: '2020-04', value: '2020-04', children: makeTopChildren('2020-04') },\\n    { key: '2020-05', value: '2020-05', children: makeTopChildren('2020-05') },\\n    { key: '2020-06', value: '2020-06', children: makeTopChildren('2020-06') },\\n  ]\\n\\n  const getValue = (leftNode: LeftCrossTreeNode, topNode: TopCrossTreeNode) => {\\n    if (leftNode.key === 'lunch') {\\n      if (topNode.key.endsWith('week-0')) {\\n        return '肯德基'\\n      } else if (topNode.key.endsWith('week-1')) {\\n        return '麦当劳'\\n      } else if (topNode.key.endsWith('week-2')) {\\n        return '汉堡王'\\n      } else {\\n        return '烧烤'\\n      }\\n    } else if (leftNode.key === 'dinner') {\\n      if (topNode.key.endsWith('week-0')) {\\n        return '盒马'\\n      } else if (topNode.key.endsWith('week-1')) {\\n        return '海底捞'\\n      } else if (topNode.key.endsWith('week-2')) {\\n        return '麦当劳'\\n      } else {\\n        return '体重+1'\\n      }\\n    }\\n  }\\n\\n  return (\\n    <div>\\n      <p style={{ fontSize: 16, marginTop: 0 }}>2020年 养猪计划</p>\\n      <CrossTable\\n        defaultColumnWidth={100}\\n        leftTree={leftTree}\\n        topTree={topTree}\\n        // 自定义的取数逻辑\\n        getValue={getValue}\\n        // 可选的 自定义的渲染逻辑\\n        render={(value, leftNode, topNode) => {\\n          return value\\n        }}\\n      />\\n    </div>\\n  )\\n}\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"交叉与透视-交叉表示例--基本用法\":{\"startLoc\":{\"col\":7,\"line\":6},\"endLoc\":{\"col\":1,\"line\":93},\"startBody\":{\"col\":7,\"line\":6},\"endBody\":{\"col\":1,\"line\":93}}};\n    \nimport { CrossTable, LeftCrossTreeNode, TopCrossTreeNode } from 'ali-react-table/pivot'\nimport React from 'react'\n\nexport default {parameters: {\"storySource\":{\"source\":\"import { CrossTable, LeftCrossTreeNode, TopCrossTreeNode } from 'ali-react-table/pivot'\\nimport React from 'react'\\n\\nexport default { title: '交叉与透视 / 交叉表示例' }\\n\\nexport function 基本用法() {\\n  const leftTree: LeftCrossTreeNode[] = [\\n    {\\n      key: 'forenoon',\\n      value: '上午',\\n      children: [\\n        { key: '9', value: '9:00-10:00' },\\n        { key: '10', value: '10:00-11:00' },\\n        { key: '11', value: '11:00-12:00' },\\n      ],\\n    },\\n    { key: 'lunch', value: '午餐' },\\n    {\\n      key: 'afternoon',\\n      value: '下午',\\n      children: [\\n        { key: '14', value: '14:00-15:00' },\\n        { key: '15', value: '15:00-16:00' },\\n        { key: '16', value: '16:00-17:00' },\\n      ],\\n    },\\n    { key: 'dinner', value: '晚餐' },\\n    {\\n      key: 'evening',\\n      value: '晚上',\\n      children: [\\n        { key: '20', value: '20:00-21:00' },\\n        { key: '21', value: '21:00-22:00' },\\n      ],\\n    },\\n  ]\\n\\n  const makeTopChildren = (keyPrefix: string): TopCrossTreeNode[] => [\\n    { key: `${keyPrefix}-week-0`, value: '第一周', width: 80 },\\n    { key: `${keyPrefix}-week-1`, value: '第二周', width: 80 },\\n    { key: `${keyPrefix}-week-2`, value: '第三周', width: 80 },\\n    { key: `${keyPrefix}-week-3`, value: '第四周', width: 80 },\\n  ]\\n  const topTree: TopCrossTreeNode[] = [\\n    { key: '2020-01', value: '2020-01', children: makeTopChildren('2020-01') },\\n    { key: '2020-02', value: '2020-02', children: makeTopChildren('2020-02') },\\n    { key: '2020-03', value: '2020-03', children: makeTopChildren('2020-03') },\\n    { key: '2020-04', value: '2020-04', children: makeTopChildren('2020-04') },\\n    { key: '2020-05', value: '2020-05', children: makeTopChildren('2020-05') },\\n    { key: '2020-06', value: '2020-06', children: makeTopChildren('2020-06') },\\n  ]\\n\\n  const getValue = (leftNode: LeftCrossTreeNode, topNode: TopCrossTreeNode) => {\\n    if (leftNode.key === 'lunch') {\\n      if (topNode.key.endsWith('week-0')) {\\n        return '肯德基'\\n      } else if (topNode.key.endsWith('week-1')) {\\n        return '麦当劳'\\n      } else if (topNode.key.endsWith('week-2')) {\\n        return '汉堡王'\\n      } else {\\n        return '烧烤'\\n      }\\n    } else if (leftNode.key === 'dinner') {\\n      if (topNode.key.endsWith('week-0')) {\\n        return '盒马'\\n      } else if (topNode.key.endsWith('week-1')) {\\n        return '海底捞'\\n      } else if (topNode.key.endsWith('week-2')) {\\n        return '麦当劳'\\n      } else {\\n        return '体重+1'\\n      }\\n    }\\n  }\\n\\n  return (\\n    <div>\\n      <p style={{ fontSize: 16, marginTop: 0 }}>2020年 养猪计划</p>\\n      <CrossTable\\n        defaultColumnWidth={100}\\n        leftTree={leftTree}\\n        topTree={topTree}\\n        // 自定义的取数逻辑\\n        getValue={getValue}\\n        // 可选的 自定义的渲染逻辑\\n        render={(value, leftNode, topNode) => {\\n          return value\\n        }}\\n      />\\n    </div>\\n  )\\n}\\n\",\"locationsMap\":{\"交叉与透视-交叉表示例--基本用法\":{\"startLoc\":{\"col\":7,\"line\":6},\"endLoc\":{\"col\":1,\"line\":93},\"startBody\":{\"col\":7,\"line\":6},\"endBody\":{\"col\":1,\"line\":93}}}},}, title: '交叉与透视 / 交叉表示例' }\n\nexport const 基本用法 = function 基本用法() {\n  const leftTree: LeftCrossTreeNode[] = [\n    {\n      key: 'forenoon',\n      value: '上午',\n      children: [\n        { key: '9', value: '9:00-10:00' },\n        { key: '10', value: '10:00-11:00' },\n        { key: '11', value: '11:00-12:00' },\n      ],\n    },\n    { key: 'lunch', value: '午餐' },\n    {\n      key: 'afternoon',\n      value: '下午',\n      children: [\n        { key: '14', value: '14:00-15:00' },\n        { key: '15', value: '15:00-16:00' },\n        { key: '16', value: '16:00-17:00' },\n      ],\n    },\n    { key: 'dinner', value: '晚餐' },\n    {\n      key: 'evening',\n      value: '晚上',\n      children: [\n        { key: '20', value: '20:00-21:00' },\n        { key: '21', value: '21:00-22:00' },\n      ],\n    },\n  ]\n\n  const makeTopChildren = (keyPrefix: string): TopCrossTreeNode[] => [\n    { key: `${keyPrefix}-week-0`, value: '第一周', width: 80 },\n    { key: `${keyPrefix}-week-1`, value: '第二周', width: 80 },\n    { key: `${keyPrefix}-week-2`, value: '第三周', width: 80 },\n    { key: `${keyPrefix}-week-3`, value: '第四周', width: 80 },\n  ]\n  const topTree: TopCrossTreeNode[] = [\n    { key: '2020-01', value: '2020-01', children: makeTopChildren('2020-01') },\n    { key: '2020-02', value: '2020-02', children: makeTopChildren('2020-02') },\n    { key: '2020-03', value: '2020-03', children: makeTopChildren('2020-03') },\n    { key: '2020-04', value: '2020-04', children: makeTopChildren('2020-04') },\n    { key: '2020-05', value: '2020-05', children: makeTopChildren('2020-05') },\n    { key: '2020-06', value: '2020-06', children: makeTopChildren('2020-06') },\n  ]\n\n  const getValue = (leftNode: LeftCrossTreeNode, topNode: TopCrossTreeNode) => {\n    if (leftNode.key === 'lunch') {\n      if (topNode.key.endsWith('week-0')) {\n        return '肯德基'\n      } else if (topNode.key.endsWith('week-1')) {\n        return '麦当劳'\n      } else if (topNode.key.endsWith('week-2')) {\n        return '汉堡王'\n      } else {\n        return '烧烤'\n      }\n    } else if (leftNode.key === 'dinner') {\n      if (topNode.key.endsWith('week-0')) {\n        return '盒马'\n      } else if (topNode.key.endsWith('week-1')) {\n        return '海底捞'\n      } else if (topNode.key.endsWith('week-2')) {\n        return '麦当劳'\n      } else {\n        return '体重+1'\n      }\n    }\n  }\n\n  return (\n    <div>\n      <p style={{ fontSize: 16, marginTop: 0 }}>2020年 养猪计划</p>\n      <CrossTable\n        defaultColumnWidth={100}\n        leftTree={leftTree}\n        topTree={topTree}\n        // 自定义的取数逻辑\n        getValue={getValue}\n        // 可选的 自定义的渲染逻辑\n        render={(value, leftNode, topNode) => {\n          return value\n        }}\n      />\n    </div>\n  )\n};",locationsMap:{"交叉与透视-交叉表示例--基本用法":{startLoc:{col:20,line:14},endLoc:{col:1,line:101},startBody:{col:20,line:14},endBody:{col:1,line:101}}}},storySource:{source:"import { CrossTable, LeftCrossTreeNode, TopCrossTreeNode } from 'ali-react-table/pivot'\nimport React from 'react'\n\nexport default { title: '交叉与透视 / 交叉表示例' }\n\nexport function 基本用法() {\n  const leftTree: LeftCrossTreeNode[] = [\n    {\n      key: 'forenoon',\n      value: '上午',\n      children: [\n        { key: '9', value: '9:00-10:00' },\n        { key: '10', value: '10:00-11:00' },\n        { key: '11', value: '11:00-12:00' },\n      ],\n    },\n    { key: 'lunch', value: '午餐' },\n    {\n      key: 'afternoon',\n      value: '下午',\n      children: [\n        { key: '14', value: '14:00-15:00' },\n        { key: '15', value: '15:00-16:00' },\n        { key: '16', value: '16:00-17:00' },\n      ],\n    },\n    { key: 'dinner', value: '晚餐' },\n    {\n      key: 'evening',\n      value: '晚上',\n      children: [\n        { key: '20', value: '20:00-21:00' },\n        { key: '21', value: '21:00-22:00' },\n      ],\n    },\n  ]\n\n  const makeTopChildren = (keyPrefix: string): TopCrossTreeNode[] => [\n    { key: `${keyPrefix}-week-0`, value: '第一周', width: 80 },\n    { key: `${keyPrefix}-week-1`, value: '第二周', width: 80 },\n    { key: `${keyPrefix}-week-2`, value: '第三周', width: 80 },\n    { key: `${keyPrefix}-week-3`, value: '第四周', width: 80 },\n  ]\n  const topTree: TopCrossTreeNode[] = [\n    { key: '2020-01', value: '2020-01', children: makeTopChildren('2020-01') },\n    { key: '2020-02', value: '2020-02', children: makeTopChildren('2020-02') },\n    { key: '2020-03', value: '2020-03', children: makeTopChildren('2020-03') },\n    { key: '2020-04', value: '2020-04', children: makeTopChildren('2020-04') },\n    { key: '2020-05', value: '2020-05', children: makeTopChildren('2020-05') },\n    { key: '2020-06', value: '2020-06', children: makeTopChildren('2020-06') },\n  ]\n\n  const getValue = (leftNode: LeftCrossTreeNode, topNode: TopCrossTreeNode) => {\n    if (leftNode.key === 'lunch') {\n      if (topNode.key.endsWith('week-0')) {\n        return '肯德基'\n      } else if (topNode.key.endsWith('week-1')) {\n        return '麦当劳'\n      } else if (topNode.key.endsWith('week-2')) {\n        return '汉堡王'\n      } else {\n        return '烧烤'\n      }\n    } else if (leftNode.key === 'dinner') {\n      if (topNode.key.endsWith('week-0')) {\n        return '盒马'\n      } else if (topNode.key.endsWith('week-1')) {\n        return '海底捞'\n      } else if (topNode.key.endsWith('week-2')) {\n        return '麦当劳'\n      } else {\n        return '体重+1'\n      }\n    }\n  }\n\n  return (\n    <div>\n      <p style={{ fontSize: 16, marginTop: 0 }}>2020年 养猪计划</p>\n      <CrossTable\n        defaultColumnWidth={100}\n        leftTree={leftTree}\n        topTree={topTree}\n        // 自定义的取数逻辑\n        getValue={getValue}\n        // 可选的 自定义的渲染逻辑\n        render={(value, leftNode, topNode) => {\n          return value\n        }}\n      />\n    </div>\n  )\n}\n",locationsMap:{"交叉与透视-交叉表示例--基本用法":{startLoc:{col:7,line:6},endLoc:{col:1,line:93},startBody:{col:7,line:6},endBody:{col:1,line:93}}}}},title:"交叉与透视 / 交叉表示例"};const 基本用法=function 基本用法(){const makeTopChildren=keyPrefix=>[{key:keyPrefix+"-week-0",value:"第一周",width:80},{key:keyPrefix+"-week-1",value:"第二周",width:80},{key:keyPrefix+"-week-2",value:"第三周",width:80},{key:keyPrefix+"-week-3",value:"第四周",width:80}],topTree=[{key:"2020-01",value:"2020-01",children:makeTopChildren("2020-01")},{key:"2020-02",value:"2020-02",children:makeTopChildren("2020-02")},{key:"2020-03",value:"2020-03",children:makeTopChildren("2020-03")},{key:"2020-04",value:"2020-04",children:makeTopChildren("2020-04")},{key:"2020-05",value:"2020-05",children:makeTopChildren("2020-05")},{key:"2020-06",value:"2020-06",children:makeTopChildren("2020-06")}];return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p",{style:{fontSize:16,marginTop:0}},"2020年 养猪计划"),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_0__.a,{defaultColumnWidth:100,leftTree:[{key:"forenoon",value:"上午",children:[{key:"9",value:"9:00-10:00"},{key:"10",value:"10:00-11:00"},{key:"11",value:"11:00-12:00"}]},{key:"lunch",value:"午餐"},{key:"afternoon",value:"下午",children:[{key:"14",value:"14:00-15:00"},{key:"15",value:"15:00-16:00"},{key:"16",value:"16:00-17:00"}]},{key:"dinner",value:"晚餐"},{key:"evening",value:"晚上",children:[{key:"20",value:"20:00-21:00"},{key:"21",value:"21:00-22:00"}]}],topTree:topTree,getValue:(leftNode,topNode)=>"lunch"===leftNode.key?topNode.key.endsWith("week-0")?"肯德基":topNode.key.endsWith("week-1")?"麦当劳":topNode.key.endsWith("week-2")?"汉堡王":"烧烤":"dinner"===leftNode.key?topNode.key.endsWith("week-0")?"盒马":topNode.key.endsWith("week-1")?"海底捞":topNode.key.endsWith("week-2")?"麦当劳":"体重+1":void 0,render:(value,leftNode,topNode)=>value}))}},function(module,exports,__webpack_require__){var map={"./cross-tree-table.stories.mdx":883};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=882},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16),_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(58),_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default=__webpack_require__.n(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14__);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"交叉与透视 / 交叉树状表格",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"交叉树状表格（CrossTreeTable）与交叉表（CrossTable）类似，但在表格左侧提供了树状展开/收拢的能力，更适用于日常业务开发。"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"不依赖特定组件库，可独立使用"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"简单、一致的 API 与渲染模型：",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"strong"},"左树 + 上树 => 表格"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"高性能：数据量较大时，自动开启虚拟滚动")),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"CrossTreeTable 主要由以下几个部分组成："),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"primaryColumn")," 描述表格第一列"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"通过 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"leftTree")," 描述表格左侧的树状结构；"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"通过 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"topTree")," 描述表格上方的树状结构；"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"通过 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"getValue")," 来定义每个单元格的内容；"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"CrossTreeTable 会根据 leftTree/topTree 来渲染表格结构，并调用 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"getValue")," 获取单元格的内容")),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"交叉与透视-交叉树状表格示例--基本示例",mdxType:"Story"})),_ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"leftTree/topTree 都是一个具有 key/value/children 嵌套结构的数组，详见 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_links_react__WEBPACK_IMPORTED_MODULE_14___default.a,{kind:"交叉与透视 / 交叉表",story:"page",mdxType:"LinkTo"},"交叉表文档"),"."),_ref9=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"注意 CrossTreeTable 对于 leftTree 和 topTree 的处理有所不同："),_ref10=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"leftTree 中的每个节点对应表格中的一行，包括叶子节点和非叶节点"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"topTree 中的叶子节点对应 表格上的一列")),_ref11=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"CrossTreeTable 的底层依赖了 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"BaseTable"),"，故两者的 props 大部分是相同的。两者的不同点具体如下："),_ref12=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"CrossTreeTable 没有 dataSource 和 columns",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"表格结构由 leftTree 和 rightTree 提供，而单元格内容由 getValue 提供"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"单元格渲染内容可使用 render 进行自定义；单元格的 props（即表格内的 td 元素）可使用 getCellProps 进行自定义"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"CrossTreeTable 没有 primaryKey",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"CrossTreeTable 左侧树中每个节点都有一个唯一的 key 值，故不再需要上层指定 primaryKey"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"其他新增的 props",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"CrossTreeTable 使用 primaryColumn 来描述 表格第一列的配置"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"openKeys/onChangeOpenKeys/defaultOpenKeys：树状模式下展开节点的 key 数组")))),_ref13=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"CrossTreeTable props 具体如下："),_ref14=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"不要被长长的 TypeScript 类型代码吓到，CrossTreeTable 的 props 其实和 BaseTable 差别不大（好吧，还是有点大的）。");function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"交叉树状表格"},"交叉树状表格"),_ref3,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"主要特性"},"主要特性"),_ref4,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"用法"},"用法"),_ref5,_ref6,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-js"}),"// prettier-ignore\n<CrossTreeTable\n  // 推荐为 CrossTreeTable 设置一个默认列宽\n  defaultColumnWidth={100}\n\n  // 非受控用法\n  defaultOpenKeys={[leftTree[0].key]}\n\n  // 受控用法\n  // openKeys={openKeys}\n  // onChangeOpenKeys={nextOpenKeys => { /* update openKeys */ }}\n\n  // 表格第一列的配置\n  primaryColumn={{ lock: true, name: '数据维度', width: 200 }}\n\n  leftTree={leftTree}\n  topTree={topTree}\n  getValue={(leftNode, topNode) => {\n    // 自定义的取数逻辑，针对每个单元格都会调用一次\n    // leftNode 表示当前单元格对应的左侧树节点，topNode 是对应的上方树节点\n  }}\n\n  // 可选的自定义的渲染逻辑\n  render={(value, leftNode, topNode) => {\n    return value\n  }}\n/>\n")),_ref7,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"lefttree-的结构--toptree-的结构"},"leftTree 的结构 / topTree 的结构"),_ref8,_ref9,_ref10,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"其他-props"},"其他 props"),_ref11,_ref12,_ref13,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"export interface CrossTreeTableProps extends Omit<BaseTableProps, 'dataSource' | 'columns' | 'primaryKey'> {\n  primaryColumn: CrossTableLeftMetaColumn\n  leftTree: LeftCrossTreeNode[]\n  topTree: TopCrossTreeNode[]\n\n  defaultOpenKeys?: string[]\n  openKeys?: string[]\n  onChangeOpenKeys?(nextOpenKeys: string[]): void\n\n  getValue(leftNode: LeftCrossTreeNode, topNode: TopCrossTreeNode, leftDepth: number, topDepth: number): any\n  render?(\n    value: any,\n    leftNode: LeftCrossTreeNode,\n    topNode: TopCrossTreeNode,\n    leftDepth: number,\n    topDepth: number,\n  ): ReactNode\n  getCellProps?(\n    value: any,\n    leftNode: LeftCrossTreeNode,\n    topNode: TopCrossTreeNode,\n    leftDepth: number,\n    topDepth: number,\n  ): React.TdHTMLAttributes<HTMLTableDataCellElement>\n}\n\nexport interface CrossTableLeftMetaColumn extends Omit<ArtColumnStaticPart, 'hidden'> {\n  /** 自定义渲染方法 */\n  render?(leftNode: LeftCrossTreeNode, leftDepth: number): ReactNode\n\n  /** 自定义的获取单元格 props 的方法 */\n  getCellProps?(leftNode: LeftCrossTreeNode, leftDepth: number): React.TdHTMLAttributes<HTMLTableCellElement>\n}\n")),_ref14)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"交叉与透视 / 交叉树状表格",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref15=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref15}}),__webpack_exports__.default=componentMeta},function(module,exports,__webpack_require__){var map={"./cross-tree-table.stories.tsx":885};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=884},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"基本示例",(function(){return 基本示例}));var ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(911),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);__webpack_exports__.default={parameters:{storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import { CrossTreeTable, LeftCrossTreeNode, TopCrossTreeNode } from 'ali-react-table/pivot'\\nimport React from 'react'\\n\\nexport default { title: '交叉与透视 / 交叉树状表格示例' }\\n\\nexport function 基本示例() {\\n  const leftTree: LeftCrossTreeNode[] = [\\n    {\\n      key: 'forenoon',\\n      value: '上午',\\n      data: { parent: true },\\n      children: [\\n        { key: '9', value: '9:00-10:00', data: { x: 0 } },\\n        { key: '10', value: '10:00-11:00', data: { x: 1 } },\\n        { key: '11', value: '11:00-12:00', data: { x: 2 } },\\n      ],\\n    },\\n    {\\n      key: 'afternoon',\\n      value: '下午',\\n      data: { parent: true },\\n      children: [\\n        { key: '14', value: '14:00-15:00', data: { x: 3 } },\\n        { key: '15', value: '15:00-16:00', data: { x: 4 } },\\n        { key: '16', value: '16:00-17:00', data: { x: 5 } },\\n      ],\\n    },\\n    {\\n      key: 'evening',\\n      value: '晚上',\\n      data: { parent: true },\\n      children: [\\n        { key: '20', value: '20:00-21:00', data: { x: 7 } },\\n        { key: '21', value: '21:00-22:00', data: { x: 8 } },\\n      ],\\n    },\\n  ]\\n\\n  const makeTopChildren = (keyPrefix: string): TopCrossTreeNode[] => [\\n    { key: `${keyPrefix}-week-0`, value: '第一周', data: { y: 0 } },\\n    { key: `${keyPrefix}-week-1`, value: '第二周', data: { y: 1 } },\\n    { key: `${keyPrefix}-week-2`, value: '第三周', data: { y: 2 } },\\n    { key: `${keyPrefix}-week-3`, value: '第四周', data: { y: 3 } },\\n  ]\\n  const topTree: TopCrossTreeNode[] = [\\n    { key: '2020-01', value: '2020-01', children: makeTopChildren('2020-01') },\\n    { key: '2020-02', value: '2020-02', children: makeTopChildren('2020-02') },\\n    { key: '2020-03', value: '2020-03', children: makeTopChildren('2020-03') },\\n    { key: '2020-04', value: '2020-04', children: makeTopChildren('2020-04') },\\n    { key: '2020-05', value: '2020-05', children: makeTopChildren('2020-05') },\\n    { key: '2020-06', value: '2020-06', children: makeTopChildren('2020-06') },\\n  ]\\n\\n  const getValue = (leftNode: LeftCrossTreeNode, topNode: TopCrossTreeNode) => {\\n    if (leftNode.data.parent) {\\n      const map: any = {\\n        forenoon: '万事开头难',\\n        afternoon: '然后中间难',\\n        evening: '最后结束难',\\n      }\\n      return map[leftNode.key]\\n    }\\n\\n    const courses = ['数学', '英语', '计算机基础', '数据结构', '线性代数', '微积分', '概率论']\\n    const i = (leftNode.data.x + topNode.data.y) % courses.length\\n    return courses[i]\\n  }\\n\\n  return (\\n    <div>\\n      <p style={{ fontSize: 16, marginTop: 0 }}>2020年 学习计划</p>\\n      <CrossTreeTable\\n        // 非受控用法：\\n        defaultOpenKeys={[leftTree[0].key]}\\n        // 受控用法：\\n        // const [openKeys, onChangeOpenKeys] = useState([leftTree[0].key])\\n        // openKeys={openKeys}\\n        // onChangeOpenKeys={onChangeOpenKeys}\\n\\n        // 表格第一列的配置\\n        primaryColumn={{ lock: true, name: '数据维度', width: 200 }}\\n        defaultColumnWidth={100}\\n        leftTree={leftTree}\\n        topTree={topTree}\\n        getValue={getValue}\\n      />\\n    </div>\\n  )\\n}\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"交叉与透视-交叉树状表格示例--基本示例\":{\"startLoc\":{\"col\":7,\"line\":6},\"endLoc\":{\"col\":1,\"line\":89},\"startBody\":{\"col\":7,\"line\":6},\"endBody\":{\"col\":1,\"line\":89}}};\n    \nimport { CrossTreeTable, LeftCrossTreeNode, TopCrossTreeNode } from 'ali-react-table/pivot'\nimport React from 'react'\n\nexport default {parameters: {\"storySource\":{\"source\":\"import { CrossTreeTable, LeftCrossTreeNode, TopCrossTreeNode } from 'ali-react-table/pivot'\\nimport React from 'react'\\n\\nexport default { title: '交叉与透视 / 交叉树状表格示例' }\\n\\nexport function 基本示例() {\\n  const leftTree: LeftCrossTreeNode[] = [\\n    {\\n      key: 'forenoon',\\n      value: '上午',\\n      data: { parent: true },\\n      children: [\\n        { key: '9', value: '9:00-10:00', data: { x: 0 } },\\n        { key: '10', value: '10:00-11:00', data: { x: 1 } },\\n        { key: '11', value: '11:00-12:00', data: { x: 2 } },\\n      ],\\n    },\\n    {\\n      key: 'afternoon',\\n      value: '下午',\\n      data: { parent: true },\\n      children: [\\n        { key: '14', value: '14:00-15:00', data: { x: 3 } },\\n        { key: '15', value: '15:00-16:00', data: { x: 4 } },\\n        { key: '16', value: '16:00-17:00', data: { x: 5 } },\\n      ],\\n    },\\n    {\\n      key: 'evening',\\n      value: '晚上',\\n      data: { parent: true },\\n      children: [\\n        { key: '20', value: '20:00-21:00', data: { x: 7 } },\\n        { key: '21', value: '21:00-22:00', data: { x: 8 } },\\n      ],\\n    },\\n  ]\\n\\n  const makeTopChildren = (keyPrefix: string): TopCrossTreeNode[] => [\\n    { key: `${keyPrefix}-week-0`, value: '第一周', data: { y: 0 } },\\n    { key: `${keyPrefix}-week-1`, value: '第二周', data: { y: 1 } },\\n    { key: `${keyPrefix}-week-2`, value: '第三周', data: { y: 2 } },\\n    { key: `${keyPrefix}-week-3`, value: '第四周', data: { y: 3 } },\\n  ]\\n  const topTree: TopCrossTreeNode[] = [\\n    { key: '2020-01', value: '2020-01', children: makeTopChildren('2020-01') },\\n    { key: '2020-02', value: '2020-02', children: makeTopChildren('2020-02') },\\n    { key: '2020-03', value: '2020-03', children: makeTopChildren('2020-03') },\\n    { key: '2020-04', value: '2020-04', children: makeTopChildren('2020-04') },\\n    { key: '2020-05', value: '2020-05', children: makeTopChildren('2020-05') },\\n    { key: '2020-06', value: '2020-06', children: makeTopChildren('2020-06') },\\n  ]\\n\\n  const getValue = (leftNode: LeftCrossTreeNode, topNode: TopCrossTreeNode) => {\\n    if (leftNode.data.parent) {\\n      const map: any = {\\n        forenoon: '万事开头难',\\n        afternoon: '然后中间难',\\n        evening: '最后结束难',\\n      }\\n      return map[leftNode.key]\\n    }\\n\\n    const courses = ['数学', '英语', '计算机基础', '数据结构', '线性代数', '微积分', '概率论']\\n    const i = (leftNode.data.x + topNode.data.y) % courses.length\\n    return courses[i]\\n  }\\n\\n  return (\\n    <div>\\n      <p style={{ fontSize: 16, marginTop: 0 }}>2020年 学习计划</p>\\n      <CrossTreeTable\\n        // 非受控用法：\\n        defaultOpenKeys={[leftTree[0].key]}\\n        // 受控用法：\\n        // const [openKeys, onChangeOpenKeys] = useState([leftTree[0].key])\\n        // openKeys={openKeys}\\n        // onChangeOpenKeys={onChangeOpenKeys}\\n\\n        // 表格第一列的配置\\n        primaryColumn={{ lock: true, name: '数据维度', width: 200 }}\\n        defaultColumnWidth={100}\\n        leftTree={leftTree}\\n        topTree={topTree}\\n        getValue={getValue}\\n      />\\n    </div>\\n  )\\n}\\n\",\"locationsMap\":{\"交叉与透视-交叉树状表格示例--基本示例\":{\"startLoc\":{\"col\":7,\"line\":6},\"endLoc\":{\"col\":1,\"line\":89},\"startBody\":{\"col\":7,\"line\":6},\"endBody\":{\"col\":1,\"line\":89}}}},}, title: '交叉与透视 / 交叉树状表格示例' }\n\nexport const 基本示例 = function 基本示例() {\n  const leftTree: LeftCrossTreeNode[] = [\n    {\n      key: 'forenoon',\n      value: '上午',\n      data: { parent: true },\n      children: [\n        { key: '9', value: '9:00-10:00', data: { x: 0 } },\n        { key: '10', value: '10:00-11:00', data: { x: 1 } },\n        { key: '11', value: '11:00-12:00', data: { x: 2 } },\n      ],\n    },\n    {\n      key: 'afternoon',\n      value: '下午',\n      data: { parent: true },\n      children: [\n        { key: '14', value: '14:00-15:00', data: { x: 3 } },\n        { key: '15', value: '15:00-16:00', data: { x: 4 } },\n        { key: '16', value: '16:00-17:00', data: { x: 5 } },\n      ],\n    },\n    {\n      key: 'evening',\n      value: '晚上',\n      data: { parent: true },\n      children: [\n        { key: '20', value: '20:00-21:00', data: { x: 7 } },\n        { key: '21', value: '21:00-22:00', data: { x: 8 } },\n      ],\n    },\n  ]\n\n  const makeTopChildren = (keyPrefix: string): TopCrossTreeNode[] => [\n    { key: `${keyPrefix}-week-0`, value: '第一周', data: { y: 0 } },\n    { key: `${keyPrefix}-week-1`, value: '第二周', data: { y: 1 } },\n    { key: `${keyPrefix}-week-2`, value: '第三周', data: { y: 2 } },\n    { key: `${keyPrefix}-week-3`, value: '第四周', data: { y: 3 } },\n  ]\n  const topTree: TopCrossTreeNode[] = [\n    { key: '2020-01', value: '2020-01', children: makeTopChildren('2020-01') },\n    { key: '2020-02', value: '2020-02', children: makeTopChildren('2020-02') },\n    { key: '2020-03', value: '2020-03', children: makeTopChildren('2020-03') },\n    { key: '2020-04', value: '2020-04', children: makeTopChildren('2020-04') },\n    { key: '2020-05', value: '2020-05', children: makeTopChildren('2020-05') },\n    { key: '2020-06', value: '2020-06', children: makeTopChildren('2020-06') },\n  ]\n\n  const getValue = (leftNode: LeftCrossTreeNode, topNode: TopCrossTreeNode) => {\n    if (leftNode.data.parent) {\n      const map: any = {\n        forenoon: '万事开头难',\n        afternoon: '然后中间难',\n        evening: '最后结束难',\n      }\n      return map[leftNode.key]\n    }\n\n    const courses = ['数学', '英语', '计算机基础', '数据结构', '线性代数', '微积分', '概率论']\n    const i = (leftNode.data.x + topNode.data.y) % courses.length\n    return courses[i]\n  }\n\n  return (\n    <div>\n      <p style={{ fontSize: 16, marginTop: 0 }}>2020年 学习计划</p>\n      <CrossTreeTable\n        // 非受控用法：\n        defaultOpenKeys={[leftTree[0].key]}\n        // 受控用法：\n        // const [openKeys, onChangeOpenKeys] = useState([leftTree[0].key])\n        // openKeys={openKeys}\n        // onChangeOpenKeys={onChangeOpenKeys}\n\n        // 表格第一列的配置\n        primaryColumn={{ lock: true, name: '数据维度', width: 200 }}\n        defaultColumnWidth={100}\n        leftTree={leftTree}\n        topTree={topTree}\n        getValue={getValue}\n      />\n    </div>\n  )\n};",locationsMap:{"交叉与透视-交叉树状表格示例--基本示例":{startLoc:{col:20,line:14},endLoc:{col:1,line:97},startBody:{col:20,line:14},endBody:{col:1,line:97}}}},storySource:{source:"import { CrossTreeTable, LeftCrossTreeNode, TopCrossTreeNode } from 'ali-react-table/pivot'\nimport React from 'react'\n\nexport default { title: '交叉与透视 / 交叉树状表格示例' }\n\nexport function 基本示例() {\n  const leftTree: LeftCrossTreeNode[] = [\n    {\n      key: 'forenoon',\n      value: '上午',\n      data: { parent: true },\n      children: [\n        { key: '9', value: '9:00-10:00', data: { x: 0 } },\n        { key: '10', value: '10:00-11:00', data: { x: 1 } },\n        { key: '11', value: '11:00-12:00', data: { x: 2 } },\n      ],\n    },\n    {\n      key: 'afternoon',\n      value: '下午',\n      data: { parent: true },\n      children: [\n        { key: '14', value: '14:00-15:00', data: { x: 3 } },\n        { key: '15', value: '15:00-16:00', data: { x: 4 } },\n        { key: '16', value: '16:00-17:00', data: { x: 5 } },\n      ],\n    },\n    {\n      key: 'evening',\n      value: '晚上',\n      data: { parent: true },\n      children: [\n        { key: '20', value: '20:00-21:00', data: { x: 7 } },\n        { key: '21', value: '21:00-22:00', data: { x: 8 } },\n      ],\n    },\n  ]\n\n  const makeTopChildren = (keyPrefix: string): TopCrossTreeNode[] => [\n    { key: `${keyPrefix}-week-0`, value: '第一周', data: { y: 0 } },\n    { key: `${keyPrefix}-week-1`, value: '第二周', data: { y: 1 } },\n    { key: `${keyPrefix}-week-2`, value: '第三周', data: { y: 2 } },\n    { key: `${keyPrefix}-week-3`, value: '第四周', data: { y: 3 } },\n  ]\n  const topTree: TopCrossTreeNode[] = [\n    { key: '2020-01', value: '2020-01', children: makeTopChildren('2020-01') },\n    { key: '2020-02', value: '2020-02', children: makeTopChildren('2020-02') },\n    { key: '2020-03', value: '2020-03', children: makeTopChildren('2020-03') },\n    { key: '2020-04', value: '2020-04', children: makeTopChildren('2020-04') },\n    { key: '2020-05', value: '2020-05', children: makeTopChildren('2020-05') },\n    { key: '2020-06', value: '2020-06', children: makeTopChildren('2020-06') },\n  ]\n\n  const getValue = (leftNode: LeftCrossTreeNode, topNode: TopCrossTreeNode) => {\n    if (leftNode.data.parent) {\n      const map: any = {\n        forenoon: '万事开头难',\n        afternoon: '然后中间难',\n        evening: '最后结束难',\n      }\n      return map[leftNode.key]\n    }\n\n    const courses = ['数学', '英语', '计算机基础', '数据结构', '线性代数', '微积分', '概率论']\n    const i = (leftNode.data.x + topNode.data.y) % courses.length\n    return courses[i]\n  }\n\n  return (\n    <div>\n      <p style={{ fontSize: 16, marginTop: 0 }}>2020年 学习计划</p>\n      <CrossTreeTable\n        // 非受控用法：\n        defaultOpenKeys={[leftTree[0].key]}\n        // 受控用法：\n        // const [openKeys, onChangeOpenKeys] = useState([leftTree[0].key])\n        // openKeys={openKeys}\n        // onChangeOpenKeys={onChangeOpenKeys}\n\n        // 表格第一列的配置\n        primaryColumn={{ lock: true, name: '数据维度', width: 200 }}\n        defaultColumnWidth={100}\n        leftTree={leftTree}\n        topTree={topTree}\n        getValue={getValue}\n      />\n    </div>\n  )\n}\n",locationsMap:{"交叉与透视-交叉树状表格示例--基本示例":{startLoc:{col:7,line:6},endLoc:{col:1,line:89},startBody:{col:7,line:6},endBody:{col:1,line:89}}}}},title:"交叉与透视 / 交叉树状表格示例"};const 基本示例=function 基本示例(){const leftTree=[{key:"forenoon",value:"上午",data:{parent:!0},children:[{key:"9",value:"9:00-10:00",data:{x:0}},{key:"10",value:"10:00-11:00",data:{x:1}},{key:"11",value:"11:00-12:00",data:{x:2}}]},{key:"afternoon",value:"下午",data:{parent:!0},children:[{key:"14",value:"14:00-15:00",data:{x:3}},{key:"15",value:"15:00-16:00",data:{x:4}},{key:"16",value:"16:00-17:00",data:{x:5}}]},{key:"evening",value:"晚上",data:{parent:!0},children:[{key:"20",value:"20:00-21:00",data:{x:7}},{key:"21",value:"21:00-22:00",data:{x:8}}]}],makeTopChildren=keyPrefix=>[{key:keyPrefix+"-week-0",value:"第一周",data:{y:0}},{key:keyPrefix+"-week-1",value:"第二周",data:{y:1}},{key:keyPrefix+"-week-2",value:"第三周",data:{y:2}},{key:keyPrefix+"-week-3",value:"第四周",data:{y:3}}],topTree=[{key:"2020-01",value:"2020-01",children:makeTopChildren("2020-01")},{key:"2020-02",value:"2020-02",children:makeTopChildren("2020-02")},{key:"2020-03",value:"2020-03",children:makeTopChildren("2020-03")},{key:"2020-04",value:"2020-04",children:makeTopChildren("2020-04")},{key:"2020-05",value:"2020-05",children:makeTopChildren("2020-05")},{key:"2020-06",value:"2020-06",children:makeTopChildren("2020-06")}];return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p",{style:{fontSize:16,marginTop:0}},"2020年 学习计划"),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_0__.a,{defaultOpenKeys:[leftTree[0].key],primaryColumn:{lock:!0,name:"数据维度",width:200},defaultColumnWidth:100,leftTree:leftTree,topTree:topTree,getValue:(leftNode,topNode)=>{if(leftNode.data.parent){return{forenoon:"万事开头难",afternoon:"然后中间难",evening:"最后结束难"}[leftNode.key]}const courses=["数学","英语","计算机基础","数据结构","线性代数","微积分","概率论"];return courses[(leftNode.data.x+topNode.data.y)%courses.length]}}))}},function(module,exports,__webpack_require__){var map={"./pivot-utils.stories.mdx":887};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=886},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"交叉与透视 / 透视工具文档",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"注意：",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"p"},"透视工具 API 尚不稳定，请谨慎使用。")),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"透视能力增强相关工具。包括了以下方法和相关的 TypeScript 类型定义，通过这些工具你可以快速地从明细数据中构建并定制交叉表/透视表。"),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"buildDrillTree"),": 从明细数据中构建下钻树"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"buildRecordMatrix"),": 从明细数据中构建 RecordMatrix"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"convertDrillTreeToCrossTree"),": 将下钻树转换为 CrossTable 的输入")),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"下钻树用来表示数据按照一定的维度序列被不断分组后形成的树结构。ali-react-table 提供了 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"buildDrillTree")," 方法来从数据中构建下钻树。"),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"交叉与透视-透视工具示例--下钻树示例",mdxType:"Story"})),_ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"下钻树中的树节点 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"DrillNode")," 结构如下："),_ref9=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"key")," 用于唯一标记该节点"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"value")," 字段表示该节点的值"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"path")," 表示下钻树中到当前节点路径上的值的序列"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"children")," 记录了当前节点的根节点"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"hasChild")," 用于标记当前是否有子节点")),_ref10=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"在构建下钻树时，",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"buildDrillTree(data, codes, options?)")," 的 options 参数可以调整默认的构建配置："),_ref11=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.encode"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"默认情况下，buildDrillTree 会使用默认的 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"simpleEncode")," 来编码 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"path")," 来生成 key 字段"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"你也可以通过 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.encode")," 提供一个自定义的编码函数用于自定义 key 的生成方式。"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.includeTopWrapper"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"默认情况下，buildDrillTree 不会生成「总计」节点。"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"当 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.includeTopWrapper = true")," 时，buildDrillTree 返回的结果的第一层将为「总计」节点"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"注意 buildDrillTree 的返回结果总是一个数组，即使数组中只有一个「总计」节点"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.topValue"),"：用于指定「总计」节点的 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"value"),"，默认为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},'"总计"')),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"options.isExpand"),"：根据节点的 key 判断一个节点是否展开，没有展开的节点将不进行下钻；默认为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"(key: string) => true"))),_ref12=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h3"},"options.isExpand"),_ref13=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"当数据量较大且维度序列较深时，buildDrillTree 会构建出一棵非常庞大的树，但后续使用时我们往往并不需要用到所有的节点，大部分节点在使用时都是被「折叠」的。isExpand 回调可以告诉 buildDrillTree 哪些节点被展开了，哪些节点是收拢的。当 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"isExpand(key)")," 返回值为 false 时，buildDrillTree 将跳过当前节点的子节点的生成过程。"),_ref14=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"在当前节点的子节点被跳过的时候，buildDrillTree 会为当前节点设置 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"node.hasChild = true"),"。"),_ref15=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"交叉表左侧/上方的数据结构与下钻树非常类似："),_ref16=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"节点的主要字段均为 key/value/children"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"简单情况下，下钻树可以直接作为 CrossTable 的 leftTree/topTree")),_ref17=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"但两者描述的结构是不同的："),_ref18=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"LeftCrossTreeNode/TopCrossTreeNode 描述了表格结构，是",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},"展现层面"),"的结构；"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"DrillNode 描述数据被不断分组后的结果，是",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"li"},"数据层面"),"的结构。")),_ref19=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"很多时候，下钻树与交叉表的 leftTree/topTree 并不是对应的，ali-react-table 提供了一些其他方法来在两者之间进行转换。"),_ref20=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"下钻树具有一个下钻维度序列；而透视表具有两个下钻维度序列：左侧维度序列（也称行维度），以及上方维度序列（也成列维度）。在实践中，我们可以使用「左侧的值序列」+「上方的值序列」来唯一确定透视表中的每一个单元格。对这两个值序列进行编码（分别记为 leftKey 和 topKey），我们可以用两个字符串来表示一个单元格。"),_ref21=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"RecordMatrix 是透视表的数据源容器，存放了一个透视表所有单元格的数据。RecordMatrix 的数据结构是一个二维的 Map，类型为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"type RecordMatrix = Map<string, Map<string, any>>"),"。根据 leftKey 和 topKey，从 matrix 中可以快速找到对应单元格的数据，对应的使用方式为 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"matrix.get(leftKey).get(topKey)"),"."),_ref22=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h3"},"buildRecordMatrix"),_ref23=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"RecordMatrix 的用法非常简单，但其构建过程则相对麻烦一些。pivot-table 提供了 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"buildRecordMatrix")," 方法，该方法用于从明细数据中根据两个下钻维度序列生成相应的数据立方，具体接口如下："),_ref24=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"BuildRecordMatrixConfig")," 结构："),_ref25=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"leftCodes"),_ref26=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"string[]"),_ref27=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"topCodes"),_ref28=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"string[]"),_ref29=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"data"),_ref30=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"any[]"),_ref31=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"aggregate"),_ref32=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"(slice:any[]) => any"),_ref33=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"encode"),_ref34=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"(valuePath: string[]) => string"),_ref35=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"buildDrillTree"),_ref36=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"encode"),_ref37=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"isLeftExpand"),_ref38=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"(key: string) => boolean"),_ref39=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"buildDrillTree"),_ref40=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"isExpand"),_ref41=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"isTopExpand"),_ref42=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"(key: string) => boolean"),_ref43=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"buildDrillTree"),_ref44=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"isExpand"),_ref45=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"prebuiltLeftTree"),_ref46=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"DrillNode[]"),_ref47=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"prebuiltTopTree"),_ref48=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"td"},"DrillNode[]"),_ref49=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"注意事项："),_ref50=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"如果提供了 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"prebuiltLeftTree"),"，预构建的左侧下钻树必须使用相同的 leftCodes 和 data 进行构建，且构建时必须包含总计节点。（同理于 prebuiltTopTree）")),_ref51=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h3"},"buildRecordMatrix"),_ref52=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h3"},"buildRecordMatrix"),_ref53=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"下面的例子描述了 buildDrillTree，buildRecordMatrix 以及交叉表是如何配套使用的。在下面的示例中，我们直接将 下钻树作为了交叉表组件的 leftTree 和 topTree，故 leftTree/topTree 中节点的 key 与 matrix 中的索引是一致的。在交叉表的 getValue 回调中，我们直接使用 leftNode.key 与 topNode.key 就能从 matrix 取出对应单元格的数据。"),_ref54=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"交叉与透视-透视工具示例--简单交叉表",mdxType:"Story"})),_ref55=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h3"},"convertDrillTreeToCrossTree"),_ref56=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"「下钻树直接作为 leftTree 和 topTree」虽然方便，但有一些明显的不足："),_ref57=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"缺少总计/小计节点，需要手动添加"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"无法满足多个指标同时展示的需求"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"不支持收拢展开功能"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"小计节点与父节点共用同一份数据，但在表格结构上两者又必须使用不同的 key，两者发生冲突")),_ref58=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"这些限制的原因在于",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"p"},"表格展现层和数据层使用了相同的 key"),"，导致两者必须具有相同的结构。 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"convertDrillTreeToCrossTree")," 用于将下钻树转换为交叉表的 leftTree/topTree，在转换过程中为展现层和数据层分配不同的 key 从而解除了上述限制。并提供以下特性："),_ref59=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"支持单指标或多指标，多指标情况下支持指标放在交叉表左侧或上方"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"支持生成小计节点"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"支持收拢展开")),_ref60=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"转换过程中，该函数会执行以下处理："),_ref61=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"该函数会将下钻树中的 key 复制到 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"crossTreeNode.data.dataKey")," 上（crossTreeNode 指生成的交叉树节点）"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"该函数会将下钻树中的 path 复制到 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"crossTreeNode.data.dataPath")," 上"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"根据多指标或小计节点相关配置，生成对应的 CrossTreeNode，并为新的节点生成 key 值",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"多指标的情况下，指标配置会被复制到 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"crossTreeNode.data.indicator")," 上"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"新增的节点中，data.dataKey 和 data.dataPath 保存了对应下钻树节点的 key 和 path"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"开启展开/收拢功能后，为部分 CrossTreeNode 生成 title 用于渲染交互按钮")),_ref62=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"转换函数具体 api:"),_ref63=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"有了这些透视工具和合适的渲染层，接下来我们就可以从明细数据中构建透视表了。下面这个例子中引入了一个简单的透视表设计器，提供了最基本的维度选择和表格结构调整功能。根据设计器的状态，调整构建下钻树或转换时的参数，就能够方便地实现透视表的各项功能了。"),_ref64=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Preview,{mdxType:"Preview"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"交叉与透视-透视工具示例--简单透视表",mdxType:"Story"}));function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"透视工具"},"透视工具"),_ref3,_ref4,_ref5,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"数据结构下钻树"},"数据结构——下钻树"),_ref6,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"下钻树构建示例"},"下钻树构建示例"),_ref7,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"下钻树节点结构"},"下钻树节点结构"),_ref8,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"interface DrillNode {\n  key: string\n  value: string\n  path: string[]\n  children?: DrillNode[]\n  hasChild?: boolean\n}\n")),_ref9,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"builddrilltree"},"buildDrillTree"),_ref10,_ref11,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"optionsisexpand-与剪枝优化"},_ref12," 与剪枝优化"),_ref13,_ref14,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"交叉表与下钻树"},"交叉表与下钻树"),_ref15,_ref16,_ref17,_ref18,_ref19,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"数据结构数据立方"},"数据结构——数据立方"),_ref20,_ref21,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"buildrecordmatrix-从明细数据中构建数据立方"},_ref22," 从明细数据中构建数据立方"),_ref23,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"function buildRecordMatrix(buildConfig: BuildRecordMatrixConfig): RecordMatrix\n")),_ref24,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("table",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("thead",{parentName:"table"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"thead"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null}),"字段"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null}),"类型"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null}),"必传/可选"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("th",_extends({parentName:"tr"},{align:null}),"说明"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tbody",{parentName:"table"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref25),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref26),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"必传"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"表格左侧 下钻维度（行维度）")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref27),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref28),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"必传"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"表格上方 下钻维度（列维度）")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref29),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref30),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"必传"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"明细数据，格式为 对象数组")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref31),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref32),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"可选"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"聚合函数，若不提供则不对数据进行聚合")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref33),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref34),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"可选"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"参见上方 ",_ref35," 文档中的 ",_ref36)),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref37),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref38),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"可选"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"参见上方 ",_ref39," 文档中的 ",_ref40)),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref41),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref42),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"可选"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"参见上方 ",_ref43," 文档中的 ",_ref44)),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref45),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref46),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"可选"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"预先构建好的 左侧下钻树")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("tr",{parentName:"tbody"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref47),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),_ref48),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"可选"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("td",_extends({parentName:"tr"},{align:null}),"预先构建好的 上方下钻树")))),_ref49,_ref50,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"todo-buildrecordmatrix-的详细-api-文档"},"TODO ",_ref51," 的详细 api 文档"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"buildrecordmatrix-示例"},_ref52," 示例"),_ref53,_ref54,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"convertdrilltreetocrosstree"},_ref55),_ref56,_ref57,_ref58,_ref59,_ref60,_ref61,_ref62,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"function convertDrillTreeToCrossTree<T extends CrossTreeNode = CrossTreeNode>(\n  drillTree: DrillNode[],\n  options: ConvertOptions<T> = {},\n): T[]\n\ntype ConvertOptions<T extends CrossTreeNode = CrossTreeNode> = {\n  /** 需要在子节点处附加的 指标节点 */\n  indicators?: CrossTableIndicator[]\n\n  /** 自定义的编码函数，用于根据下钻的值序列生成唯一的字符串.\n   * 该参数留空 表示使用默认的编码方式 */\n  encode?(valuePath: string[]): string\n\n  /** 为一个值序列生成小计（sub-total）节点.\n   * 针对每一个父节点，该函数都将被调用一次；\n   * * 函数返回 null, 表示对应父节点不需要小计节点；\n   * * 返回 `{ position: 'start' | 'end', value: string; data?: any }`\n   *  表明所要生成的小计节点的摆放位置、文本、附加的数据\n   *\n   * 该参数留空 表示所有节点均不需要生成小计节点 */\n  generateSubtotalNode?(\n    drillNode: DrillNode,\n  ): null | {\n    position: 'start' | 'end'\n    value: string\n  }\n\n  /** 是否支持节点的展开与收拢，默认为 false。\n   * 当该选项为 true 时，展开/收拢才会开启，相关的按钮也才会被渲染 */\n  supportsExpand?: boolean\n\n  /** 展开的节点的 key 数组 */\n  expandKeys?: string[]\n\n  /** 展开节点发生变化时的回调 */\n  onChangeExpandKeys?(nextKeys: string[], targetNode: DrillNode, action: 'collapse' | 'expand'): void\n\n  /** 是否强制展开总计节点，默认为 true */\n  enforceExpandTotalNode?: boolean\n}\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"基于交叉表和透视工具构建透视表"},"基于交叉表和透视工具构建透视表"),_ref63,_ref64)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"交叉与透视 / 透视工具文档",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref65=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref65}}),__webpack_exports__.default=componentMeta},function(module,exports,__webpack_require__){var map={"./pivot-utils.stories.tsx":889};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=888},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"下钻树示例",(function(){return 下钻树示例})),__webpack_require__.d(__webpack_exports__,"简单交叉表",(function(){return 简单交叉表})),__webpack_require__.d(__webpack_exports__,"简单透视表",(function(){return 简单透视表})),__webpack_require__.d(__webpack_exports__,"基于交叉表的透视表",(function(){return 基于交叉表的透视表}));var ali_react_table__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(32),ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(89),ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(220),ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(222),ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(221),ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(512),react__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__),react_json_view__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(149),react_json_view__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(react_json_view__WEBPACK_IMPORTED_MODULE_7__),_examples_pivot_table_on_cross_table_stories__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(276),_MinimumPivotTableDesigner__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(217);__webpack_exports__.default={parameters:{storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import { BaseTable } from 'ali-react-table'\\nimport {\\n  buildDrillTree,\\n  buildRecordMatrix,\\n  convertDrillTreeToCrossTree,\\n  createAggregateFunction,\\n  CrossTable,\\n  CrossTableLeftMetaColumn,\\n  DrillNode,\\n} from 'ali-react-table/pivot'\\nimport React, { useState } from 'react'\\nimport ReactJson from 'react-json-view'\\nimport { PivotTableBasedOnCrossTable as _PivotTableBasedOnCrossTable } from '../examples/pivot-table-on-cross-table.stories'\\nimport MinimumPivotTableDesigner from './MinimumPivotTableDesigner'\\n\\nexport default { title: '交叉与透视 / 透视工具示例' }\\n\\nexport function 下钻树示例() {\\n  const dwdData = [\\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-01', valueA: 782, valueB: 566 },\\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-02', valueA: 856, valueB: 403 },\\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-03', valueA: 886, valueB: 555 },\\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-04', valueA: 555, valueB: 444 },\\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-05', valueA: 444, valueB: 333 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-01', valueA: 922, valueB: 778 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-02', valueA: 888, valueB: 887 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-03', valueA: 879, valueB: 870 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-04', valueA: 800, valueB: 723 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-05', valueA: 813, valueB: 789 },\\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-01', valueA: 500, valueB: 463 },\\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-02', valueA: 833, valueB: 456 },\\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-03', valueA: 821, valueB: 442 },\\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-04', valueA: 834, valueB: 456 },\\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-05', valueA: 803, valueB: 700 },\\n  ]\\n\\n  const drillTree = buildDrillTree(dwdData, ['subs', 'shop', 'month'])\\n\\n  return (\\n    <div>\\n      <div style={{ fontSize: 16, lineHeight: 2 }}>输入数据（输入格式为一个对象的数组）</div>\\n\\n      <BaseTable\\n        style={{ overflow: 'auto', height: 250 }}\\n        useOuterBorder\\n        columns={[\\n          { name: '子公司(subs)', code: 'subs' },\\n          { name: '门店(shop)', code: 'shop' },\\n          { name: '月份(month)', code: 'month' },\\n          { name: '指标A(valueA)', code: 'valueA' },\\n          { name: '指标B(valueB)', code: 'valueB' },\\n        ]}\\n        dataSource={dwdData}\\n        defaultColumnWidth={100}\\n      />\\n\\n      <div style={{ marginTop: 16, fontSize: 16, lineHeight: 2 }}>\\n        <div>处理过程</div>\\n        <code>buildDrillTree(data, ['subs', 'shop', 'month'])</code>\\n      </div>\\n\\n      <div style={{ marginTop: 16, fontSize: 16, lineHeight: 2 }}>输出一个 DrillNode 的数组</div>\\n      <ReactJson\\n        name={null}\\n        src={drillTree}\\n        collapsed={2}\\n        enableClipboard={false}\\n        displayObjectSize={false}\\n        displayDataTypes={false}\\n      />\\n    </div>\\n  )\\n}\\n\\nexport function 简单交叉表() {\\n  const data = [\\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-01', valueA: 782, valueB: 566 },\\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-02', valueA: 856, valueB: 403 },\\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-03', valueA: 886, valueB: 555 },\\n    { subs: '上海子公司', shop: '上海大宁店', season: '二季度', month: '2022-04', valueA: 555, valueB: 444 },\\n    { subs: '上海子公司', shop: '上海大宁店', season: '二季度', month: '2022-05', valueA: 444, valueB: 333 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-01', valueA: 922, valueB: 778 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-02', valueA: 888, valueB: 887 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-03', valueA: 879, valueB: 870 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '二季度', month: '2022-04', valueA: 800, valueB: 723 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '二季度', month: '2022-05', valueA: 813, valueB: 789 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-01', valueA: 500, valueB: 463 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-02', valueA: 833, valueB: 456 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-03', valueA: 821, valueB: 442 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '二季度', month: '2022-04', valueA: 834, valueB: 456 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '二季度', month: '2022-05', valueA: 803, valueB: 700 },\\n  ]\\n\\n  const leftDims: CrossTableLeftMetaColumn[] = [\\n    { code: 'subs', name: '子公司' },\\n    { code: 'shop', name: '门店' },\\n  ]\\n\\n  const topDims = [\\n    { code: 'season', name: '季度' },\\n    { code: 'month', name: '月份' },\\n  ]\\n\\n  const leftCodes = leftDims.map((dim) => dim.code)\\n  const topCodes = topDims.map((dim) => dim.code)\\n\\n  const leftTree = buildDrillTree(data, leftCodes)\\n  const topTree = buildDrillTree(data, topCodes)\\n\\n  const matrix = buildRecordMatrix({ data, leftCodes, topCodes })\\n\\n  return (\\n    <CrossTable\\n      defaultColumnWidth={100}\\n      leftTree={leftTree}\\n      topTree={topTree}\\n      leftMetaColumns={leftDims}\\n      getValue={(leftNode, topNode) => {\\n        const record = matrix.get(leftNode.key).get(topNode.key)\\n        return record.valueA\\n      }}\\n    />\\n  )\\n}\\n\\nexport function 简单透视表() {\\n  const data = [\\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-01', valueA: 782, valueB: 566 },\\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-02', valueA: 856, valueB: 403 },\\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-03', valueA: 886, valueB: 555 },\\n    { subs: '上海子公司', shop: '上海大宁店', season: '二季度', month: '2022-04', valueA: 555, valueB: 444 },\\n    { subs: '上海子公司', shop: '上海大宁店', season: '二季度', month: '2022-05', valueA: 444, valueB: 333 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-01', valueA: 922, valueB: 778 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-02', valueA: 888, valueB: 887 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-03', valueA: 879, valueB: 870 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '二季度', month: '2022-04', valueA: 800, valueB: 723 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '二季度', month: '2022-05', valueA: 813, valueB: 789 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-01', valueA: 500, valueB: 463 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-02', valueA: 833, valueB: 456 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-03', valueA: 821, valueB: 442 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '二季度', month: '2022-04', valueA: 834, valueB: 456 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '二季度', month: '2022-05', valueA: 803, valueB: 700 },\\n  ]\\n\\n  const dimensions = [\\n    { code: 'subs', name: '子公司' },\\n    { code: 'shop', name: '门店' },\\n    { code: 'season', name: '季度' },\\n    { code: 'month', name: '月份' },\\n  ]\\n\\n  const indicators = [\\n    { code: 'valueA', name: '指标A', width: 100, align: 'right' as const, expression: 'SUM(valueA)' },\\n    { code: 'valueB', name: '指标B', width: 100, align: 'right' as const, expression: 'SUM(valueB)' },\\n  ]\\n\\n  const [indicatorSide, onChangeIndicatorSide] = useState('top')\\n  const [topCodes, onChangeTopCodes] = useState(['season'])\\n  const [leftCodes, onChangeLeftCodes] = useState(['subs', 'shop'])\\n  const [showSubtotal, onChangeShowSubtotal] = useState(true)\\n\\n  function generateSubtotalNode(drillNode: DrillNode) {\\n    return {\\n      position: 'start' as const,\\n      value: drillNode.path.length === 0 ? '总计' : '小计',\\n    }\\n  }\\n\\n  const leftDrillTree = buildDrillTree(data, leftCodes, { includeTopWrapper: true })\\n  const [leftTreeRoot] = convertDrillTreeToCrossTree(leftDrillTree, {\\n    indicators: indicatorSide === 'left' ? indicators : null,\\n    generateSubtotalNode: showSubtotal ? generateSubtotalNode : null,\\n  })\\n\\n  const topDrillTree = buildDrillTree(data, topCodes, { includeTopWrapper: true })\\n  const [topTreeRoot] = convertDrillTreeToCrossTree(topDrillTree, {\\n    indicators: indicatorSide === 'top' ? indicators : null,\\n    generateSubtotalNode: showSubtotal ? generateSubtotalNode : null,\\n  })\\n\\n  const aggregate = createAggregateFunction(indicators)\\n  const matrix = buildRecordMatrix({ data, leftCodes, topCodes, aggregate })\\n\\n  return (\\n    <div>\\n      {/* MinimumPivotTableDesigner 是一个简单的透视表设计器，提供了对维度配置和表格结构的编辑功能 */}\\n      <MinimumPivotTableDesigner\\n        showSubtotal={showSubtotal}\\n        onChangeShowSubtotal={onChangeShowSubtotal}\\n        dimensions={dimensions}\\n        leftCodes={leftCodes}\\n        onChangeLeftCodes={onChangeLeftCodes}\\n        topCodes={topCodes}\\n        onChangeTopCodes={onChangeTopCodes}\\n        indicatorSide={indicatorSide}\\n        onChangeIndicatorSide={onChangeIndicatorSide}\\n      />\\n      <CrossTable\\n        defaultColumnWidth={100}\\n        leftTree={leftTreeRoot.children}\\n        leftTotalNode={leftTreeRoot} // 当 leftTree 为空时，leftTotalNode 用于渲染总计行\\n        topTree={topTreeRoot.children}\\n        topTotalNode={topTreeRoot} // 当 topTree 为空时，topTotalNode 用于渲染总计列\\n        getValue={(leftNode, topNode) => {\\n          // 注意这里我们使用 node.data.dataKey 来获取单元格在 matrix 中的 record\\n          const record = matrix.get(leftNode.data.dataKey).get(topNode.data.dataKey)\\n          if (record == null) {\\n            return '-'\\n          }\\n          const indicator = leftNode.data?.indicator ?? topNode.data?.indicator\\n          return record[indicator.code]\\n        }}\\n      />\\n    </div>\\n  )\\n}\\n\\nexport const 基于交叉表的透视表 = _PivotTableBasedOnCrossTable\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"交叉与透视-透视工具示例--下钻树示例\":{\"startLoc\":{\"col\":7,\"line\":18},\"endLoc\":{\"col\":1,\"line\":73},\"startBody\":{\"col\":7,\"line\":18},\"endBody\":{\"col\":1,\"line\":73}},\"交叉与透视-透视工具示例--简单交叉表\":{\"startLoc\":{\"col\":7,\"line\":75},\"endLoc\":{\"col\":1,\"line\":124},\"startBody\":{\"col\":7,\"line\":75},\"endBody\":{\"col\":1,\"line\":124}},\"交叉与透视-透视工具示例--简单透视表\":{\"startLoc\":{\"col\":7,\"line\":126},\"endLoc\":{\"col\":1,\"line\":216},\"startBody\":{\"col\":7,\"line\":126},\"endBody\":{\"col\":1,\"line\":216}}};\n    \nimport { BaseTable } from 'ali-react-table'\nimport {\n  buildDrillTree,\n  buildRecordMatrix,\n  convertDrillTreeToCrossTree,\n  createAggregateFunction,\n  CrossTable,\n  CrossTableLeftMetaColumn,\n  DrillNode,\n} from 'ali-react-table/pivot'\nimport React, { useState } from 'react'\nimport ReactJson from 'react-json-view'\nimport { PivotTableBasedOnCrossTable as _PivotTableBasedOnCrossTable } from '../examples/pivot-table-on-cross-table.stories'\nimport MinimumPivotTableDesigner from './MinimumPivotTableDesigner'\n\nexport default {parameters: {\"storySource\":{\"source\":\"import { BaseTable } from 'ali-react-table'\\nimport {\\n  buildDrillTree,\\n  buildRecordMatrix,\\n  convertDrillTreeToCrossTree,\\n  createAggregateFunction,\\n  CrossTable,\\n  CrossTableLeftMetaColumn,\\n  DrillNode,\\n} from 'ali-react-table/pivot'\\nimport React, { useState } from 'react'\\nimport ReactJson from 'react-json-view'\\nimport { PivotTableBasedOnCrossTable as _PivotTableBasedOnCrossTable } from '../examples/pivot-table-on-cross-table.stories'\\nimport MinimumPivotTableDesigner from './MinimumPivotTableDesigner'\\n\\nexport default { title: '交叉与透视 / 透视工具示例' }\\n\\nexport function 下钻树示例() {\\n  const dwdData = [\\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-01', valueA: 782, valueB: 566 },\\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-02', valueA: 856, valueB: 403 },\\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-03', valueA: 886, valueB: 555 },\\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-04', valueA: 555, valueB: 444 },\\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-05', valueA: 444, valueB: 333 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-01', valueA: 922, valueB: 778 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-02', valueA: 888, valueB: 887 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-03', valueA: 879, valueB: 870 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-04', valueA: 800, valueB: 723 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-05', valueA: 813, valueB: 789 },\\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-01', valueA: 500, valueB: 463 },\\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-02', valueA: 833, valueB: 456 },\\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-03', valueA: 821, valueB: 442 },\\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-04', valueA: 834, valueB: 456 },\\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-05', valueA: 803, valueB: 700 },\\n  ]\\n\\n  const drillTree = buildDrillTree(dwdData, ['subs', 'shop', 'month'])\\n\\n  return (\\n    <div>\\n      <div style={{ fontSize: 16, lineHeight: 2 }}>输入数据（输入格式为一个对象的数组）</div>\\n\\n      <BaseTable\\n        style={{ overflow: 'auto', height: 250 }}\\n        useOuterBorder\\n        columns={[\\n          { name: '子公司(subs)', code: 'subs' },\\n          { name: '门店(shop)', code: 'shop' },\\n          { name: '月份(month)', code: 'month' },\\n          { name: '指标A(valueA)', code: 'valueA' },\\n          { name: '指标B(valueB)', code: 'valueB' },\\n        ]}\\n        dataSource={dwdData}\\n        defaultColumnWidth={100}\\n      />\\n\\n      <div style={{ marginTop: 16, fontSize: 16, lineHeight: 2 }}>\\n        <div>处理过程</div>\\n        <code>buildDrillTree(data, ['subs', 'shop', 'month'])</code>\\n      </div>\\n\\n      <div style={{ marginTop: 16, fontSize: 16, lineHeight: 2 }}>输出一个 DrillNode 的数组</div>\\n      <ReactJson\\n        name={null}\\n        src={drillTree}\\n        collapsed={2}\\n        enableClipboard={false}\\n        displayObjectSize={false}\\n        displayDataTypes={false}\\n      />\\n    </div>\\n  )\\n}\\n\\nexport function 简单交叉表() {\\n  const data = [\\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-01', valueA: 782, valueB: 566 },\\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-02', valueA: 856, valueB: 403 },\\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-03', valueA: 886, valueB: 555 },\\n    { subs: '上海子公司', shop: '上海大宁店', season: '二季度', month: '2022-04', valueA: 555, valueB: 444 },\\n    { subs: '上海子公司', shop: '上海大宁店', season: '二季度', month: '2022-05', valueA: 444, valueB: 333 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-01', valueA: 922, valueB: 778 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-02', valueA: 888, valueB: 887 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-03', valueA: 879, valueB: 870 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '二季度', month: '2022-04', valueA: 800, valueB: 723 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '二季度', month: '2022-05', valueA: 813, valueB: 789 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-01', valueA: 500, valueB: 463 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-02', valueA: 833, valueB: 456 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-03', valueA: 821, valueB: 442 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '二季度', month: '2022-04', valueA: 834, valueB: 456 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '二季度', month: '2022-05', valueA: 803, valueB: 700 },\\n  ]\\n\\n  const leftDims: CrossTableLeftMetaColumn[] = [\\n    { code: 'subs', name: '子公司' },\\n    { code: 'shop', name: '门店' },\\n  ]\\n\\n  const topDims = [\\n    { code: 'season', name: '季度' },\\n    { code: 'month', name: '月份' },\\n  ]\\n\\n  const leftCodes = leftDims.map((dim) => dim.code)\\n  const topCodes = topDims.map((dim) => dim.code)\\n\\n  const leftTree = buildDrillTree(data, leftCodes)\\n  const topTree = buildDrillTree(data, topCodes)\\n\\n  const matrix = buildRecordMatrix({ data, leftCodes, topCodes })\\n\\n  return (\\n    <CrossTable\\n      defaultColumnWidth={100}\\n      leftTree={leftTree}\\n      topTree={topTree}\\n      leftMetaColumns={leftDims}\\n      getValue={(leftNode, topNode) => {\\n        const record = matrix.get(leftNode.key).get(topNode.key)\\n        return record.valueA\\n      }}\\n    />\\n  )\\n}\\n\\nexport function 简单透视表() {\\n  const data = [\\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-01', valueA: 782, valueB: 566 },\\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-02', valueA: 856, valueB: 403 },\\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-03', valueA: 886, valueB: 555 },\\n    { subs: '上海子公司', shop: '上海大宁店', season: '二季度', month: '2022-04', valueA: 555, valueB: 444 },\\n    { subs: '上海子公司', shop: '上海大宁店', season: '二季度', month: '2022-05', valueA: 444, valueB: 333 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-01', valueA: 922, valueB: 778 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-02', valueA: 888, valueB: 887 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-03', valueA: 879, valueB: 870 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '二季度', month: '2022-04', valueA: 800, valueB: 723 },\\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '二季度', month: '2022-05', valueA: 813, valueB: 789 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-01', valueA: 500, valueB: 463 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-02', valueA: 833, valueB: 456 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-03', valueA: 821, valueB: 442 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '二季度', month: '2022-04', valueA: 834, valueB: 456 },\\n    { subs: '浙江子公司', shop: '亲橙里', season: '二季度', month: '2022-05', valueA: 803, valueB: 700 },\\n  ]\\n\\n  const dimensions = [\\n    { code: 'subs', name: '子公司' },\\n    { code: 'shop', name: '门店' },\\n    { code: 'season', name: '季度' },\\n    { code: 'month', name: '月份' },\\n  ]\\n\\n  const indicators = [\\n    { code: 'valueA', name: '指标A', width: 100, align: 'right' as const, expression: 'SUM(valueA)' },\\n    { code: 'valueB', name: '指标B', width: 100, align: 'right' as const, expression: 'SUM(valueB)' },\\n  ]\\n\\n  const [indicatorSide, onChangeIndicatorSide] = useState('top')\\n  const [topCodes, onChangeTopCodes] = useState(['season'])\\n  const [leftCodes, onChangeLeftCodes] = useState(['subs', 'shop'])\\n  const [showSubtotal, onChangeShowSubtotal] = useState(true)\\n\\n  function generateSubtotalNode(drillNode: DrillNode) {\\n    return {\\n      position: 'start' as const,\\n      value: drillNode.path.length === 0 ? '总计' : '小计',\\n    }\\n  }\\n\\n  const leftDrillTree = buildDrillTree(data, leftCodes, { includeTopWrapper: true })\\n  const [leftTreeRoot] = convertDrillTreeToCrossTree(leftDrillTree, {\\n    indicators: indicatorSide === 'left' ? indicators : null,\\n    generateSubtotalNode: showSubtotal ? generateSubtotalNode : null,\\n  })\\n\\n  const topDrillTree = buildDrillTree(data, topCodes, { includeTopWrapper: true })\\n  const [topTreeRoot] = convertDrillTreeToCrossTree(topDrillTree, {\\n    indicators: indicatorSide === 'top' ? indicators : null,\\n    generateSubtotalNode: showSubtotal ? generateSubtotalNode : null,\\n  })\\n\\n  const aggregate = createAggregateFunction(indicators)\\n  const matrix = buildRecordMatrix({ data, leftCodes, topCodes, aggregate })\\n\\n  return (\\n    <div>\\n      {/* MinimumPivotTableDesigner 是一个简单的透视表设计器，提供了对维度配置和表格结构的编辑功能 */}\\n      <MinimumPivotTableDesigner\\n        showSubtotal={showSubtotal}\\n        onChangeShowSubtotal={onChangeShowSubtotal}\\n        dimensions={dimensions}\\n        leftCodes={leftCodes}\\n        onChangeLeftCodes={onChangeLeftCodes}\\n        topCodes={topCodes}\\n        onChangeTopCodes={onChangeTopCodes}\\n        indicatorSide={indicatorSide}\\n        onChangeIndicatorSide={onChangeIndicatorSide}\\n      />\\n      <CrossTable\\n        defaultColumnWidth={100}\\n        leftTree={leftTreeRoot.children}\\n        leftTotalNode={leftTreeRoot} // 当 leftTree 为空时，leftTotalNode 用于渲染总计行\\n        topTree={topTreeRoot.children}\\n        topTotalNode={topTreeRoot} // 当 topTree 为空时，topTotalNode 用于渲染总计列\\n        getValue={(leftNode, topNode) => {\\n          // 注意这里我们使用 node.data.dataKey 来获取单元格在 matrix 中的 record\\n          const record = matrix.get(leftNode.data.dataKey).get(topNode.data.dataKey)\\n          if (record == null) {\\n            return '-'\\n          }\\n          const indicator = leftNode.data?.indicator ?? topNode.data?.indicator\\n          return record[indicator.code]\\n        }}\\n      />\\n    </div>\\n  )\\n}\\n\\nexport const 基于交叉表的透视表 = _PivotTableBasedOnCrossTable\\n\",\"locationsMap\":{\"交叉与透视-透视工具示例--下钻树示例\":{\"startLoc\":{\"col\":7,\"line\":18},\"endLoc\":{\"col\":1,\"line\":73},\"startBody\":{\"col\":7,\"line\":18},\"endBody\":{\"col\":1,\"line\":73}},\"交叉与透视-透视工具示例--简单交叉表\":{\"startLoc\":{\"col\":7,\"line\":75},\"endLoc\":{\"col\":1,\"line\":124},\"startBody\":{\"col\":7,\"line\":75},\"endBody\":{\"col\":1,\"line\":124}},\"交叉与透视-透视工具示例--简单透视表\":{\"startLoc\":{\"col\":7,\"line\":126},\"endLoc\":{\"col\":1,\"line\":216},\"startBody\":{\"col\":7,\"line\":126},\"endBody\":{\"col\":1,\"line\":216}}}},}, title: '交叉与透视 / 透视工具示例' }\n\nexport const 下钻树示例 = function 下钻树示例() {\n  const dwdData = [\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-01', valueA: 782, valueB: 566 },\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-02', valueA: 856, valueB: 403 },\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-03', valueA: 886, valueB: 555 },\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-04', valueA: 555, valueB: 444 },\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-05', valueA: 444, valueB: 333 },\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-01', valueA: 922, valueB: 778 },\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-02', valueA: 888, valueB: 887 },\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-03', valueA: 879, valueB: 870 },\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-04', valueA: 800, valueB: 723 },\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-05', valueA: 813, valueB: 789 },\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-01', valueA: 500, valueB: 463 },\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-02', valueA: 833, valueB: 456 },\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-03', valueA: 821, valueB: 442 },\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-04', valueA: 834, valueB: 456 },\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-05', valueA: 803, valueB: 700 },\n  ]\n\n  const drillTree = buildDrillTree(dwdData, ['subs', 'shop', 'month'])\n\n  return (\n    <div>\n      <div style={{ fontSize: 16, lineHeight: 2 }}>输入数据（输入格式为一个对象的数组）</div>\n\n      <BaseTable\n        style={{ overflow: 'auto', height: 250 }}\n        useOuterBorder\n        columns={[\n          { name: '子公司(subs)', code: 'subs' },\n          { name: '门店(shop)', code: 'shop' },\n          { name: '月份(month)', code: 'month' },\n          { name: '指标A(valueA)', code: 'valueA' },\n          { name: '指标B(valueB)', code: 'valueB' },\n        ]}\n        dataSource={dwdData}\n        defaultColumnWidth={100}\n      />\n\n      <div style={{ marginTop: 16, fontSize: 16, lineHeight: 2 }}>\n        <div>处理过程</div>\n        <code>buildDrillTree(data, ['subs', 'shop', 'month'])</code>\n      </div>\n\n      <div style={{ marginTop: 16, fontSize: 16, lineHeight: 2 }}>输出一个 DrillNode 的数组</div>\n      <ReactJson\n        name={null}\n        src={drillTree}\n        collapsed={2}\n        enableClipboard={false}\n        displayObjectSize={false}\n        displayDataTypes={false}\n      />\n    </div>\n  )\n};\n\nexport const 简单交叉表 = function 简单交叉表() {\n  const data = [\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-01', valueA: 782, valueB: 566 },\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-02', valueA: 856, valueB: 403 },\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-03', valueA: 886, valueB: 555 },\n    { subs: '上海子公司', shop: '上海大宁店', season: '二季度', month: '2022-04', valueA: 555, valueB: 444 },\n    { subs: '上海子公司', shop: '上海大宁店', season: '二季度', month: '2022-05', valueA: 444, valueB: 333 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-01', valueA: 922, valueB: 778 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-02', valueA: 888, valueB: 887 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-03', valueA: 879, valueB: 870 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '二季度', month: '2022-04', valueA: 800, valueB: 723 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '二季度', month: '2022-05', valueA: 813, valueB: 789 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-01', valueA: 500, valueB: 463 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-02', valueA: 833, valueB: 456 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-03', valueA: 821, valueB: 442 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '二季度', month: '2022-04', valueA: 834, valueB: 456 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '二季度', month: '2022-05', valueA: 803, valueB: 700 },\n  ]\n\n  const leftDims: CrossTableLeftMetaColumn[] = [\n    { code: 'subs', name: '子公司' },\n    { code: 'shop', name: '门店' },\n  ]\n\n  const topDims = [\n    { code: 'season', name: '季度' },\n    { code: 'month', name: '月份' },\n  ]\n\n  const leftCodes = leftDims.map((dim) => dim.code)\n  const topCodes = topDims.map((dim) => dim.code)\n\n  const leftTree = buildDrillTree(data, leftCodes)\n  const topTree = buildDrillTree(data, topCodes)\n\n  const matrix = buildRecordMatrix({ data, leftCodes, topCodes })\n\n  return (\n    <CrossTable\n      defaultColumnWidth={100}\n      leftTree={leftTree}\n      topTree={topTree}\n      leftMetaColumns={leftDims}\n      getValue={(leftNode, topNode) => {\n        const record = matrix.get(leftNode.key).get(topNode.key)\n        return record.valueA\n      }}\n    />\n  )\n};\n\nexport const 简单透视表 = function 简单透视表() {\n  const data = [\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-01', valueA: 782, valueB: 566 },\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-02', valueA: 856, valueB: 403 },\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-03', valueA: 886, valueB: 555 },\n    { subs: '上海子公司', shop: '上海大宁店', season: '二季度', month: '2022-04', valueA: 555, valueB: 444 },\n    { subs: '上海子公司', shop: '上海大宁店', season: '二季度', month: '2022-05', valueA: 444, valueB: 333 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-01', valueA: 922, valueB: 778 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-02', valueA: 888, valueB: 887 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-03', valueA: 879, valueB: 870 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '二季度', month: '2022-04', valueA: 800, valueB: 723 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '二季度', month: '2022-05', valueA: 813, valueB: 789 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-01', valueA: 500, valueB: 463 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-02', valueA: 833, valueB: 456 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-03', valueA: 821, valueB: 442 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '二季度', month: '2022-04', valueA: 834, valueB: 456 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '二季度', month: '2022-05', valueA: 803, valueB: 700 },\n  ]\n\n  const dimensions = [\n    { code: 'subs', name: '子公司' },\n    { code: 'shop', name: '门店' },\n    { code: 'season', name: '季度' },\n    { code: 'month', name: '月份' },\n  ]\n\n  const indicators = [\n    { code: 'valueA', name: '指标A', width: 100, align: 'right' as const, expression: 'SUM(valueA)' },\n    { code: 'valueB', name: '指标B', width: 100, align: 'right' as const, expression: 'SUM(valueB)' },\n  ]\n\n  const [indicatorSide, onChangeIndicatorSide] = useState('top')\n  const [topCodes, onChangeTopCodes] = useState(['season'])\n  const [leftCodes, onChangeLeftCodes] = useState(['subs', 'shop'])\n  const [showSubtotal, onChangeShowSubtotal] = useState(true)\n\n  function generateSubtotalNode(drillNode: DrillNode) {\n    return {\n      position: 'start' as const,\n      value: drillNode.path.length === 0 ? '总计' : '小计',\n    }\n  }\n\n  const leftDrillTree = buildDrillTree(data, leftCodes, { includeTopWrapper: true })\n  const [leftTreeRoot] = convertDrillTreeToCrossTree(leftDrillTree, {\n    indicators: indicatorSide === 'left' ? indicators : null,\n    generateSubtotalNode: showSubtotal ? generateSubtotalNode : null,\n  })\n\n  const topDrillTree = buildDrillTree(data, topCodes, { includeTopWrapper: true })\n  const [topTreeRoot] = convertDrillTreeToCrossTree(topDrillTree, {\n    indicators: indicatorSide === 'top' ? indicators : null,\n    generateSubtotalNode: showSubtotal ? generateSubtotalNode : null,\n  })\n\n  const aggregate = createAggregateFunction(indicators)\n  const matrix = buildRecordMatrix({ data, leftCodes, topCodes, aggregate })\n\n  return (\n    <div>\n      {/* MinimumPivotTableDesigner 是一个简单的透视表设计器，提供了对维度配置和表格结构的编辑功能 */}\n      <MinimumPivotTableDesigner\n        showSubtotal={showSubtotal}\n        onChangeShowSubtotal={onChangeShowSubtotal}\n        dimensions={dimensions}\n        leftCodes={leftCodes}\n        onChangeLeftCodes={onChangeLeftCodes}\n        topCodes={topCodes}\n        onChangeTopCodes={onChangeTopCodes}\n        indicatorSide={indicatorSide}\n        onChangeIndicatorSide={onChangeIndicatorSide}\n      />\n      <CrossTable\n        defaultColumnWidth={100}\n        leftTree={leftTreeRoot.children}\n        leftTotalNode={leftTreeRoot} // 当 leftTree 为空时，leftTotalNode 用于渲染总计行\n        topTree={topTreeRoot.children}\n        topTotalNode={topTreeRoot} // 当 topTree 为空时，topTotalNode 用于渲染总计列\n        getValue={(leftNode, topNode) => {\n          // 注意这里我们使用 node.data.dataKey 来获取单元格在 matrix 中的 record\n          const record = matrix.get(leftNode.data.dataKey).get(topNode.data.dataKey)\n          if (record == null) {\n            return '-'\n          }\n          const indicator = leftNode.data?.indicator ?? topNode.data?.indicator\n          return record[indicator.code]\n        }}\n      />\n    </div>\n  )\n};\nexport const 基于交叉表的透视表 = _PivotTableBasedOnCrossTable\n",locationsMap:{"交叉与透视-透视工具示例--下钻树示例":{startLoc:{col:21,line:26},endLoc:{col:1,line:81},startBody:{col:21,line:26},endBody:{col:1,line:81}},"交叉与透视-透视工具示例--简单交叉表":{startLoc:{col:21,line:83},endLoc:{col:1,line:132},startBody:{col:21,line:83},endBody:{col:1,line:132}},"交叉与透视-透视工具示例--简单透视表":{startLoc:{col:21,line:134},endLoc:{col:1,line:224},startBody:{col:21,line:134},endBody:{col:1,line:224}}}},storySource:{source:"import { BaseTable } from 'ali-react-table'\nimport {\n  buildDrillTree,\n  buildRecordMatrix,\n  convertDrillTreeToCrossTree,\n  createAggregateFunction,\n  CrossTable,\n  CrossTableLeftMetaColumn,\n  DrillNode,\n} from 'ali-react-table/pivot'\nimport React, { useState } from 'react'\nimport ReactJson from 'react-json-view'\nimport { PivotTableBasedOnCrossTable as _PivotTableBasedOnCrossTable } from '../examples/pivot-table-on-cross-table.stories'\nimport MinimumPivotTableDesigner from './MinimumPivotTableDesigner'\n\nexport default { title: '交叉与透视 / 透视工具示例' }\n\nexport function 下钻树示例() {\n  const dwdData = [\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-01', valueA: 782, valueB: 566 },\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-02', valueA: 856, valueB: 403 },\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-03', valueA: 886, valueB: 555 },\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-04', valueA: 555, valueB: 444 },\n    { subs: '上海子公司', shop: '上海大宁店', month: '2022-05', valueA: 444, valueB: 333 },\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-01', valueA: 922, valueB: 778 },\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-02', valueA: 888, valueB: 887 },\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-03', valueA: 879, valueB: 870 },\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-04', valueA: 800, valueB: 723 },\n    { subs: '上海子公司', shop: '上海曹家渡店', month: '2022-05', valueA: 813, valueB: 789 },\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-01', valueA: 500, valueB: 463 },\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-02', valueA: 833, valueB: 456 },\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-03', valueA: 821, valueB: 442 },\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-04', valueA: 834, valueB: 456 },\n    { subs: '浙江子公司', shop: '亲橙里', month: '2022-05', valueA: 803, valueB: 700 },\n  ]\n\n  const drillTree = buildDrillTree(dwdData, ['subs', 'shop', 'month'])\n\n  return (\n    <div>\n      <div style={{ fontSize: 16, lineHeight: 2 }}>输入数据（输入格式为一个对象的数组）</div>\n\n      <BaseTable\n        style={{ overflow: 'auto', height: 250 }}\n        useOuterBorder\n        columns={[\n          { name: '子公司(subs)', code: 'subs' },\n          { name: '门店(shop)', code: 'shop' },\n          { name: '月份(month)', code: 'month' },\n          { name: '指标A(valueA)', code: 'valueA' },\n          { name: '指标B(valueB)', code: 'valueB' },\n        ]}\n        dataSource={dwdData}\n        defaultColumnWidth={100}\n      />\n\n      <div style={{ marginTop: 16, fontSize: 16, lineHeight: 2 }}>\n        <div>处理过程</div>\n        <code>buildDrillTree(data, ['subs', 'shop', 'month'])</code>\n      </div>\n\n      <div style={{ marginTop: 16, fontSize: 16, lineHeight: 2 }}>输出一个 DrillNode 的数组</div>\n      <ReactJson\n        name={null}\n        src={drillTree}\n        collapsed={2}\n        enableClipboard={false}\n        displayObjectSize={false}\n        displayDataTypes={false}\n      />\n    </div>\n  )\n}\n\nexport function 简单交叉表() {\n  const data = [\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-01', valueA: 782, valueB: 566 },\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-02', valueA: 856, valueB: 403 },\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-03', valueA: 886, valueB: 555 },\n    { subs: '上海子公司', shop: '上海大宁店', season: '二季度', month: '2022-04', valueA: 555, valueB: 444 },\n    { subs: '上海子公司', shop: '上海大宁店', season: '二季度', month: '2022-05', valueA: 444, valueB: 333 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-01', valueA: 922, valueB: 778 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-02', valueA: 888, valueB: 887 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-03', valueA: 879, valueB: 870 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '二季度', month: '2022-04', valueA: 800, valueB: 723 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '二季度', month: '2022-05', valueA: 813, valueB: 789 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-01', valueA: 500, valueB: 463 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-02', valueA: 833, valueB: 456 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-03', valueA: 821, valueB: 442 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '二季度', month: '2022-04', valueA: 834, valueB: 456 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '二季度', month: '2022-05', valueA: 803, valueB: 700 },\n  ]\n\n  const leftDims: CrossTableLeftMetaColumn[] = [\n    { code: 'subs', name: '子公司' },\n    { code: 'shop', name: '门店' },\n  ]\n\n  const topDims = [\n    { code: 'season', name: '季度' },\n    { code: 'month', name: '月份' },\n  ]\n\n  const leftCodes = leftDims.map((dim) => dim.code)\n  const topCodes = topDims.map((dim) => dim.code)\n\n  const leftTree = buildDrillTree(data, leftCodes)\n  const topTree = buildDrillTree(data, topCodes)\n\n  const matrix = buildRecordMatrix({ data, leftCodes, topCodes })\n\n  return (\n    <CrossTable\n      defaultColumnWidth={100}\n      leftTree={leftTree}\n      topTree={topTree}\n      leftMetaColumns={leftDims}\n      getValue={(leftNode, topNode) => {\n        const record = matrix.get(leftNode.key).get(topNode.key)\n        return record.valueA\n      }}\n    />\n  )\n}\n\nexport function 简单透视表() {\n  const data = [\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-01', valueA: 782, valueB: 566 },\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-02', valueA: 856, valueB: 403 },\n    { subs: '上海子公司', shop: '上海大宁店', season: '一季度', month: '2022-03', valueA: 886, valueB: 555 },\n    { subs: '上海子公司', shop: '上海大宁店', season: '二季度', month: '2022-04', valueA: 555, valueB: 444 },\n    { subs: '上海子公司', shop: '上海大宁店', season: '二季度', month: '2022-05', valueA: 444, valueB: 333 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-01', valueA: 922, valueB: 778 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-02', valueA: 888, valueB: 887 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '一季度', month: '2022-03', valueA: 879, valueB: 870 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '二季度', month: '2022-04', valueA: 800, valueB: 723 },\n    { subs: '上海子公司', shop: '上海曹家渡店', season: '二季度', month: '2022-05', valueA: 813, valueB: 789 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-01', valueA: 500, valueB: 463 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-02', valueA: 833, valueB: 456 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '一季度', month: '2022-03', valueA: 821, valueB: 442 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '二季度', month: '2022-04', valueA: 834, valueB: 456 },\n    { subs: '浙江子公司', shop: '亲橙里', season: '二季度', month: '2022-05', valueA: 803, valueB: 700 },\n  ]\n\n  const dimensions = [\n    { code: 'subs', name: '子公司' },\n    { code: 'shop', name: '门店' },\n    { code: 'season', name: '季度' },\n    { code: 'month', name: '月份' },\n  ]\n\n  const indicators = [\n    { code: 'valueA', name: '指标A', width: 100, align: 'right' as const, expression: 'SUM(valueA)' },\n    { code: 'valueB', name: '指标B', width: 100, align: 'right' as const, expression: 'SUM(valueB)' },\n  ]\n\n  const [indicatorSide, onChangeIndicatorSide] = useState('top')\n  const [topCodes, onChangeTopCodes] = useState(['season'])\n  const [leftCodes, onChangeLeftCodes] = useState(['subs', 'shop'])\n  const [showSubtotal, onChangeShowSubtotal] = useState(true)\n\n  function generateSubtotalNode(drillNode: DrillNode) {\n    return {\n      position: 'start' as const,\n      value: drillNode.path.length === 0 ? '总计' : '小计',\n    }\n  }\n\n  const leftDrillTree = buildDrillTree(data, leftCodes, { includeTopWrapper: true })\n  const [leftTreeRoot] = convertDrillTreeToCrossTree(leftDrillTree, {\n    indicators: indicatorSide === 'left' ? indicators : null,\n    generateSubtotalNode: showSubtotal ? generateSubtotalNode : null,\n  })\n\n  const topDrillTree = buildDrillTree(data, topCodes, { includeTopWrapper: true })\n  const [topTreeRoot] = convertDrillTreeToCrossTree(topDrillTree, {\n    indicators: indicatorSide === 'top' ? indicators : null,\n    generateSubtotalNode: showSubtotal ? generateSubtotalNode : null,\n  })\n\n  const aggregate = createAggregateFunction(indicators)\n  const matrix = buildRecordMatrix({ data, leftCodes, topCodes, aggregate })\n\n  return (\n    <div>\n      {/* MinimumPivotTableDesigner 是一个简单的透视表设计器，提供了对维度配置和表格结构的编辑功能 */}\n      <MinimumPivotTableDesigner\n        showSubtotal={showSubtotal}\n        onChangeShowSubtotal={onChangeShowSubtotal}\n        dimensions={dimensions}\n        leftCodes={leftCodes}\n        onChangeLeftCodes={onChangeLeftCodes}\n        topCodes={topCodes}\n        onChangeTopCodes={onChangeTopCodes}\n        indicatorSide={indicatorSide}\n        onChangeIndicatorSide={onChangeIndicatorSide}\n      />\n      <CrossTable\n        defaultColumnWidth={100}\n        leftTree={leftTreeRoot.children}\n        leftTotalNode={leftTreeRoot} // 当 leftTree 为空时，leftTotalNode 用于渲染总计行\n        topTree={topTreeRoot.children}\n        topTotalNode={topTreeRoot} // 当 topTree 为空时，topTotalNode 用于渲染总计列\n        getValue={(leftNode, topNode) => {\n          // 注意这里我们使用 node.data.dataKey 来获取单元格在 matrix 中的 record\n          const record = matrix.get(leftNode.data.dataKey).get(topNode.data.dataKey)\n          if (record == null) {\n            return '-'\n          }\n          const indicator = leftNode.data?.indicator ?? topNode.data?.indicator\n          return record[indicator.code]\n        }}\n      />\n    </div>\n  )\n}\n\nexport const 基于交叉表的透视表 = _PivotTableBasedOnCrossTable\n",locationsMap:{"交叉与透视-透视工具示例--下钻树示例":{startLoc:{col:7,line:18},endLoc:{col:1,line:73},startBody:{col:7,line:18},endBody:{col:1,line:73}},"交叉与透视-透视工具示例--简单交叉表":{startLoc:{col:7,line:75},endLoc:{col:1,line:124},startBody:{col:7,line:75},endBody:{col:1,line:124}},"交叉与透视-透视工具示例--简单透视表":{startLoc:{col:7,line:126},endLoc:{col:1,line:216},startBody:{col:7,line:126},endBody:{col:1,line:216}}}}},title:"交叉与透视 / 透视工具示例"};const 下钻树示例=function 下钻树示例(){const dwdData=[{subs:"上海子公司",shop:"上海大宁店",month:"2022-01",valueA:782,valueB:566},{subs:"上海子公司",shop:"上海大宁店",month:"2022-02",valueA:856,valueB:403},{subs:"上海子公司",shop:"上海大宁店",month:"2022-03",valueA:886,valueB:555},{subs:"上海子公司",shop:"上海大宁店",month:"2022-04",valueA:555,valueB:444},{subs:"上海子公司",shop:"上海大宁店",month:"2022-05",valueA:444,valueB:333},{subs:"上海子公司",shop:"上海曹家渡店",month:"2022-01",valueA:922,valueB:778},{subs:"上海子公司",shop:"上海曹家渡店",month:"2022-02",valueA:888,valueB:887},{subs:"上海子公司",shop:"上海曹家渡店",month:"2022-03",valueA:879,valueB:870},{subs:"上海子公司",shop:"上海曹家渡店",month:"2022-04",valueA:800,valueB:723},{subs:"上海子公司",shop:"上海曹家渡店",month:"2022-05",valueA:813,valueB:789},{subs:"浙江子公司",shop:"亲橙里",month:"2022-01",valueA:500,valueB:463},{subs:"浙江子公司",shop:"亲橙里",month:"2022-02",valueA:833,valueB:456},{subs:"浙江子公司",shop:"亲橙里",month:"2022-03",valueA:821,valueB:442},{subs:"浙江子公司",shop:"亲橙里",month:"2022-04",valueA:834,valueB:456},{subs:"浙江子公司",shop:"亲橙里",month:"2022-05",valueA:803,valueB:700}],drillTree=Object(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_1__.a)(dwdData,["subs","shop","month"]);return react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div",{style:{fontSize:16,lineHeight:2}},"输入数据（输入格式为一个对象的数组）"),react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_0__.a,{style:{overflow:"auto",height:250},useOuterBorder:!0,columns:[{name:"子公司(subs)",code:"subs"},{name:"门店(shop)",code:"shop"},{name:"月份(month)",code:"month"},{name:"指标A(valueA)",code:"valueA"},{name:"指标B(valueB)",code:"valueB"}],dataSource:dwdData,defaultColumnWidth:100}),react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div",{style:{marginTop:16,fontSize:16,lineHeight:2}},react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div",null,"处理过程"),react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("code",null,"buildDrillTree(data, ['subs', 'shop', 'month'])")),react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div",{style:{marginTop:16,fontSize:16,lineHeight:2}},"输出一个 DrillNode 的数组"),react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(react_json_view__WEBPACK_IMPORTED_MODULE_7___default.a,{name:null,src:drillTree,collapsed:2,enableClipboard:!1,displayObjectSize:!1,displayDataTypes:!1}))},简单交叉表=function 简单交叉表(){const data=[{subs:"上海子公司",shop:"上海大宁店",season:"一季度",month:"2022-01",valueA:782,valueB:566},{subs:"上海子公司",shop:"上海大宁店",season:"一季度",month:"2022-02",valueA:856,valueB:403},{subs:"上海子公司",shop:"上海大宁店",season:"一季度",month:"2022-03",valueA:886,valueB:555},{subs:"上海子公司",shop:"上海大宁店",season:"二季度",month:"2022-04",valueA:555,valueB:444},{subs:"上海子公司",shop:"上海大宁店",season:"二季度",month:"2022-05",valueA:444,valueB:333},{subs:"上海子公司",shop:"上海曹家渡店",season:"一季度",month:"2022-01",valueA:922,valueB:778},{subs:"上海子公司",shop:"上海曹家渡店",season:"一季度",month:"2022-02",valueA:888,valueB:887},{subs:"上海子公司",shop:"上海曹家渡店",season:"一季度",month:"2022-03",valueA:879,valueB:870},{subs:"上海子公司",shop:"上海曹家渡店",season:"二季度",month:"2022-04",valueA:800,valueB:723},{subs:"上海子公司",shop:"上海曹家渡店",season:"二季度",month:"2022-05",valueA:813,valueB:789},{subs:"浙江子公司",shop:"亲橙里",season:"一季度",month:"2022-01",valueA:500,valueB:463},{subs:"浙江子公司",shop:"亲橙里",season:"一季度",month:"2022-02",valueA:833,valueB:456},{subs:"浙江子公司",shop:"亲橙里",season:"一季度",month:"2022-03",valueA:821,valueB:442},{subs:"浙江子公司",shop:"亲橙里",season:"二季度",month:"2022-04",valueA:834,valueB:456},{subs:"浙江子公司",shop:"亲橙里",season:"二季度",month:"2022-05",valueA:803,valueB:700}],leftDims=[{code:"subs",name:"子公司"},{code:"shop",name:"门店"}],leftCodes=leftDims.map(dim=>dim.code),topCodes=[{code:"season",name:"季度"},{code:"month",name:"月份"}].map(dim=>dim.code),leftTree=Object(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_1__.a)(data,leftCodes),topTree=Object(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_1__.a)(data,topCodes),matrix=Object(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_2__.b)({data:data,leftCodes:leftCodes,topCodes:topCodes});return react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_3__.a,{defaultColumnWidth:100,leftTree:leftTree,topTree:topTree,leftMetaColumns:leftDims,getValue:(leftNode,topNode)=>matrix.get(leftNode.key).get(topNode.key).valueA})},简单透视表=function 简单透视表(){const data=[{subs:"上海子公司",shop:"上海大宁店",season:"一季度",month:"2022-01",valueA:782,valueB:566},{subs:"上海子公司",shop:"上海大宁店",season:"一季度",month:"2022-02",valueA:856,valueB:403},{subs:"上海子公司",shop:"上海大宁店",season:"一季度",month:"2022-03",valueA:886,valueB:555},{subs:"上海子公司",shop:"上海大宁店",season:"二季度",month:"2022-04",valueA:555,valueB:444},{subs:"上海子公司",shop:"上海大宁店",season:"二季度",month:"2022-05",valueA:444,valueB:333},{subs:"上海子公司",shop:"上海曹家渡店",season:"一季度",month:"2022-01",valueA:922,valueB:778},{subs:"上海子公司",shop:"上海曹家渡店",season:"一季度",month:"2022-02",valueA:888,valueB:887},{subs:"上海子公司",shop:"上海曹家渡店",season:"一季度",month:"2022-03",valueA:879,valueB:870},{subs:"上海子公司",shop:"上海曹家渡店",season:"二季度",month:"2022-04",valueA:800,valueB:723},{subs:"上海子公司",shop:"上海曹家渡店",season:"二季度",month:"2022-05",valueA:813,valueB:789},{subs:"浙江子公司",shop:"亲橙里",season:"一季度",month:"2022-01",valueA:500,valueB:463},{subs:"浙江子公司",shop:"亲橙里",season:"一季度",month:"2022-02",valueA:833,valueB:456},{subs:"浙江子公司",shop:"亲橙里",season:"一季度",month:"2022-03",valueA:821,valueB:442},{subs:"浙江子公司",shop:"亲橙里",season:"二季度",month:"2022-04",valueA:834,valueB:456},{subs:"浙江子公司",shop:"亲橙里",season:"二季度",month:"2022-05",valueA:803,valueB:700}],indicators=[{code:"valueA",name:"指标A",width:100,align:"right",expression:"SUM(valueA)"},{code:"valueB",name:"指标B",width:100,align:"right",expression:"SUM(valueB)"}],[indicatorSide,onChangeIndicatorSide]=Object(react__WEBPACK_IMPORTED_MODULE_6__.useState)("top"),[topCodes,onChangeTopCodes]=Object(react__WEBPACK_IMPORTED_MODULE_6__.useState)(["season"]),[leftCodes,onChangeLeftCodes]=Object(react__WEBPACK_IMPORTED_MODULE_6__.useState)(["subs","shop"]),[showSubtotal,onChangeShowSubtotal]=Object(react__WEBPACK_IMPORTED_MODULE_6__.useState)(!0);function generateSubtotalNode(drillNode){return{position:"start",value:0===drillNode.path.length?"总计":"小计"}}const leftDrillTree=Object(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_1__.a)(data,leftCodes,{includeTopWrapper:!0}),[leftTreeRoot]=Object(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_4__.a)(leftDrillTree,{indicators:"left"===indicatorSide?indicators:null,generateSubtotalNode:showSubtotal?generateSubtotalNode:null}),topDrillTree=Object(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_1__.a)(data,topCodes,{includeTopWrapper:!0}),[topTreeRoot]=Object(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_4__.a)(topDrillTree,{indicators:"top"===indicatorSide?indicators:null,generateSubtotalNode:showSubtotal?generateSubtotalNode:null}),aggregate=Object(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_5__.a)(indicators),matrix=Object(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_2__.b)({data:data,leftCodes:leftCodes,topCodes:topCodes,aggregate:aggregate});return react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(_MinimumPivotTableDesigner__WEBPACK_IMPORTED_MODULE_9__.a,{showSubtotal:showSubtotal,onChangeShowSubtotal:onChangeShowSubtotal,dimensions:[{code:"subs",name:"子公司"},{code:"shop",name:"门店"},{code:"season",name:"季度"},{code:"month",name:"月份"}],leftCodes:leftCodes,onChangeLeftCodes:onChangeLeftCodes,topCodes:topCodes,onChangeTopCodes:onChangeTopCodes,indicatorSide:indicatorSide,onChangeIndicatorSide:onChangeIndicatorSide}),react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_3__.a,{defaultColumnWidth:100,leftTree:leftTreeRoot.children,leftTotalNode:leftTreeRoot,topTree:topTreeRoot.children,topTotalNode:topTreeRoot,getValue:(leftNode,topNode)=>{var _a,_b,_c;const record=matrix.get(leftNode.data.dataKey).get(topNode.data.dataKey);return null==record?"-":record[(null!==(_b=null===(_a=leftNode.data)||void 0===_a?void 0:_a.indicator)&&void 0!==_b?_b:null===(_c=topNode.data)||void 0===_c?void 0:_c.indicator).code]}}))},基于交叉表的透视表=_examples_pivot_table_on_cross_table_stories__WEBPACK_IMPORTED_MODULE_8__.PivotTableBasedOnCrossTable},function(module,exports,__webpack_require__){var map={"./common-utils.stories.mdx":891,"./dvt-aggregation.stories.mdx":892,"./internal-getters.stories.mdx":893,"./proto.stories.mdx":894};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=890},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"工具 / 通用工具函数",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"ali-react-table/","*"," 导出了一部分内部的工具函数，方便上层调用，使用时请注意一些函数是从子包导出的。"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h2"},"ali-react-table"),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h3"},"isLeafNode"),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"主要用途：判断一个节点是否为叶子节点"),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h3"},"getTreeDepth"),_ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"获取一棵树的高度/深度"),_ref9=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h3"},"collectNodes"),_ref10=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"按照一定的规则收集树中的所有节点"),_ref11=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"API: ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"function collectNodes<T extends AbstractTreeNode>(nodes: T[], order: 'pre' | 'post' | 'leaf-only'): T[]")),_ref12=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"pre: 前序遍历"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"post: 后续遍历"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"leaf-only: 仅收集叶子节点")),_ref13=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h2"},"ali-react-table/biz"),_ref14=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h3"},"buildTree"),_ref15=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"主要用途：从平铺的数据中构建出树状结构。"),_ref16=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"根据 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"idProp")," 与 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"parentIdProp")," 从对象数组中构建对应的树；当 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"A[parentIdProp] === B[idProp]")," 时，对象 A 会被移动到对象 B 的 children；当一个对象的 parentIdProp 不与其他对象的 idProp 字段相等时，该对象被作为树的顶层节点。"),_ref17=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h3"},"exportTableAsExcel"),_ref18=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"主要用途：将表格导出为 Excel 文件。"),_ref19=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h3"},"layeredSort"),_ref20=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"主要用途：层级排序"),_ref21=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"对树状结构的数据进行排序。layeredSort 是一个递归的过程，针对树上的每一个父节点，该函数都会重新对其子节点数组（children) 进行排序."),_ref22=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h3"},"smartCompare"),_ref23=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"主要用途：比较字符串（字典序）或是数字（自然序）");function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,_ref3,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"ali-react-table-导出的工具函数"},_ref4," 导出的工具函数"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"isleafnode"},_ref5),_ref6,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"gettreedepth"},_ref7),_ref8,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"collectnodes"},_ref9),_ref10,_ref11,_ref12,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"ali-react-tablebiz-导出的工具函数"},_ref13," 导出的工具函数"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"buildtree"},_ref14),_ref15,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"function buildTree<ID extends string, PID extends string, T extends { [key in ID | PID]: string }>(\n  idProp: ID,\n  parentIdProp: PID,\n  items: T[],\n): WithChildren<T>[]\n\ntype WithChildren<T> = T & { children?: WithChildren<T>[] }\n")),_ref16,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"exporttableasexcel"},_ref17),_ref18,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"layeredsort"},_ref19),_ref20,_ref21,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"smartcompare"},_ref22),_ref23)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"工具 / 通用工具函数",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref24=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref24}}),__webpack_exports__.default=componentMeta},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"工具 / 聚合函数生成器",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"简单又实用的聚合函数生成器 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"createAggregateFunction"),"，该生成器接受一个指标配置数组，返回这些指标对应的聚合函数。"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"支持以下聚合操作符：",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"li"},"MAX | MIN | SUM | AVG | COUNT")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"支持的普通四则运算（加减乘除与圆括号）"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"支持简单的计算指标"));function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"聚合函数生成器"},"聚合函数生成器"),_ref3,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"支持的特性"},"支持的特性"),_ref4,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"示例"},"示例"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"import { createAggregateFunction } from 'ali-react-table/pivot'\n\nconst indicators = [\n  { code: 'target', name: '目标收入', expression: 'SUM(target)' },\n  { code: 'income', name: '实际收入', expression: 'SUM(income)' },\n  { code: 'rate', name: '达成比率', expression: 'income / target' },\n]\n\nconst fn = createAggregateFunction(indicators)\n\n// 生成的 fn 如下：\nfunction anonymous(slice) {\n  /* aggregate function generated by dvt-aggregation@x.y.z\n    目标收入: target = SUM(target)\n    实际收入: income = SUM(income)\n    达成比率: rate = income / target\n  */\n\n  let r = {}\n\n  r['target'] = 0\n  r['income'] = 0\n\n  for (const d of slice) {\n    r['target'] += d['target'] || 0\n    r['income'] += d['income'] || 0\n  }\n\n  r['rate'] = r['income'] / r['target']\n\n  return r\n}\n\nconst result = fn([\n  { month: '2022-01', target: 700, income: 600 },\n  { month: '2022-02', target: 800, income: 750 },\n  { month: '2022-03', target: 1000, income: 1050 },\n])\n// result: { target: 2500, income: 2400, rate: 0.96 }\n")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"工具 / 聚合函数生成器",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref5}}),__webpack_exports__.default=componentMeta},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"工具 / internal getters",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"对表格进行封装时，可能需要用到一些表格内部的数据处理方法，使得上层封装的功能和表格内部保持一致。"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"ali-react-table 导出的内部方法如下："),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"safeRenderHeader(column) 获取表头的渲染内容"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"safeGetValue(column, record, rowIndex) 获取单元格的值"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"safeGetRowKey(primaryKey, record, rowIndex) 获取某一行的 key"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"safeGetCellProps(column, record, rowIndex) 获取单元格的 props"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"safeRender（column, record, rowIndex) 获取单元格的渲染内容")),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"使用示例："),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"注意在表格的内部实现中，可能并没有实际调用这些内部方法（在表格内部调用这些方法会产生很多的冗余计算），但表格内部的数据处理和这些方法是保持一致的。");function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"internal-getters"},"Internal Getters"),_ref3,_ref4,_ref5,_ref6,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-javascript"}),"import { internals } from 'ali-react-table'\n\nconst column = { code: 'hello', name: 'world' }\nconst rowIndex = 3\nconst record = dataSource[rowIndex]\n\nconst cellProps = internals.safeRender(column, record, rowIndex)\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"每个内部的数据方法的实现其实都很简单，详见 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("a",_extends({parentName:"p"},{href:"https://github.com/alibaba/ali-react-table/blob/master/src/common-utils/internals.ts",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"源码"),"."),_ref7)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"工具 / internal getters",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref8}}),__webpack_exports__.default=componentMeta},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(18),__webpack_require__(46),__webpack_require__(48),__webpack_require__(26),__webpack_require__(20),__webpack_require__(54),__webpack_require__(37),__webpack_require__(64),__webpack_require__(65),__webpack_require__(23),__webpack_require__(49),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(2),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(16);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"工具 / proto",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"在实际开发中过程中，一个表格可能会包含大量维度和指标（在盒马内部，超过 50 列的表格十分常见），列配置的书写工作量会很大。这其中很多的列往往具有相同的宽度、对齐方向或是类似的格式化方法，重复配置较多。",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"ali-react-table/biz")," 导出了 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"proto")," 来简化这些重复配置的书写，有效减少列配置的工作量。"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"注：本页文档中，「原型」指的是使用 proto 创建出来的函数，而不是指 JavaScript 中的函数原型。"),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"proto.object(baseObject)")," 是一个工厂方法，接受一个基础对象 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"baseRecord"),"，返回一个函数；调用该函数时，将以 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"baseRecord")," 为「原型」并根据输入的参数来创建一个新的对象。"),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"在下面的例子中，我们创建了 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"columnProto"),"，并用 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"columnProto")," 来生成其他的列，避免书写相同的默认配置。"),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"proto.array(baseRecord)")," 与 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"proto.object")," 非常类似，也会生成一个函数，但函数的输入参数为一个数组。该函数被调用时，会遍历输入的数组，并根据 baseRecord 来生成对象。"),_ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"在生成对象原型或数组原型时，baseRecord 中的字段值(",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"subProto"),")也可以为一个对象原型或数组原型，生成新对象时 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"subProto")," 将被调用用于对应字段的值。"),_ref9=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h2"},"proto.string"),_ref10=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h2"},"proto.number"),_ref11=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"有的时候某个字段并没有默认值，但我们又希望创建出来的对象必须包含某个对象，此时可以使用 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"proto.string")," 或 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"proto.number")," 来创建原型。"),_ref12=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"此外，",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"proto.notNull")," 用于确保输入参数中某个字段不能为 null/undefine。"),_ref13=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"通过 ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"proto.object")," / ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"proto.array")," 生成的对象上有一个 extends 的方法，可以在已有的原型基础上生成新的原型。"),_ref14=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"用继承的原型生成最终的对象时，会先根据继承的配置处理数据，然后调用基础的配置处理数据。"),_ref15=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"h2"},"proto.empty"),_ref16=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"proto.empty")," 是一个特殊的 symbol，其作用是从结果中移除特定字段。");function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h1",{id:"proto"},"proto"),_ref3,_ref4,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"创建对象原型"},"创建对象原型"),_ref5,_ref6,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-js"}),"import { proto } from 'ali-react-table/biz'\n\nconst columnProto = proto.object({ width: 120, align: 'right' })\n\nconst col1 = columnProto({})\n// 参数为空对象，则所有字段都来自于 baseRecord\n// { width: 120, align: 'right' }\n\nconst col2 = columnProto({ width: 150 })\n// 参数提供了 width 字段，其他字段来自于 baseRecord\n// { width: 150, align: 'right' }\n\nconst col3 = columnProto({ code: 'code-1', align: 'left', lock: false })\n// { code: 'code-1', align: 'left', lock: false, width: 120 }\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"创建数组原型"},"创建数组原型"),_ref7,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-js"}),"import { proto } from 'ali-react-table/biz'\n\nconst columnProto = proto.array({ width: 120, align: 'right', format: amount })\n\nconst columns = columnProto([\n  { code: 'code-1' },\n  { code: 'code-2' },\n  { code: 'code-3', width: 200 },\n  { code: 'code-4', align: 'left' },\n])\n// [\n//   { code: 'code-1', width: 120, align: 'right', format: amount },\n//   { code: 'code-2', width: 120, align: 'right', format: amount },\n//   { code: 'code-3', width: 200, align: 'right', format: amount },\n//   { code: 'code-4', width: 120, align: 'left',  format: amount }\n// ]\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"嵌套原型"},"嵌套原型"),_ref8,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-js"}),"const columnProto = proto.array({\n  width: 120,\n  align: 'right',\n  features: proto.object({ defaultVisible: true }),\n})\n\nconst columns = columnProto([\n  { code: 'code-1' },\n  { code: 'code-2', features: { defaultVisible: false } },\n  { code: 'code-3', features: { sortable: true } },\n])\n// [\n//   { code: 'code-1', width: 120, align: 'right', features: { defaultVisible: true } },\n//   { code: 'code-2', width: 120, align: 'right', features: { defaultVisible: false } },\n//   { code: 'code-3', width: 120, align: 'right', features: { defaultVisible: true, sortable: true } },\n// ]\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"protostring-与-protonumber"},_ref9," 与 ",_ref10),_ref11,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-js"}),"const columnProto = proto.array({\n  code: proto.string,\n  width: proto.number,\n  align: 'right',\n})\n\n// 调用 columnProto 时，输入参数中的 code 字段必须为字符串，width 字段必须为数字\nconst columns = columnProto([\n  { code: 'code-1', width: 100 },\n  { code: 'code-2', width: 120, features: { defaultVisible: false } },\n  { code: 'code-3', width: 120, features: { sortable: true } },\n])\n")),_ref12,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"原型的继承"},"原型的继承"),_ref13,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-js"}),"const column = proto.object({ width: 120, align: 'left' })\nconst alignRightColumn = column.extends({ align: 'right' })\nconst wideColumn = column.extends({ width: 200 })\n\nconst col1 = alignRightColumn({}) // { align: \"right\", width: 120 }\n\nconst col2 = wideColumn({}) // { width: 200, align: \"left\" }\n")),_ref14,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"protoempty"},_ref15),_ref16,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-js"}),"const columnProto = proto.array({\n  width: 120,\n  align: 'right',\n  features: proto.object({ defaultVisible: true }),\n})\n\nconst columns = columnProto([\n  { code: 'code-1' },\n  { code: 'code-2', align: proto.empty },\n  { code: 'code-3', features: proto.empty },\n])\n// [\n//   { code: 'code-1', width: 120, align: 'right', features: { defaultVisible: true } },\n//   { code: 'code-2', width: 120, features: { defaultVisible: true } },\n//   { code: 'code-3', width: 120, align: 'right' },\n// ]\n")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"工具 / proto",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref17=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref17}}),__webpack_exports__.default=componentMeta},function(module,exports,__webpack_require__){var map={"./ROI-analysis-table.stories.tsx":896,"./async-loading-tree-table.stories.tsx":897,"./big-data.stories.tsx":898,"./data-report.stories.tsx":899,"./drill-tree-table/drillable-tree-table.stories.tsx":907,"./pivot-table-on-cross-table.stories.tsx":276,"./rank-table.stories.tsx":901,"./remain-matrix.stories.tsx":902,"./select.stories.tsx":903,"./table-with-complex-operation-bar.stories.tsx":904,"./tree-table-with-last-open-mark.stories.tsx":905};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=895},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ROIAnalysisTable",(function(){return ROIAnalysisTable}));var _alifd_next__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(96),ali_react_table__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(32),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(68),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(61),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(128),react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__),styled_components__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(29),_assets_format__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(17),_assets_fusion_style__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(66);const HintDiv=styled_components__WEBPACK_IMPORTED_MODULE_6__.b.div`
  margin-bottom: 16px;
  font-size: 16px;
  color: darkred;
`;const pbp=ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__.a.array({align:"right",render:_assets_format__WEBPACK_IMPORTED_MODULE_7__.c,width:100,features:ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__.a.object({pbp:!0,dateOrder:ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__.a.number})}),PbpRatioCell=styled_components__WEBPACK_IMPORTED_MODULE_6__.b.div`
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: flex-end;
  cursor: pointer;
  padding-right: 12px;
  user-select: none;

  :hover {
    background: #d6d6d6;
  }
`;function redIfSmallerThanZero(v){if(v<0)return{style:{background:"#f9cace"}}}function rowRender(value,row,rowIndex){return row.render(value,row,rowIndex)}__webpack_exports__.default={parameters:{storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import * as hippo from '@alifd/next'\\nimport { ArtColumn, BaseTable } from 'ali-react-table'\\nimport { applyTransforms, proto, transformColumn } from 'ali-react-table/biz'\\nimport React, { useMemo } from 'react'\\nimport styled from 'styled-components'\\nimport { amount, lfl, ratio } from '../assets/format'\\nimport { FusionStyles } from '../assets/fusion-style'\\n\\nconst HintDiv = styled.div`\\n  margin-bottom: 16px;\\n  font-size: 16px;\\n  color: darkred;\\n`\\n\\nfunction generateRandomData() {\\n  const mockData: any[] = []\\n\\n  const randomPbpRate = () => {\\n    const array = [0.3, 0.4, 0.5, 0.6]\\n    return array[Math.floor(Math.random() * array.length)]\\n  }\\n\\n  const randomAppTrdAmt = () => {\\n    const array = [300, 400, 500, 600]\\n    return array[Math.floor(Math.random() * array.length)]\\n  }\\n\\n  const randomPosTrdAmt = () => {\\n    const array = [400, 500, 600, 800]\\n    return array[Math.floor(Math.random() * array.length)]\\n  }\\n\\n  const randomMarketCost = () => {\\n    const array = [100, 200, 300, 500]\\n    return array[Math.floor(Math.random() * array.length)]\\n  }\\n\\n  const randomNetProfit = () => {\\n    const array = [100, 200, 300]\\n    return array[Math.floor(Math.random() * array.length)]\\n  }\\n\\n  for (let i = 1; i <= 11; i++) {\\n    const item: any = {\\n      stat_date: `3月${i}号`,\\n      pbp_rate_stage1: 0.4,\\n      pbp_rate_stage2: 0.5,\\n      pbp_rate_stage3: 0.6,\\n    }\\n\\n    for (let d = 1; d <= 10; d++) {\\n      if (d + i <= 11) {\\n        item[`pbp_rate_day${d}`] = randomPbpRate()\\n        item[`app_trd_amt_day${d}`] = randomAppTrdAmt()\\n        item[`pos_trd_amt_day${d}`] = randomPosTrdAmt()\\n        item[`market_cost_day${d}`] = randomMarketCost()\\n        item[`net_profit_day${d}`] = randomNetProfit()\\n      }\\n    }\\n\\n    mockData.push(item)\\n  }\\n\\n  return mockData\\n}\\n\\nconst pbp = proto.array<ArtColumn>({\\n  align: 'right',\\n  render: ratio,\\n  width: 100,\\n  features: proto.object({\\n    pbp: true,\\n    dateOrder: proto.number,\\n  }),\\n})\\n\\nconst PbpRatioCell = styled.div`\\n  width: 100%;\\n  height: 100%;\\n  display: flex;\\n  align-items: center;\\n  justify-content: flex-end;\\n  cursor: pointer;\\n  padding-right: 12px;\\n  user-select: none;\\n\\n  :hover {\\n    background: #d6d6d6;\\n  }\\n`\\n\\nfunction redIfSmallerThanZero(v: number) {\\n  if (v < 0) {\\n    return { style: { background: '#f9cace' } }\\n  }\\n}\\n\\n/** 使用 row.render 来渲染单元格 */\\nfunction rowRender(value: any, row: any, rowIndex: number) {\\n  return row.render(value, row, rowIndex)\\n}\\n\\nfunction pbpRatioRender(v: number, col: ArtColumn, row: any) {\\n  if (isNaN(v) || v == null) {\\n    return null\\n  }\\n\\n  const dateOrder = col.features.dateOrder\\n\\n  const getTableRow = (codePrefix: string, name: string, render: any) => {\\n    const current = row[`${codePrefix}day${dateOrder}`]\\n    const left1 = row[`${codePrefix}day${dateOrder - 1}`]\\n    const left2 = row[`${codePrefix}day${dateOrder - 2}`]\\n    const lfl = (current - left1) / left1\\n    return { name, current, left1, left2, lfl, render }\\n  }\\n\\n  const pbp_rate = getTableRow('pbp_rate_', '回本率', ratio)\\n  const app_trd_amt = getTableRow('app_trd_amt_', '线上GMV', amount)\\n  const pos_trd_amt = getTableRow('pos_trd_amt_', '线下GMV', amount)\\n  const market_cost = getTableRow('market_cost_', '营销费用', amount)\\n  const net_profit = getTableRow('net_profit_', '净利额', amount)\\n\\n  const currentCol = {\\n    name: `第${dateOrder}天`,\\n    code: 'current',\\n    align: 'right' as const,\\n    getCellProps: redIfSmallerThanZero,\\n    render: rowRender,\\n  }\\n  const left1Col = {\\n    name: `第${dateOrder - 1}天`,\\n    code: 'left1',\\n    align: 'right' as const,\\n    getCellProps: redIfSmallerThanZero,\\n    render: rowRender,\\n  }\\n  const left2Col = {\\n    name: `第${dateOrder - 2}天`,\\n    code: 'left2',\\n    align: 'right' as const,\\n    getCellProps: redIfSmallerThanZero,\\n    render: rowRender,\\n  }\\n  const lflCol = {\\n    name: `对比第${dateOrder - 1}天`,\\n    code: 'lfl',\\n    align: 'right' as const,\\n    render: lfl,\\n  }\\n\\n  const dataSource = [pbp_rate, app_trd_amt, pos_trd_amt, market_cost, net_profit]\\n\\n  return (\\n    <hippo.Balloon\\n      trigger={<PbpRatioCell>{ratio(v)}</PbpRatioCell>}\\n      closable={false}\\n      triggerType=\\\"click\\\"\\n      style={{ maxWidth: 'none', width: 500 }}\\n    >\\n      <BaseTable\\n        columns={[\\n          { name: '明细', code: 'name' },\\n          {\\n            name: `${row.stat_date} 第${dateOrder}天`,\\n            align: 'center' as const,\\n            children: [currentCol, dateOrder >= 2 && lflCol].filter(Boolean),\\n          },\\n          dateOrder >= 2 && left1Col,\\n          dateOrder >= 3 && left2Col,\\n        ].filter(Boolean)}\\n        dataSource={dataSource}\\n      />\\n    </hippo.Balloon>\\n  )\\n}\\n\\nexport default { title: '示例 / 业务示例-投入产出分析表格' }\\n\\nexport function ROIAnalysisTable() {\\n  const dataSource = useMemo(() => generateRandomData(), [])\\n\\n  const columnProto = proto.array<ArtColumn>({ width: 100, align: 'right' })\\n\\n  const columns = columnProto([\\n    { lock: true, code: 'stat_date', name: '日期' },\\n    {\\n      name: '阶段情况',\\n      align: 'left',\\n      children: columnProto([\\n        { code: 'pbp_rate_stage1', name: '阶段1回本率', render: ratio },\\n        { code: 'pbp_rate_stage2', name: '阶段2回本率', render: ratio },\\n        { code: 'pbp_rate_stage3', name: '阶段3回本率', render: ratio },\\n      ]),\\n    },\\n    {\\n      name: '分日情况',\\n      align: 'left',\\n      children: pbp([\\n        { code: 'pbp_rate_day1', name: '第1天回本率', features: { dateOrder: 1 } },\\n        { code: 'pbp_rate_day2', name: '第2天回本率', features: { dateOrder: 2 } },\\n        { code: 'pbp_rate_day3', name: '第3天回本率', features: { dateOrder: 3 } },\\n        { code: 'pbp_rate_day4', name: '第4天回本率', features: { dateOrder: 4 } },\\n        { code: 'pbp_rate_day5', name: '第5天回本率', features: { dateOrder: 5 } },\\n        { code: 'pbp_rate_day6', name: '第6天回本率', features: { dateOrder: 6 } },\\n        { code: 'pbp_rate_day7', name: '第7天回本率', features: { dateOrder: 7 } },\\n        { code: 'pbp_rate_day8', name: '第8天回本率', features: { dateOrder: 8 } },\\n        { code: 'pbp_rate_day9', name: '第9天回本率', features: { dateOrder: 9 } },\\n        { code: 'pbp_rate_day10', name: '第10天回本率', features: { dateOrder: 10 } },\\n      ]),\\n    },\\n  ])\\n\\n  const renderData = applyTransforms(\\n    { dataSource: dataSource, columns },\\n    transformColumn((col) => {\\n      if (!col.features?.pbp) {\\n        return col\\n      }\\n      return {\\n        ...col,\\n        getCellProps() {\\n          return { style: { padding: 0 } }\\n        },\\n        render(v: number, row: any) {\\n          return pbpRatioRender(v, col, row)\\n        },\\n      }\\n    }),\\n  )\\n\\n  return (\\n    <div>\\n      <FusionStyles />\\n      <HintDiv>交互提示：点击分日情况单元格 查看详细数据</HintDiv>\\n      <BaseTable columns={renderData.columns} dataSource={renderData.dataSource} />\\n    </div>\\n  )\\n}\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"示例-业务示例-投入产出分析表格--roi-analysis-table\":{\"startLoc\":{\"col\":7,\"line\":180},\"endLoc\":{\"col\":1,\"line\":239},\"startBody\":{\"col\":7,\"line\":180},\"endBody\":{\"col\":1,\"line\":239}}};\n    \nimport * as hippo from '@alifd/next'\nimport { ArtColumn, BaseTable } from 'ali-react-table'\nimport { applyTransforms, proto, transformColumn } from 'ali-react-table/biz'\nimport React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { amount, lfl, ratio } from '../assets/format'\nimport { FusionStyles } from '../assets/fusion-style'\n\nconst HintDiv = styled.div`\n  margin-bottom: 16px;\n  font-size: 16px;\n  color: darkred;\n`\n\nfunction generateRandomData() {\n  const mockData: any[] = []\n\n  const randomPbpRate = () => {\n    const array = [0.3, 0.4, 0.5, 0.6]\n    return array[Math.floor(Math.random() * array.length)]\n  }\n\n  const randomAppTrdAmt = () => {\n    const array = [300, 400, 500, 600]\n    return array[Math.floor(Math.random() * array.length)]\n  }\n\n  const randomPosTrdAmt = () => {\n    const array = [400, 500, 600, 800]\n    return array[Math.floor(Math.random() * array.length)]\n  }\n\n  const randomMarketCost = () => {\n    const array = [100, 200, 300, 500]\n    return array[Math.floor(Math.random() * array.length)]\n  }\n\n  const randomNetProfit = () => {\n    const array = [100, 200, 300]\n    return array[Math.floor(Math.random() * array.length)]\n  }\n\n  for (let i = 1; i <= 11; i++) {\n    const item: any = {\n      stat_date: `3月${i}号`,\n      pbp_rate_stage1: 0.4,\n      pbp_rate_stage2: 0.5,\n      pbp_rate_stage3: 0.6,\n    }\n\n    for (let d = 1; d <= 10; d++) {\n      if (d + i <= 11) {\n        item[`pbp_rate_day${d}`] = randomPbpRate()\n        item[`app_trd_amt_day${d}`] = randomAppTrdAmt()\n        item[`pos_trd_amt_day${d}`] = randomPosTrdAmt()\n        item[`market_cost_day${d}`] = randomMarketCost()\n        item[`net_profit_day${d}`] = randomNetProfit()\n      }\n    }\n\n    mockData.push(item)\n  }\n\n  return mockData\n}\n\nconst pbp = proto.array<ArtColumn>({\n  align: 'right',\n  render: ratio,\n  width: 100,\n  features: proto.object({\n    pbp: true,\n    dateOrder: proto.number,\n  }),\n})\n\nconst PbpRatioCell = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  cursor: pointer;\n  padding-right: 12px;\n  user-select: none;\n\n  :hover {\n    background: #d6d6d6;\n  }\n`\n\nfunction redIfSmallerThanZero(v: number) {\n  if (v < 0) {\n    return { style: { background: '#f9cace' } }\n  }\n}\n\n/** 使用 row.render 来渲染单元格 */\nfunction rowRender(value: any, row: any, rowIndex: number) {\n  return row.render(value, row, rowIndex)\n}\n\nfunction pbpRatioRender(v: number, col: ArtColumn, row: any) {\n  if (isNaN(v) || v == null) {\n    return null\n  }\n\n  const dateOrder = col.features.dateOrder\n\n  const getTableRow = (codePrefix: string, name: string, render: any) => {\n    const current = row[`${codePrefix}day${dateOrder}`]\n    const left1 = row[`${codePrefix}day${dateOrder - 1}`]\n    const left2 = row[`${codePrefix}day${dateOrder - 2}`]\n    const lfl = (current - left1) / left1\n    return { name, current, left1, left2, lfl, render }\n  }\n\n  const pbp_rate = getTableRow('pbp_rate_', '回本率', ratio)\n  const app_trd_amt = getTableRow('app_trd_amt_', '线上GMV', amount)\n  const pos_trd_amt = getTableRow('pos_trd_amt_', '线下GMV', amount)\n  const market_cost = getTableRow('market_cost_', '营销费用', amount)\n  const net_profit = getTableRow('net_profit_', '净利额', amount)\n\n  const currentCol = {\n    name: `第${dateOrder}天`,\n    code: 'current',\n    align: 'right' as const,\n    getCellProps: redIfSmallerThanZero,\n    render: rowRender,\n  }\n  const left1Col = {\n    name: `第${dateOrder - 1}天`,\n    code: 'left1',\n    align: 'right' as const,\n    getCellProps: redIfSmallerThanZero,\n    render: rowRender,\n  }\n  const left2Col = {\n    name: `第${dateOrder - 2}天`,\n    code: 'left2',\n    align: 'right' as const,\n    getCellProps: redIfSmallerThanZero,\n    render: rowRender,\n  }\n  const lflCol = {\n    name: `对比第${dateOrder - 1}天`,\n    code: 'lfl',\n    align: 'right' as const,\n    render: lfl,\n  }\n\n  const dataSource = [pbp_rate, app_trd_amt, pos_trd_amt, market_cost, net_profit]\n\n  return (\n    <hippo.Balloon\n      trigger={<PbpRatioCell>{ratio(v)}</PbpRatioCell>}\n      closable={false}\n      triggerType=\"click\"\n      style={{ maxWidth: 'none', width: 500 }}\n    >\n      <BaseTable\n        columns={[\n          { name: '明细', code: 'name' },\n          {\n            name: `${row.stat_date} 第${dateOrder}天`,\n            align: 'center' as const,\n            children: [currentCol, dateOrder >= 2 && lflCol].filter(Boolean),\n          },\n          dateOrder >= 2 && left1Col,\n          dateOrder >= 3 && left2Col,\n        ].filter(Boolean)}\n        dataSource={dataSource}\n      />\n    </hippo.Balloon>\n  )\n}\n\nexport default {parameters: {\"storySource\":{\"source\":\"import * as hippo from '@alifd/next'\\nimport { ArtColumn, BaseTable } from 'ali-react-table'\\nimport { applyTransforms, proto, transformColumn } from 'ali-react-table/biz'\\nimport React, { useMemo } from 'react'\\nimport styled from 'styled-components'\\nimport { amount, lfl, ratio } from '../assets/format'\\nimport { FusionStyles } from '../assets/fusion-style'\\n\\nconst HintDiv = styled.div`\\n  margin-bottom: 16px;\\n  font-size: 16px;\\n  color: darkred;\\n`\\n\\nfunction generateRandomData() {\\n  const mockData: any[] = []\\n\\n  const randomPbpRate = () => {\\n    const array = [0.3, 0.4, 0.5, 0.6]\\n    return array[Math.floor(Math.random() * array.length)]\\n  }\\n\\n  const randomAppTrdAmt = () => {\\n    const array = [300, 400, 500, 600]\\n    return array[Math.floor(Math.random() * array.length)]\\n  }\\n\\n  const randomPosTrdAmt = () => {\\n    const array = [400, 500, 600, 800]\\n    return array[Math.floor(Math.random() * array.length)]\\n  }\\n\\n  const randomMarketCost = () => {\\n    const array = [100, 200, 300, 500]\\n    return array[Math.floor(Math.random() * array.length)]\\n  }\\n\\n  const randomNetProfit = () => {\\n    const array = [100, 200, 300]\\n    return array[Math.floor(Math.random() * array.length)]\\n  }\\n\\n  for (let i = 1; i <= 11; i++) {\\n    const item: any = {\\n      stat_date: `3月${i}号`,\\n      pbp_rate_stage1: 0.4,\\n      pbp_rate_stage2: 0.5,\\n      pbp_rate_stage3: 0.6,\\n    }\\n\\n    for (let d = 1; d <= 10; d++) {\\n      if (d + i <= 11) {\\n        item[`pbp_rate_day${d}`] = randomPbpRate()\\n        item[`app_trd_amt_day${d}`] = randomAppTrdAmt()\\n        item[`pos_trd_amt_day${d}`] = randomPosTrdAmt()\\n        item[`market_cost_day${d}`] = randomMarketCost()\\n        item[`net_profit_day${d}`] = randomNetProfit()\\n      }\\n    }\\n\\n    mockData.push(item)\\n  }\\n\\n  return mockData\\n}\\n\\nconst pbp = proto.array<ArtColumn>({\\n  align: 'right',\\n  render: ratio,\\n  width: 100,\\n  features: proto.object({\\n    pbp: true,\\n    dateOrder: proto.number,\\n  }),\\n})\\n\\nconst PbpRatioCell = styled.div`\\n  width: 100%;\\n  height: 100%;\\n  display: flex;\\n  align-items: center;\\n  justify-content: flex-end;\\n  cursor: pointer;\\n  padding-right: 12px;\\n  user-select: none;\\n\\n  :hover {\\n    background: #d6d6d6;\\n  }\\n`\\n\\nfunction redIfSmallerThanZero(v: number) {\\n  if (v < 0) {\\n    return { style: { background: '#f9cace' } }\\n  }\\n}\\n\\n/** 使用 row.render 来渲染单元格 */\\nfunction rowRender(value: any, row: any, rowIndex: number) {\\n  return row.render(value, row, rowIndex)\\n}\\n\\nfunction pbpRatioRender(v: number, col: ArtColumn, row: any) {\\n  if (isNaN(v) || v == null) {\\n    return null\\n  }\\n\\n  const dateOrder = col.features.dateOrder\\n\\n  const getTableRow = (codePrefix: string, name: string, render: any) => {\\n    const current = row[`${codePrefix}day${dateOrder}`]\\n    const left1 = row[`${codePrefix}day${dateOrder - 1}`]\\n    const left2 = row[`${codePrefix}day${dateOrder - 2}`]\\n    const lfl = (current - left1) / left1\\n    return { name, current, left1, left2, lfl, render }\\n  }\\n\\n  const pbp_rate = getTableRow('pbp_rate_', '回本率', ratio)\\n  const app_trd_amt = getTableRow('app_trd_amt_', '线上GMV', amount)\\n  const pos_trd_amt = getTableRow('pos_trd_amt_', '线下GMV', amount)\\n  const market_cost = getTableRow('market_cost_', '营销费用', amount)\\n  const net_profit = getTableRow('net_profit_', '净利额', amount)\\n\\n  const currentCol = {\\n    name: `第${dateOrder}天`,\\n    code: 'current',\\n    align: 'right' as const,\\n    getCellProps: redIfSmallerThanZero,\\n    render: rowRender,\\n  }\\n  const left1Col = {\\n    name: `第${dateOrder - 1}天`,\\n    code: 'left1',\\n    align: 'right' as const,\\n    getCellProps: redIfSmallerThanZero,\\n    render: rowRender,\\n  }\\n  const left2Col = {\\n    name: `第${dateOrder - 2}天`,\\n    code: 'left2',\\n    align: 'right' as const,\\n    getCellProps: redIfSmallerThanZero,\\n    render: rowRender,\\n  }\\n  const lflCol = {\\n    name: `对比第${dateOrder - 1}天`,\\n    code: 'lfl',\\n    align: 'right' as const,\\n    render: lfl,\\n  }\\n\\n  const dataSource = [pbp_rate, app_trd_amt, pos_trd_amt, market_cost, net_profit]\\n\\n  return (\\n    <hippo.Balloon\\n      trigger={<PbpRatioCell>{ratio(v)}</PbpRatioCell>}\\n      closable={false}\\n      triggerType=\\\"click\\\"\\n      style={{ maxWidth: 'none', width: 500 }}\\n    >\\n      <BaseTable\\n        columns={[\\n          { name: '明细', code: 'name' },\\n          {\\n            name: `${row.stat_date} 第${dateOrder}天`,\\n            align: 'center' as const,\\n            children: [currentCol, dateOrder >= 2 && lflCol].filter(Boolean),\\n          },\\n          dateOrder >= 2 && left1Col,\\n          dateOrder >= 3 && left2Col,\\n        ].filter(Boolean)}\\n        dataSource={dataSource}\\n      />\\n    </hippo.Balloon>\\n  )\\n}\\n\\nexport default { title: '示例 / 业务示例-投入产出分析表格' }\\n\\nexport function ROIAnalysisTable() {\\n  const dataSource = useMemo(() => generateRandomData(), [])\\n\\n  const columnProto = proto.array<ArtColumn>({ width: 100, align: 'right' })\\n\\n  const columns = columnProto([\\n    { lock: true, code: 'stat_date', name: '日期' },\\n    {\\n      name: '阶段情况',\\n      align: 'left',\\n      children: columnProto([\\n        { code: 'pbp_rate_stage1', name: '阶段1回本率', render: ratio },\\n        { code: 'pbp_rate_stage2', name: '阶段2回本率', render: ratio },\\n        { code: 'pbp_rate_stage3', name: '阶段3回本率', render: ratio },\\n      ]),\\n    },\\n    {\\n      name: '分日情况',\\n      align: 'left',\\n      children: pbp([\\n        { code: 'pbp_rate_day1', name: '第1天回本率', features: { dateOrder: 1 } },\\n        { code: 'pbp_rate_day2', name: '第2天回本率', features: { dateOrder: 2 } },\\n        { code: 'pbp_rate_day3', name: '第3天回本率', features: { dateOrder: 3 } },\\n        { code: 'pbp_rate_day4', name: '第4天回本率', features: { dateOrder: 4 } },\\n        { code: 'pbp_rate_day5', name: '第5天回本率', features: { dateOrder: 5 } },\\n        { code: 'pbp_rate_day6', name: '第6天回本率', features: { dateOrder: 6 } },\\n        { code: 'pbp_rate_day7', name: '第7天回本率', features: { dateOrder: 7 } },\\n        { code: 'pbp_rate_day8', name: '第8天回本率', features: { dateOrder: 8 } },\\n        { code: 'pbp_rate_day9', name: '第9天回本率', features: { dateOrder: 9 } },\\n        { code: 'pbp_rate_day10', name: '第10天回本率', features: { dateOrder: 10 } },\\n      ]),\\n    },\\n  ])\\n\\n  const renderData = applyTransforms(\\n    { dataSource: dataSource, columns },\\n    transformColumn((col) => {\\n      if (!col.features?.pbp) {\\n        return col\\n      }\\n      return {\\n        ...col,\\n        getCellProps() {\\n          return { style: { padding: 0 } }\\n        },\\n        render(v: number, row: any) {\\n          return pbpRatioRender(v, col, row)\\n        },\\n      }\\n    }),\\n  )\\n\\n  return (\\n    <div>\\n      <FusionStyles />\\n      <HintDiv>交互提示：点击分日情况单元格 查看详细数据</HintDiv>\\n      <BaseTable columns={renderData.columns} dataSource={renderData.dataSource} />\\n    </div>\\n  )\\n}\\n\",\"locationsMap\":{\"示例-业务示例-投入产出分析表格--roi-analysis-table\":{\"startLoc\":{\"col\":7,\"line\":180},\"endLoc\":{\"col\":1,\"line\":239},\"startBody\":{\"col\":7,\"line\":180},\"endBody\":{\"col\":1,\"line\":239}}}},}, title: '示例 / 业务示例-投入产出分析表格' }\n\nexport const ROIAnalysisTable = function ROIAnalysisTable() {\n  const dataSource = useMemo(() => generateRandomData(), [])\n\n  const columnProto = proto.array<ArtColumn>({ width: 100, align: 'right' })\n\n  const columns = columnProto([\n    { lock: true, code: 'stat_date', name: '日期' },\n    {\n      name: '阶段情况',\n      align: 'left',\n      children: columnProto([\n        { code: 'pbp_rate_stage1', name: '阶段1回本率', render: ratio },\n        { code: 'pbp_rate_stage2', name: '阶段2回本率', render: ratio },\n        { code: 'pbp_rate_stage3', name: '阶段3回本率', render: ratio },\n      ]),\n    },\n    {\n      name: '分日情况',\n      align: 'left',\n      children: pbp([\n        { code: 'pbp_rate_day1', name: '第1天回本率', features: { dateOrder: 1 } },\n        { code: 'pbp_rate_day2', name: '第2天回本率', features: { dateOrder: 2 } },\n        { code: 'pbp_rate_day3', name: '第3天回本率', features: { dateOrder: 3 } },\n        { code: 'pbp_rate_day4', name: '第4天回本率', features: { dateOrder: 4 } },\n        { code: 'pbp_rate_day5', name: '第5天回本率', features: { dateOrder: 5 } },\n        { code: 'pbp_rate_day6', name: '第6天回本率', features: { dateOrder: 6 } },\n        { code: 'pbp_rate_day7', name: '第7天回本率', features: { dateOrder: 7 } },\n        { code: 'pbp_rate_day8', name: '第8天回本率', features: { dateOrder: 8 } },\n        { code: 'pbp_rate_day9', name: '第9天回本率', features: { dateOrder: 9 } },\n        { code: 'pbp_rate_day10', name: '第10天回本率', features: { dateOrder: 10 } },\n      ]),\n    },\n  ])\n\n  const renderData = applyTransforms(\n    { dataSource: dataSource, columns },\n    transformColumn((col) => {\n      if (!col.features?.pbp) {\n        return col\n      }\n      return {\n        ...col,\n        getCellProps() {\n          return { style: { padding: 0 } }\n        },\n        render(v: number, row: any) {\n          return pbpRatioRender(v, col, row)\n        },\n      }\n    }),\n  )\n\n  return (\n    <div>\n      <FusionStyles />\n      <HintDiv>交互提示：点击分日情况单元格 查看详细数据</HintDiv>\n      <BaseTable columns={renderData.columns} dataSource={renderData.dataSource} />\n    </div>\n  )\n};",locationsMap:{"示例-业务示例-投入产出分析表格--roi-analysis-table":{startLoc:{col:32,line:188},endLoc:{col:1,line:247},startBody:{col:32,line:188},endBody:{col:1,line:247}}}},storySource:{source:"import * as hippo from '@alifd/next'\nimport { ArtColumn, BaseTable } from 'ali-react-table'\nimport { applyTransforms, proto, transformColumn } from 'ali-react-table/biz'\nimport React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { amount, lfl, ratio } from '../assets/format'\nimport { FusionStyles } from '../assets/fusion-style'\n\nconst HintDiv = styled.div`\n  margin-bottom: 16px;\n  font-size: 16px;\n  color: darkred;\n`\n\nfunction generateRandomData() {\n  const mockData: any[] = []\n\n  const randomPbpRate = () => {\n    const array = [0.3, 0.4, 0.5, 0.6]\n    return array[Math.floor(Math.random() * array.length)]\n  }\n\n  const randomAppTrdAmt = () => {\n    const array = [300, 400, 500, 600]\n    return array[Math.floor(Math.random() * array.length)]\n  }\n\n  const randomPosTrdAmt = () => {\n    const array = [400, 500, 600, 800]\n    return array[Math.floor(Math.random() * array.length)]\n  }\n\n  const randomMarketCost = () => {\n    const array = [100, 200, 300, 500]\n    return array[Math.floor(Math.random() * array.length)]\n  }\n\n  const randomNetProfit = () => {\n    const array = [100, 200, 300]\n    return array[Math.floor(Math.random() * array.length)]\n  }\n\n  for (let i = 1; i <= 11; i++) {\n    const item: any = {\n      stat_date: `3月${i}号`,\n      pbp_rate_stage1: 0.4,\n      pbp_rate_stage2: 0.5,\n      pbp_rate_stage3: 0.6,\n    }\n\n    for (let d = 1; d <= 10; d++) {\n      if (d + i <= 11) {\n        item[`pbp_rate_day${d}`] = randomPbpRate()\n        item[`app_trd_amt_day${d}`] = randomAppTrdAmt()\n        item[`pos_trd_amt_day${d}`] = randomPosTrdAmt()\n        item[`market_cost_day${d}`] = randomMarketCost()\n        item[`net_profit_day${d}`] = randomNetProfit()\n      }\n    }\n\n    mockData.push(item)\n  }\n\n  return mockData\n}\n\nconst pbp = proto.array<ArtColumn>({\n  align: 'right',\n  render: ratio,\n  width: 100,\n  features: proto.object({\n    pbp: true,\n    dateOrder: proto.number,\n  }),\n})\n\nconst PbpRatioCell = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  cursor: pointer;\n  padding-right: 12px;\n  user-select: none;\n\n  :hover {\n    background: #d6d6d6;\n  }\n`\n\nfunction redIfSmallerThanZero(v: number) {\n  if (v < 0) {\n    return { style: { background: '#f9cace' } }\n  }\n}\n\n/** 使用 row.render 来渲染单元格 */\nfunction rowRender(value: any, row: any, rowIndex: number) {\n  return row.render(value, row, rowIndex)\n}\n\nfunction pbpRatioRender(v: number, col: ArtColumn, row: any) {\n  if (isNaN(v) || v == null) {\n    return null\n  }\n\n  const dateOrder = col.features.dateOrder\n\n  const getTableRow = (codePrefix: string, name: string, render: any) => {\n    const current = row[`${codePrefix}day${dateOrder}`]\n    const left1 = row[`${codePrefix}day${dateOrder - 1}`]\n    const left2 = row[`${codePrefix}day${dateOrder - 2}`]\n    const lfl = (current - left1) / left1\n    return { name, current, left1, left2, lfl, render }\n  }\n\n  const pbp_rate = getTableRow('pbp_rate_', '回本率', ratio)\n  const app_trd_amt = getTableRow('app_trd_amt_', '线上GMV', amount)\n  const pos_trd_amt = getTableRow('pos_trd_amt_', '线下GMV', amount)\n  const market_cost = getTableRow('market_cost_', '营销费用', amount)\n  const net_profit = getTableRow('net_profit_', '净利额', amount)\n\n  const currentCol = {\n    name: `第${dateOrder}天`,\n    code: 'current',\n    align: 'right' as const,\n    getCellProps: redIfSmallerThanZero,\n    render: rowRender,\n  }\n  const left1Col = {\n    name: `第${dateOrder - 1}天`,\n    code: 'left1',\n    align: 'right' as const,\n    getCellProps: redIfSmallerThanZero,\n    render: rowRender,\n  }\n  const left2Col = {\n    name: `第${dateOrder - 2}天`,\n    code: 'left2',\n    align: 'right' as const,\n    getCellProps: redIfSmallerThanZero,\n    render: rowRender,\n  }\n  const lflCol = {\n    name: `对比第${dateOrder - 1}天`,\n    code: 'lfl',\n    align: 'right' as const,\n    render: lfl,\n  }\n\n  const dataSource = [pbp_rate, app_trd_amt, pos_trd_amt, market_cost, net_profit]\n\n  return (\n    <hippo.Balloon\n      trigger={<PbpRatioCell>{ratio(v)}</PbpRatioCell>}\n      closable={false}\n      triggerType=\"click\"\n      style={{ maxWidth: 'none', width: 500 }}\n    >\n      <BaseTable\n        columns={[\n          { name: '明细', code: 'name' },\n          {\n            name: `${row.stat_date} 第${dateOrder}天`,\n            align: 'center' as const,\n            children: [currentCol, dateOrder >= 2 && lflCol].filter(Boolean),\n          },\n          dateOrder >= 2 && left1Col,\n          dateOrder >= 3 && left2Col,\n        ].filter(Boolean)}\n        dataSource={dataSource}\n      />\n    </hippo.Balloon>\n  )\n}\n\nexport default { title: '示例 / 业务示例-投入产出分析表格' }\n\nexport function ROIAnalysisTable() {\n  const dataSource = useMemo(() => generateRandomData(), [])\n\n  const columnProto = proto.array<ArtColumn>({ width: 100, align: 'right' })\n\n  const columns = columnProto([\n    { lock: true, code: 'stat_date', name: '日期' },\n    {\n      name: '阶段情况',\n      align: 'left',\n      children: columnProto([\n        { code: 'pbp_rate_stage1', name: '阶段1回本率', render: ratio },\n        { code: 'pbp_rate_stage2', name: '阶段2回本率', render: ratio },\n        { code: 'pbp_rate_stage3', name: '阶段3回本率', render: ratio },\n      ]),\n    },\n    {\n      name: '分日情况',\n      align: 'left',\n      children: pbp([\n        { code: 'pbp_rate_day1', name: '第1天回本率', features: { dateOrder: 1 } },\n        { code: 'pbp_rate_day2', name: '第2天回本率', features: { dateOrder: 2 } },\n        { code: 'pbp_rate_day3', name: '第3天回本率', features: { dateOrder: 3 } },\n        { code: 'pbp_rate_day4', name: '第4天回本率', features: { dateOrder: 4 } },\n        { code: 'pbp_rate_day5', name: '第5天回本率', features: { dateOrder: 5 } },\n        { code: 'pbp_rate_day6', name: '第6天回本率', features: { dateOrder: 6 } },\n        { code: 'pbp_rate_day7', name: '第7天回本率', features: { dateOrder: 7 } },\n        { code: 'pbp_rate_day8', name: '第8天回本率', features: { dateOrder: 8 } },\n        { code: 'pbp_rate_day9', name: '第9天回本率', features: { dateOrder: 9 } },\n        { code: 'pbp_rate_day10', name: '第10天回本率', features: { dateOrder: 10 } },\n      ]),\n    },\n  ])\n\n  const renderData = applyTransforms(\n    { dataSource: dataSource, columns },\n    transformColumn((col) => {\n      if (!col.features?.pbp) {\n        return col\n      }\n      return {\n        ...col,\n        getCellProps() {\n          return { style: { padding: 0 } }\n        },\n        render(v: number, row: any) {\n          return pbpRatioRender(v, col, row)\n        },\n      }\n    }),\n  )\n\n  return (\n    <div>\n      <FusionStyles />\n      <HintDiv>交互提示：点击分日情况单元格 查看详细数据</HintDiv>\n      <BaseTable columns={renderData.columns} dataSource={renderData.dataSource} />\n    </div>\n  )\n}\n",locationsMap:{"示例-业务示例-投入产出分析表格--roi-analysis-table":{startLoc:{col:7,line:180},endLoc:{col:1,line:239},startBody:{col:7,line:180},endBody:{col:1,line:239}}}}},title:"示例 / 业务示例-投入产出分析表格"};const ROIAnalysisTable=function ROIAnalysisTable(){const dataSource=Object(react__WEBPACK_IMPORTED_MODULE_5__.useMemo)(()=>function generateRandomData(){const mockData=[],randomPbpRate=()=>{const array=[.3,.4,.5,.6];return array[Math.floor(Math.random()*array.length)]},randomAppTrdAmt=()=>{const array=[300,400,500,600];return array[Math.floor(Math.random()*array.length)]},randomPosTrdAmt=()=>{const array=[400,500,600,800];return array[Math.floor(Math.random()*array.length)]},randomMarketCost=()=>{const array=[100,200,300,500];return array[Math.floor(Math.random()*array.length)]},randomNetProfit=()=>{const array=[100,200,300];return array[Math.floor(Math.random()*array.length)]};for(let i=1;i<=11;i++){const item={stat_date:`3月${i}号`,pbp_rate_stage1:.4,pbp_rate_stage2:.5,pbp_rate_stage3:.6};for(let d=1;d<=10;d++)d+i<=11&&(item["pbp_rate_day"+d]=randomPbpRate(),item["app_trd_amt_day"+d]=randomAppTrdAmt(),item["pos_trd_amt_day"+d]=randomPosTrdAmt(),item["market_cost_day"+d]=randomMarketCost(),item["net_profit_day"+d]=randomNetProfit());mockData.push(item)}return mockData}(),[]),columnProto=ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__.a.array({width:100,align:"right"}),columns=columnProto([{lock:!0,code:"stat_date",name:"日期"},{name:"阶段情况",align:"left",children:columnProto([{code:"pbp_rate_stage1",name:"阶段1回本率",render:_assets_format__WEBPACK_IMPORTED_MODULE_7__.c},{code:"pbp_rate_stage2",name:"阶段2回本率",render:_assets_format__WEBPACK_IMPORTED_MODULE_7__.c},{code:"pbp_rate_stage3",name:"阶段3回本率",render:_assets_format__WEBPACK_IMPORTED_MODULE_7__.c}])},{name:"分日情况",align:"left",children:pbp([{code:"pbp_rate_day1",name:"第1天回本率",features:{dateOrder:1}},{code:"pbp_rate_day2",name:"第2天回本率",features:{dateOrder:2}},{code:"pbp_rate_day3",name:"第3天回本率",features:{dateOrder:3}},{code:"pbp_rate_day4",name:"第4天回本率",features:{dateOrder:4}},{code:"pbp_rate_day5",name:"第5天回本率",features:{dateOrder:5}},{code:"pbp_rate_day6",name:"第6天回本率",features:{dateOrder:6}},{code:"pbp_rate_day7",name:"第7天回本率",features:{dateOrder:7}},{code:"pbp_rate_day8",name:"第8天回本率",features:{dateOrder:8}},{code:"pbp_rate_day9",name:"第9天回本率",features:{dateOrder:9}},{code:"pbp_rate_day10",name:"第10天回本率",features:{dateOrder:10}}])}]),renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_3__.a)({dataSource:dataSource,columns:columns},Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_4__.a)(col=>{var _a;return(null===(_a=col.features)||void 0===_a?void 0:_a.pbp)?{...col,getCellProps:()=>({style:{padding:0}}),render:(v,row)=>function pbpRatioRender(v,col,row){if(isNaN(v)||null==v)return null;const dateOrder=col.features.dateOrder,getTableRow=(codePrefix,name,render)=>{const current=row[`${codePrefix}day${dateOrder}`],left1=row[`${codePrefix}day${dateOrder-1}`];return{name:name,current:current,left1:left1,left2:row[`${codePrefix}day${dateOrder-2}`],lfl:(current-left1)/left1,render:render}},pbp_rate=getTableRow("pbp_rate_","回本率",_assets_format__WEBPACK_IMPORTED_MODULE_7__.c),app_trd_amt=getTableRow("app_trd_amt_","线上GMV",_assets_format__WEBPACK_IMPORTED_MODULE_7__.a),pos_trd_amt=getTableRow("pos_trd_amt_","线下GMV",_assets_format__WEBPACK_IMPORTED_MODULE_7__.a),market_cost=getTableRow("market_cost_","营销费用",_assets_format__WEBPACK_IMPORTED_MODULE_7__.a),net_profit=getTableRow("net_profit_","净利额",_assets_format__WEBPACK_IMPORTED_MODULE_7__.a),currentCol={name:`第${dateOrder}天`,code:"current",align:"right",getCellProps:redIfSmallerThanZero,render:rowRender},left1Col={name:`第${dateOrder-1}天`,code:"left1",align:"right",getCellProps:redIfSmallerThanZero,render:rowRender},left2Col={name:`第${dateOrder-2}天`,code:"left2",align:"right",getCellProps:redIfSmallerThanZero,render:rowRender},lflCol={name:`对比第${dateOrder-1}天`,code:"lfl",align:"right",render:_assets_format__WEBPACK_IMPORTED_MODULE_7__.b},dataSource=[pbp_rate,app_trd_amt,pos_trd_amt,market_cost,net_profit];return react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_0__.a,{trigger:react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(PbpRatioCell,null,Object(_assets_format__WEBPACK_IMPORTED_MODULE_7__.c)(v)),closable:!1,triggerType:"click",style:{maxWidth:"none",width:500}},react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_1__.a,{columns:[{name:"明细",code:"name"},{name:`${row.stat_date} 第${dateOrder}天`,align:"center",children:[currentCol,dateOrder>=2&&lflCol].filter(Boolean)},dateOrder>=2&&left1Col,dateOrder>=3&&left2Col].filter(Boolean),dataSource:dataSource}))}(v,col,row)}:col}));return react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(_assets_fusion_style__WEBPACK_IMPORTED_MODULE_8__.a,null),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(HintDiv,null,"交互提示：点击分日情况单元格 查看详细数据"),react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_1__.a,{columns:renderData.columns,dataSource:renderData.dataSource}))}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"AsyncLoadingTreeTable",(function(){return AsyncLoadingTreeTable}));var ali_react_table__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(32),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(61),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(50),react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__),_assets_format__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(17);__webpack_exports__.default={parameters:{storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import { BaseTable } from 'ali-react-table'\\nimport { applyTransforms, commonTransforms } from 'ali-react-table/biz'\\nimport React, { useEffect, useRef, useState } from 'react'\\nimport { amount, lfl, ratio } from '../assets/format'\\n\\nexport default { title: '示例 / 异步数据加载树状表格' }\\n\\n// prettier-ignore\\nconst fullData = [\\n  { key: 'key:@total@', parentKey: null, name: '总计', childCount: 1, a: 126434.47, b: 90437.96, c: 86279.48, d: 59811.81, lfl: 0.31, rate: 0.66 },\\n  { key: 'key:火星', parentKey: 'key:@total@', name: '火星', childCount: 1, a: 69665.75, b: 46072.06, c: 43819.82, d: 30336.13, lfl: 0.37, rate: 0.65 },\\n  { key: 'key:火星 一季度', parentKey: 'key:火星', name: '一季度', childCount: 3, a: 14438.76, b: 9822.21, c: 8724.7, d: 5929.93, lfl: 0.39, rate: 0.6 },\\n  { key: 'key:火星 一季度 2022-01', parentKey: 'key:火星 一季度', name: '2022-01', childCount: 0, a: 4349.64, b: 3072.48, c: 2412.92, d: 1840.75, lfl: 0.44, rate: 0.59 },\\n  { key: 'key:火星 一季度 2022-02', parentKey: 'key:火星 一季度', name: '2022-02', childCount: 0, a: 4873.01, b: 3239.29, c: 3072.48, d: 1931.65, lfl: 0.36, rate: 0.59 },\\n  { key: 'key:火星 一季度 2022-03', parentKey: 'key:火星 一季度', name: '2022-03', childCount: 0, a: 5216.1, b: 3510.44, c: 3239.29, d: 2157.52, lfl: 0.37, rate: 0.61 },\\n  { key: 'key:火星 二季度', parentKey: 'key:火星', name: '二季度', childCount: 3, a: 16870.42, b: 10983.12, c: 10585.88, d: 7037.24, lfl: 0.37, rate: 0.64 },\\n  { key: 'key:火星 二季度 2022-04', parentKey: 'key:火星 二季度', name: '2022-04', childCount: 0, a: 5214.15, b: 3411.93, c: 3510.44, d: 2110.52, lfl: 0.32, rate: 0.61 },\\n  { key: 'key:火星 二季度 2022-05', parentKey: 'key:火星 二季度', name: '2022-05', childCount: 0, a: 5749.32, b: 3663.5, c: 3411.93, d: 2376.51, lfl: 0.4, rate: 0.64 },\\n  { key: 'key:火星 二季度 2022-06', parentKey: 'key:火星 二季度', name: '2022-06', childCount: 0, a: 5906.94, b: 3907.68, c: 3663.5, d: 2550.21, lfl: 0.37, rate: 0.65 },\\n]\\n\\nfunction delay<T>(ms: number, resolvedValue: T) {\\n  return new Promise<T>((resolve) => {\\n    setTimeout(resolve, ms, resolvedValue)\\n  })\\n}\\n\\n/** 一个 mock 的树状数据服务，实际使用时要替换为相应的真实接口 */\\nclass MockTreeDataService {\\n  // 加载根节点的数据\\n  async loadRootNodeData(): Promise<any> {\\n    const rootDataNode = fullData.find((d) => d.parentKey == null)\\n    return delay(1000, rootDataNode)\\n  }\\n\\n  // 加载父节点的 key 加载子节点数据\\n  async loadNodeDataByParentKey(parentKey: string): Promise<any[]> {\\n    const slice = fullData.filter((d) => d.parentKey == parentKey)\\n    return delay(500, slice)\\n  }\\n}\\n\\nexport function AsyncLoadingTreeTable() {\\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\\n\\n  const dataServiceRef = useRef<MockTreeDataService>()\\n\\n  useEffect(() => {\\n    dataServiceRef.current = new MockTreeDataService()\\n\\n    dataServiceRef.current.loadRootNodeData().then((rootNodeData) => {\\n      setState({ data: [rootNodeData], isLoading: false })\\n    })\\n  }, [])\\n\\n  function loadNodeDataByParentKey(parentKey: string) {\\n    setState((prev) => ({ isLoading: true, data: prev.data }))\\n    dataServiceRef.current.loadNodeDataByParentKey(parentKey).then((newData) => {\\n      setState((prev) => {\\n        return {\\n          isLoading: false,\\n          data: prev.data.concat(newData),\\n        }\\n      })\\n    })\\n  }\\n\\n  const [openKeys, onChangeOpenKeys] = useState<string[]>([])\\n\\n  const renderData = applyTransforms(\\n    {\\n      dataSource: state.data,\\n      columns: [\\n        { name: '名称', code: 'name', width: 180, lock: true },\\n        { code: 'a', name: '目标收入', render: amount, align: 'right' },\\n        { code: 'b', name: '实际收入', render: amount, align: 'right' },\\n        { code: 'd', name: '重点商品收入', render: amount, align: 'right' },\\n        { code: 'lfl', name: '收入月环比', render: lfl, align: 'right' },\\n        { code: 'rate', name: '重点商品收入占比', render: ratio, align: 'right' },\\n      ],\\n    },\\n    commonTransforms.buildTree('key', 'parentKey'),\\n    commonTransforms.treeMode({\\n      primaryKey: 'key',\\n      openKeys,\\n\\n      onChangeOpenKeys(nextKeys, key, action) {\\n        onChangeOpenKeys(nextKeys)\\n\\n        const needLoadData = state.data.every((d) => d.parentKey !== key)\\n        if (action === 'expand' && needLoadData) {\\n          // 如果当前展开了某一个节点，且该节点的子节点数据尚未加载，\\n          //  则调用 loadNodeDataByParentKey 加载更多数据\\n          loadNodeDataByParentKey(key)\\n        }\\n      },\\n\\n      // 提供一个自定义的 isLeafNode 方法，使得表格为父节点正确渲染收拢/展开按钮\\n      isLeafNode(node) {\\n        return node.childCount === 0\\n      },\\n    }),\\n  )\\n\\n  return (\\n    <BaseTable\\n      defaultColumnWidth={120}\\n      isLoading={state.isLoading}\\n      dataSource={renderData.dataSource}\\n      columns={renderData.columns}\\n    />\\n  )\\n}\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"示例-异步数据加载树状表格--async-loading-tree-table\":{\"startLoc\":{\"col\":7,\"line\":43},\"endLoc\":{\"col\":1,\"line\":113},\"startBody\":{\"col\":7,\"line\":43},\"endBody\":{\"col\":1,\"line\":113}}};\n    \nimport { BaseTable } from 'ali-react-table'\nimport { applyTransforms, commonTransforms } from 'ali-react-table/biz'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { amount, lfl, ratio } from '../assets/format'\n\nexport default {parameters: {\"storySource\":{\"source\":\"import { BaseTable } from 'ali-react-table'\\nimport { applyTransforms, commonTransforms } from 'ali-react-table/biz'\\nimport React, { useEffect, useRef, useState } from 'react'\\nimport { amount, lfl, ratio } from '../assets/format'\\n\\nexport default { title: '示例 / 异步数据加载树状表格' }\\n\\n// prettier-ignore\\nconst fullData = [\\n  { key: 'key:@total@', parentKey: null, name: '总计', childCount: 1, a: 126434.47, b: 90437.96, c: 86279.48, d: 59811.81, lfl: 0.31, rate: 0.66 },\\n  { key: 'key:火星', parentKey: 'key:@total@', name: '火星', childCount: 1, a: 69665.75, b: 46072.06, c: 43819.82, d: 30336.13, lfl: 0.37, rate: 0.65 },\\n  { key: 'key:火星 一季度', parentKey: 'key:火星', name: '一季度', childCount: 3, a: 14438.76, b: 9822.21, c: 8724.7, d: 5929.93, lfl: 0.39, rate: 0.6 },\\n  { key: 'key:火星 一季度 2022-01', parentKey: 'key:火星 一季度', name: '2022-01', childCount: 0, a: 4349.64, b: 3072.48, c: 2412.92, d: 1840.75, lfl: 0.44, rate: 0.59 },\\n  { key: 'key:火星 一季度 2022-02', parentKey: 'key:火星 一季度', name: '2022-02', childCount: 0, a: 4873.01, b: 3239.29, c: 3072.48, d: 1931.65, lfl: 0.36, rate: 0.59 },\\n  { key: 'key:火星 一季度 2022-03', parentKey: 'key:火星 一季度', name: '2022-03', childCount: 0, a: 5216.1, b: 3510.44, c: 3239.29, d: 2157.52, lfl: 0.37, rate: 0.61 },\\n  { key: 'key:火星 二季度', parentKey: 'key:火星', name: '二季度', childCount: 3, a: 16870.42, b: 10983.12, c: 10585.88, d: 7037.24, lfl: 0.37, rate: 0.64 },\\n  { key: 'key:火星 二季度 2022-04', parentKey: 'key:火星 二季度', name: '2022-04', childCount: 0, a: 5214.15, b: 3411.93, c: 3510.44, d: 2110.52, lfl: 0.32, rate: 0.61 },\\n  { key: 'key:火星 二季度 2022-05', parentKey: 'key:火星 二季度', name: '2022-05', childCount: 0, a: 5749.32, b: 3663.5, c: 3411.93, d: 2376.51, lfl: 0.4, rate: 0.64 },\\n  { key: 'key:火星 二季度 2022-06', parentKey: 'key:火星 二季度', name: '2022-06', childCount: 0, a: 5906.94, b: 3907.68, c: 3663.5, d: 2550.21, lfl: 0.37, rate: 0.65 },\\n]\\n\\nfunction delay<T>(ms: number, resolvedValue: T) {\\n  return new Promise<T>((resolve) => {\\n    setTimeout(resolve, ms, resolvedValue)\\n  })\\n}\\n\\n/** 一个 mock 的树状数据服务，实际使用时要替换为相应的真实接口 */\\nclass MockTreeDataService {\\n  // 加载根节点的数据\\n  async loadRootNodeData(): Promise<any> {\\n    const rootDataNode = fullData.find((d) => d.parentKey == null)\\n    return delay(1000, rootDataNode)\\n  }\\n\\n  // 加载父节点的 key 加载子节点数据\\n  async loadNodeDataByParentKey(parentKey: string): Promise<any[]> {\\n    const slice = fullData.filter((d) => d.parentKey == parentKey)\\n    return delay(500, slice)\\n  }\\n}\\n\\nexport function AsyncLoadingTreeTable() {\\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\\n\\n  const dataServiceRef = useRef<MockTreeDataService>()\\n\\n  useEffect(() => {\\n    dataServiceRef.current = new MockTreeDataService()\\n\\n    dataServiceRef.current.loadRootNodeData().then((rootNodeData) => {\\n      setState({ data: [rootNodeData], isLoading: false })\\n    })\\n  }, [])\\n\\n  function loadNodeDataByParentKey(parentKey: string) {\\n    setState((prev) => ({ isLoading: true, data: prev.data }))\\n    dataServiceRef.current.loadNodeDataByParentKey(parentKey).then((newData) => {\\n      setState((prev) => {\\n        return {\\n          isLoading: false,\\n          data: prev.data.concat(newData),\\n        }\\n      })\\n    })\\n  }\\n\\n  const [openKeys, onChangeOpenKeys] = useState<string[]>([])\\n\\n  const renderData = applyTransforms(\\n    {\\n      dataSource: state.data,\\n      columns: [\\n        { name: '名称', code: 'name', width: 180, lock: true },\\n        { code: 'a', name: '目标收入', render: amount, align: 'right' },\\n        { code: 'b', name: '实际收入', render: amount, align: 'right' },\\n        { code: 'd', name: '重点商品收入', render: amount, align: 'right' },\\n        { code: 'lfl', name: '收入月环比', render: lfl, align: 'right' },\\n        { code: 'rate', name: '重点商品收入占比', render: ratio, align: 'right' },\\n      ],\\n    },\\n    commonTransforms.buildTree('key', 'parentKey'),\\n    commonTransforms.treeMode({\\n      primaryKey: 'key',\\n      openKeys,\\n\\n      onChangeOpenKeys(nextKeys, key, action) {\\n        onChangeOpenKeys(nextKeys)\\n\\n        const needLoadData = state.data.every((d) => d.parentKey !== key)\\n        if (action === 'expand' && needLoadData) {\\n          // 如果当前展开了某一个节点，且该节点的子节点数据尚未加载，\\n          //  则调用 loadNodeDataByParentKey 加载更多数据\\n          loadNodeDataByParentKey(key)\\n        }\\n      },\\n\\n      // 提供一个自定义的 isLeafNode 方法，使得表格为父节点正确渲染收拢/展开按钮\\n      isLeafNode(node) {\\n        return node.childCount === 0\\n      },\\n    }),\\n  )\\n\\n  return (\\n    <BaseTable\\n      defaultColumnWidth={120}\\n      isLoading={state.isLoading}\\n      dataSource={renderData.dataSource}\\n      columns={renderData.columns}\\n    />\\n  )\\n}\\n\",\"locationsMap\":{\"示例-异步数据加载树状表格--async-loading-tree-table\":{\"startLoc\":{\"col\":7,\"line\":43},\"endLoc\":{\"col\":1,\"line\":113},\"startBody\":{\"col\":7,\"line\":43},\"endBody\":{\"col\":1,\"line\":113}}}},}, title: '示例 / 异步数据加载树状表格' }\n\n// prettier-ignore\nconst fullData = [\n  { key: 'key:@total@', parentKey: null, name: '总计', childCount: 1, a: 126434.47, b: 90437.96, c: 86279.48, d: 59811.81, lfl: 0.31, rate: 0.66 },\n  { key: 'key:火星', parentKey: 'key:@total@', name: '火星', childCount: 1, a: 69665.75, b: 46072.06, c: 43819.82, d: 30336.13, lfl: 0.37, rate: 0.65 },\n  { key: 'key:火星 一季度', parentKey: 'key:火星', name: '一季度', childCount: 3, a: 14438.76, b: 9822.21, c: 8724.7, d: 5929.93, lfl: 0.39, rate: 0.6 },\n  { key: 'key:火星 一季度 2022-01', parentKey: 'key:火星 一季度', name: '2022-01', childCount: 0, a: 4349.64, b: 3072.48, c: 2412.92, d: 1840.75, lfl: 0.44, rate: 0.59 },\n  { key: 'key:火星 一季度 2022-02', parentKey: 'key:火星 一季度', name: '2022-02', childCount: 0, a: 4873.01, b: 3239.29, c: 3072.48, d: 1931.65, lfl: 0.36, rate: 0.59 },\n  { key: 'key:火星 一季度 2022-03', parentKey: 'key:火星 一季度', name: '2022-03', childCount: 0, a: 5216.1, b: 3510.44, c: 3239.29, d: 2157.52, lfl: 0.37, rate: 0.61 },\n  { key: 'key:火星 二季度', parentKey: 'key:火星', name: '二季度', childCount: 3, a: 16870.42, b: 10983.12, c: 10585.88, d: 7037.24, lfl: 0.37, rate: 0.64 },\n  { key: 'key:火星 二季度 2022-04', parentKey: 'key:火星 二季度', name: '2022-04', childCount: 0, a: 5214.15, b: 3411.93, c: 3510.44, d: 2110.52, lfl: 0.32, rate: 0.61 },\n  { key: 'key:火星 二季度 2022-05', parentKey: 'key:火星 二季度', name: '2022-05', childCount: 0, a: 5749.32, b: 3663.5, c: 3411.93, d: 2376.51, lfl: 0.4, rate: 0.64 },\n  { key: 'key:火星 二季度 2022-06', parentKey: 'key:火星 二季度', name: '2022-06', childCount: 0, a: 5906.94, b: 3907.68, c: 3663.5, d: 2550.21, lfl: 0.37, rate: 0.65 },\n]\n\nfunction delay<T>(ms: number, resolvedValue: T) {\n  return new Promise<T>((resolve) => {\n    setTimeout(resolve, ms, resolvedValue)\n  })\n}\n\n/** 一个 mock 的树状数据服务，实际使用时要替换为相应的真实接口 */\nclass MockTreeDataService {\n  // 加载根节点的数据\n  async loadRootNodeData(): Promise<any> {\n    const rootDataNode = fullData.find((d) => d.parentKey == null)\n    return delay(1000, rootDataNode)\n  }\n\n  // 加载父节点的 key 加载子节点数据\n  async loadNodeDataByParentKey(parentKey: string): Promise<any[]> {\n    const slice = fullData.filter((d) => d.parentKey == parentKey)\n    return delay(500, slice)\n  }\n}\n\nexport const AsyncLoadingTreeTable = function AsyncLoadingTreeTable() {\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\n\n  const dataServiceRef = useRef<MockTreeDataService>()\n\n  useEffect(() => {\n    dataServiceRef.current = new MockTreeDataService()\n\n    dataServiceRef.current.loadRootNodeData().then((rootNodeData) => {\n      setState({ data: [rootNodeData], isLoading: false })\n    })\n  }, [])\n\n  function loadNodeDataByParentKey(parentKey: string) {\n    setState((prev) => ({ isLoading: true, data: prev.data }))\n    dataServiceRef.current.loadNodeDataByParentKey(parentKey).then((newData) => {\n      setState((prev) => {\n        return {\n          isLoading: false,\n          data: prev.data.concat(newData),\n        }\n      })\n    })\n  }\n\n  const [openKeys, onChangeOpenKeys] = useState<string[]>([])\n\n  const renderData = applyTransforms(\n    {\n      dataSource: state.data,\n      columns: [\n        { name: '名称', code: 'name', width: 180, lock: true },\n        { code: 'a', name: '目标收入', render: amount, align: 'right' },\n        { code: 'b', name: '实际收入', render: amount, align: 'right' },\n        { code: 'd', name: '重点商品收入', render: amount, align: 'right' },\n        { code: 'lfl', name: '收入月环比', render: lfl, align: 'right' },\n        { code: 'rate', name: '重点商品收入占比', render: ratio, align: 'right' },\n      ],\n    },\n    commonTransforms.buildTree('key', 'parentKey'),\n    commonTransforms.treeMode({\n      primaryKey: 'key',\n      openKeys,\n\n      onChangeOpenKeys(nextKeys, key, action) {\n        onChangeOpenKeys(nextKeys)\n\n        const needLoadData = state.data.every((d) => d.parentKey !== key)\n        if (action === 'expand' && needLoadData) {\n          // 如果当前展开了某一个节点，且该节点的子节点数据尚未加载，\n          //  则调用 loadNodeDataByParentKey 加载更多数据\n          loadNodeDataByParentKey(key)\n        }\n      },\n\n      // 提供一个自定义的 isLeafNode 方法，使得表格为父节点正确渲染收拢/展开按钮\n      isLeafNode(node) {\n        return node.childCount === 0\n      },\n    }),\n  )\n\n  return (\n    <BaseTable\n      defaultColumnWidth={120}\n      isLoading={state.isLoading}\n      dataSource={renderData.dataSource}\n      columns={renderData.columns}\n    />\n  )\n};",locationsMap:{"示例-异步数据加载树状表格--async-loading-tree-table":{startLoc:{col:37,line:51},endLoc:{col:1,line:121},startBody:{col:37,line:51},endBody:{col:1,line:121}}}},storySource:{source:"import { BaseTable } from 'ali-react-table'\nimport { applyTransforms, commonTransforms } from 'ali-react-table/biz'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { amount, lfl, ratio } from '../assets/format'\n\nexport default { title: '示例 / 异步数据加载树状表格' }\n\n// prettier-ignore\nconst fullData = [\n  { key: 'key:@total@', parentKey: null, name: '总计', childCount: 1, a: 126434.47, b: 90437.96, c: 86279.48, d: 59811.81, lfl: 0.31, rate: 0.66 },\n  { key: 'key:火星', parentKey: 'key:@total@', name: '火星', childCount: 1, a: 69665.75, b: 46072.06, c: 43819.82, d: 30336.13, lfl: 0.37, rate: 0.65 },\n  { key: 'key:火星 一季度', parentKey: 'key:火星', name: '一季度', childCount: 3, a: 14438.76, b: 9822.21, c: 8724.7, d: 5929.93, lfl: 0.39, rate: 0.6 },\n  { key: 'key:火星 一季度 2022-01', parentKey: 'key:火星 一季度', name: '2022-01', childCount: 0, a: 4349.64, b: 3072.48, c: 2412.92, d: 1840.75, lfl: 0.44, rate: 0.59 },\n  { key: 'key:火星 一季度 2022-02', parentKey: 'key:火星 一季度', name: '2022-02', childCount: 0, a: 4873.01, b: 3239.29, c: 3072.48, d: 1931.65, lfl: 0.36, rate: 0.59 },\n  { key: 'key:火星 一季度 2022-03', parentKey: 'key:火星 一季度', name: '2022-03', childCount: 0, a: 5216.1, b: 3510.44, c: 3239.29, d: 2157.52, lfl: 0.37, rate: 0.61 },\n  { key: 'key:火星 二季度', parentKey: 'key:火星', name: '二季度', childCount: 3, a: 16870.42, b: 10983.12, c: 10585.88, d: 7037.24, lfl: 0.37, rate: 0.64 },\n  { key: 'key:火星 二季度 2022-04', parentKey: 'key:火星 二季度', name: '2022-04', childCount: 0, a: 5214.15, b: 3411.93, c: 3510.44, d: 2110.52, lfl: 0.32, rate: 0.61 },\n  { key: 'key:火星 二季度 2022-05', parentKey: 'key:火星 二季度', name: '2022-05', childCount: 0, a: 5749.32, b: 3663.5, c: 3411.93, d: 2376.51, lfl: 0.4, rate: 0.64 },\n  { key: 'key:火星 二季度 2022-06', parentKey: 'key:火星 二季度', name: '2022-06', childCount: 0, a: 5906.94, b: 3907.68, c: 3663.5, d: 2550.21, lfl: 0.37, rate: 0.65 },\n]\n\nfunction delay<T>(ms: number, resolvedValue: T) {\n  return new Promise<T>((resolve) => {\n    setTimeout(resolve, ms, resolvedValue)\n  })\n}\n\n/** 一个 mock 的树状数据服务，实际使用时要替换为相应的真实接口 */\nclass MockTreeDataService {\n  // 加载根节点的数据\n  async loadRootNodeData(): Promise<any> {\n    const rootDataNode = fullData.find((d) => d.parentKey == null)\n    return delay(1000, rootDataNode)\n  }\n\n  // 加载父节点的 key 加载子节点数据\n  async loadNodeDataByParentKey(parentKey: string): Promise<any[]> {\n    const slice = fullData.filter((d) => d.parentKey == parentKey)\n    return delay(500, slice)\n  }\n}\n\nexport function AsyncLoadingTreeTable() {\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\n\n  const dataServiceRef = useRef<MockTreeDataService>()\n\n  useEffect(() => {\n    dataServiceRef.current = new MockTreeDataService()\n\n    dataServiceRef.current.loadRootNodeData().then((rootNodeData) => {\n      setState({ data: [rootNodeData], isLoading: false })\n    })\n  }, [])\n\n  function loadNodeDataByParentKey(parentKey: string) {\n    setState((prev) => ({ isLoading: true, data: prev.data }))\n    dataServiceRef.current.loadNodeDataByParentKey(parentKey).then((newData) => {\n      setState((prev) => {\n        return {\n          isLoading: false,\n          data: prev.data.concat(newData),\n        }\n      })\n    })\n  }\n\n  const [openKeys, onChangeOpenKeys] = useState<string[]>([])\n\n  const renderData = applyTransforms(\n    {\n      dataSource: state.data,\n      columns: [\n        { name: '名称', code: 'name', width: 180, lock: true },\n        { code: 'a', name: '目标收入', render: amount, align: 'right' },\n        { code: 'b', name: '实际收入', render: amount, align: 'right' },\n        { code: 'd', name: '重点商品收入', render: amount, align: 'right' },\n        { code: 'lfl', name: '收入月环比', render: lfl, align: 'right' },\n        { code: 'rate', name: '重点商品收入占比', render: ratio, align: 'right' },\n      ],\n    },\n    commonTransforms.buildTree('key', 'parentKey'),\n    commonTransforms.treeMode({\n      primaryKey: 'key',\n      openKeys,\n\n      onChangeOpenKeys(nextKeys, key, action) {\n        onChangeOpenKeys(nextKeys)\n\n        const needLoadData = state.data.every((d) => d.parentKey !== key)\n        if (action === 'expand' && needLoadData) {\n          // 如果当前展开了某一个节点，且该节点的子节点数据尚未加载，\n          //  则调用 loadNodeDataByParentKey 加载更多数据\n          loadNodeDataByParentKey(key)\n        }\n      },\n\n      // 提供一个自定义的 isLeafNode 方法，使得表格为父节点正确渲染收拢/展开按钮\n      isLeafNode(node) {\n        return node.childCount === 0\n      },\n    }),\n  )\n\n  return (\n    <BaseTable\n      defaultColumnWidth={120}\n      isLoading={state.isLoading}\n      dataSource={renderData.dataSource}\n      columns={renderData.columns}\n    />\n  )\n}\n",locationsMap:{"示例-异步数据加载树状表格--async-loading-tree-table":{startLoc:{col:7,line:43},endLoc:{col:1,line:113},startBody:{col:7,line:43},endBody:{col:1,line:113}}}}},title:"示例 / 异步数据加载树状表格"};const fullData=[{key:"key:@total@",parentKey:null,name:"总计",childCount:1,a:126434.47,b:90437.96,c:86279.48,d:59811.81,lfl:.31,rate:.66},{key:"key:火星",parentKey:"key:@total@",name:"火星",childCount:1,a:69665.75,b:46072.06,c:43819.82,d:30336.13,lfl:.37,rate:.65},{key:"key:火星 一季度",parentKey:"key:火星",name:"一季度",childCount:3,a:14438.76,b:9822.21,c:8724.7,d:5929.93,lfl:.39,rate:.6},{key:"key:火星 一季度 2022-01",parentKey:"key:火星 一季度",name:"2022-01",childCount:0,a:4349.64,b:3072.48,c:2412.92,d:1840.75,lfl:.44,rate:.59},{key:"key:火星 一季度 2022-02",parentKey:"key:火星 一季度",name:"2022-02",childCount:0,a:4873.01,b:3239.29,c:3072.48,d:1931.65,lfl:.36,rate:.59},{key:"key:火星 一季度 2022-03",parentKey:"key:火星 一季度",name:"2022-03",childCount:0,a:5216.1,b:3510.44,c:3239.29,d:2157.52,lfl:.37,rate:.61},{key:"key:火星 二季度",parentKey:"key:火星",name:"二季度",childCount:3,a:16870.42,b:10983.12,c:10585.88,d:7037.24,lfl:.37,rate:.64},{key:"key:火星 二季度 2022-04",parentKey:"key:火星 二季度",name:"2022-04",childCount:0,a:5214.15,b:3411.93,c:3510.44,d:2110.52,lfl:.32,rate:.61},{key:"key:火星 二季度 2022-05",parentKey:"key:火星 二季度",name:"2022-05",childCount:0,a:5749.32,b:3663.5,c:3411.93,d:2376.51,lfl:.4,rate:.64},{key:"key:火星 二季度 2022-06",parentKey:"key:火星 二季度",name:"2022-06",childCount:0,a:5906.94,b:3907.68,c:3663.5,d:2550.21,lfl:.37,rate:.65}];function delay(ms,resolvedValue){return new Promise(resolve=>{setTimeout(resolve,ms,resolvedValue)})}class MockTreeDataService{async loadRootNodeData(){return delay(1e3,fullData.find(d=>null==d.parentKey))}async loadNodeDataByParentKey(parentKey){return delay(500,fullData.filter(d=>d.parentKey==parentKey))}}const AsyncLoadingTreeTable=function AsyncLoadingTreeTable(){const[state,setState]=Object(react__WEBPACK_IMPORTED_MODULE_3__.useState)({isLoading:!0,data:[]}),dataServiceRef=Object(react__WEBPACK_IMPORTED_MODULE_3__.useRef)();Object(react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{dataServiceRef.current=new MockTreeDataService,dataServiceRef.current.loadRootNodeData().then(rootNodeData=>{setState({data:[rootNodeData],isLoading:!1})})},[]);const[openKeys,onChangeOpenKeys]=Object(react__WEBPACK_IMPORTED_MODULE_3__.useState)([]),renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_1__.a)({dataSource:state.data,columns:[{name:"名称",code:"name",width:180,lock:!0},{code:"a",name:"目标收入",render:_assets_format__WEBPACK_IMPORTED_MODULE_4__.a,align:"right"},{code:"b",name:"实际收入",render:_assets_format__WEBPACK_IMPORTED_MODULE_4__.a,align:"right"},{code:"d",name:"重点商品收入",render:_assets_format__WEBPACK_IMPORTED_MODULE_4__.a,align:"right"},{code:"lfl",name:"收入月环比",render:_assets_format__WEBPACK_IMPORTED_MODULE_4__.b,align:"right"},{code:"rate",name:"重点商品收入占比",render:_assets_format__WEBPACK_IMPORTED_MODULE_4__.c,align:"right"}]},ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__.a.buildTree("key","parentKey"),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__.a.treeMode({primaryKey:"key",openKeys:openKeys,onChangeOpenKeys(nextKeys,key,action){onChangeOpenKeys(nextKeys);const needLoadData=state.data.every(d=>d.parentKey!==key);"expand"===action&&needLoadData&&function loadNodeDataByParentKey(parentKey){setState(prev=>({isLoading:!0,data:prev.data})),dataServiceRef.current.loadNodeDataByParentKey(parentKey).then(newData=>{setState(prev=>({isLoading:!1,data:prev.data.concat(newData)}))})}(key)},isLeafNode:node=>0===node.childCount}));return react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_0__.a,{defaultColumnWidth:120,isLoading:state.isLoading,dataSource:renderData.dataSource,columns:renderData.columns})}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"滚动容器为window",(function(){return 滚动容器为window})),__webpack_require__.d(__webpack_exports__,"滚动容器为指定高度的div",(function(){return 滚动容器为指定高度的div})),__webpack_require__.d(__webpack_exports__,"双向虚拟滚动",(function(){return 双向虚拟滚动}));var ali_react_table__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(32),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__),_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(19);__webpack_exports__.default={title:"示例 / 大数据测试",parameters:{storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import { BaseTable, ArtColumn } from \'ali-react-table\'\\nimport React from \'react\'\\nimport { cols, useAllDataSource } from \'../assets/ncov19-assets\'\\n\\nexport default {\\n  title: \'示例 / 大数据测试\',\\n  parameters: {\\n    docs: {\\n      page() {\\n        return (\\n          <div\\n            style={{\\n              margin: \'auto\',\\n              background: \'rgba(0, 0, 0, 0.03)\',\\n              borderRadius: 10,\\n              padding: 30,\\n            }}\\n          >\\n            示例过多，docs page 已在此处禁用，请在页面上方切换到「Canvas」模式\\n          </div>\\n        )\\n      },\\n    },\\n  },\\n}\\n\\nexport function 滚动容器为window() {\\n  const { dataSource, isLoading } = useAllDataSource()\\n  return (\\n    <BaseTable\\n      isLoading={isLoading}\\n      dataSource={dataSource}\\n      columns={[\\n        {\\n          lock: true,\\n          width: 80,\\n          name: \'index\',\\n          getValue(record: any, rowIndex: number) {\\n            return rowIndex\\n          },\\n        },\\n        cols.updateTime,\\n        cols.provinceName,\\n        cols.cityName,\\n        ...cols.indCols,\\n      ]}\\n    />\\n  )\\n}\\n\\nexport function 滚动容器为指定高度的div() {\\n  const { dataSource, isLoading } = useAllDataSource()\\n  return (\\n    <BaseTable\\n      style={{ height: 400, overflow: \'auto\' }}\\n      useOuterBorder\\n      isLoading={isLoading}\\n      dataSource={dataSource}\\n      columns={[\\n        {\\n          lock: true,\\n          width: 80,\\n          name: \'index\',\\n          getValue(record: any, rowIndex: number) {\\n            return rowIndex\\n          },\\n        },\\n        cols.updateTime,\\n        cols.provinceName,\\n        cols.cityName,\\n        ...cols.indCols,\\n      ]}\\n    />\\n  )\\n}\\n\\nexport function 双向虚拟滚动() {\\n  const { dataSource, isLoading } = useAllDataSource()\\n  const repeatedColumns: ArtColumn[] = []\\n\\n  for (let i = 0; i < 1000; i++) {\\n    for (const col of cols.indCols) {\\n      repeatedColumns.push({ ...col, name: `copy-${i} ${col.name}` })\\n    }\\n  }\\n\\n  return (\\n    <BaseTable\\n      isLoading={isLoading}\\n      useVirtual={true}\\n      dataSource={[dataSource, dataSource, dataSource, dataSource, dataSource].flat()}\\n      columns={[\\n        {\\n          lock: true,\\n          width: 80,\\n          name: \'index\',\\n          getValue(record: any, rowIndex: number) {\\n            return rowIndex\\n          },\\n        },\\n        cols.updateTime,\\n        cols.provinceName,\\n        cols.cityName,\\n        ...repeatedColumns,\\n      ]}\\n    />\\n  )\\n}\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"示例-大数据测试--滚动容器为window":{"startLoc":{"col":7,"line":27},"endLoc":{"col":1,"line":49},"startBody":{"col":7,"line":27},"endBody":{"col":1,"line":49}},"示例-大数据测试--滚动容器为指定高度的div":{"startLoc":{"col":7,"line":51},"endLoc":{"col":1,"line":75},"startBody":{"col":7,"line":51},"endBody":{"col":1,"line":75}},"示例-大数据测试--双向虚拟滚动":{"startLoc":{"col":7,"line":77},"endLoc":{"col":1,"line":108},"startBody":{"col":7,"line":77},"endBody":{"col":1,"line":108}}};\n    \nimport { BaseTable, ArtColumn } from \'ali-react-table\'\nimport React from \'react\'\nimport { cols, useAllDataSource } from \'../assets/ncov19-assets\'\n\nexport default {\n  title: \'示例 / 大数据测试\',\n  parameters: {"storySource":{"source":"import { BaseTable, ArtColumn } from \'ali-react-table\'\\nimport React from \'react\'\\nimport { cols, useAllDataSource } from \'../assets/ncov19-assets\'\\n\\nexport default {\\n  title: \'示例 / 大数据测试\',\\n  parameters: {\\n    docs: {\\n      page() {\\n        return (\\n          <div\\n            style={{\\n              margin: \'auto\',\\n              background: \'rgba(0, 0, 0, 0.03)\',\\n              borderRadius: 10,\\n              padding: 30,\\n            }}\\n          >\\n            示例过多，docs page 已在此处禁用，请在页面上方切换到「Canvas」模式\\n          </div>\\n        )\\n      },\\n    },\\n  },\\n}\\n\\nexport function 滚动容器为window() {\\n  const { dataSource, isLoading } = useAllDataSource()\\n  return (\\n    <BaseTable\\n      isLoading={isLoading}\\n      dataSource={dataSource}\\n      columns={[\\n        {\\n          lock: true,\\n          width: 80,\\n          name: \'index\',\\n          getValue(record: any, rowIndex: number) {\\n            return rowIndex\\n          },\\n        },\\n        cols.updateTime,\\n        cols.provinceName,\\n        cols.cityName,\\n        ...cols.indCols,\\n      ]}\\n    />\\n  )\\n}\\n\\nexport function 滚动容器为指定高度的div() {\\n  const { dataSource, isLoading } = useAllDataSource()\\n  return (\\n    <BaseTable\\n      style={{ height: 400, overflow: \'auto\' }}\\n      useOuterBorder\\n      isLoading={isLoading}\\n      dataSource={dataSource}\\n      columns={[\\n        {\\n          lock: true,\\n          width: 80,\\n          name: \'index\',\\n          getValue(record: any, rowIndex: number) {\\n            return rowIndex\\n          },\\n        },\\n        cols.updateTime,\\n        cols.provinceName,\\n        cols.cityName,\\n        ...cols.indCols,\\n      ]}\\n    />\\n  )\\n}\\n\\nexport function 双向虚拟滚动() {\\n  const { dataSource, isLoading } = useAllDataSource()\\n  const repeatedColumns: ArtColumn[] = []\\n\\n  for (let i = 0; i < 1000; i++) {\\n    for (const col of cols.indCols) {\\n      repeatedColumns.push({ ...col, name: `copy-${i} ${col.name}` })\\n    }\\n  }\\n\\n  return (\\n    <BaseTable\\n      isLoading={isLoading}\\n      useVirtual={true}\\n      dataSource={[dataSource, dataSource, dataSource, dataSource, dataSource].flat()}\\n      columns={[\\n        {\\n          lock: true,\\n          width: 80,\\n          name: \'index\',\\n          getValue(record: any, rowIndex: number) {\\n            return rowIndex\\n          },\\n        },\\n        cols.updateTime,\\n        cols.provinceName,\\n        cols.cityName,\\n        ...repeatedColumns,\\n      ]}\\n    />\\n  )\\n}\\n","locationsMap":{"示例-大数据测试--滚动容器为window":{"startLoc":{"col":7,"line":27},"endLoc":{"col":1,"line":49},"startBody":{"col":7,"line":27},"endBody":{"col":1,"line":49}},"示例-大数据测试--滚动容器为指定高度的div":{"startLoc":{"col":7,"line":51},"endLoc":{"col":1,"line":75},"startBody":{"col":7,"line":51},"endBody":{"col":1,"line":75}},"示例-大数据测试--双向虚拟滚动":{"startLoc":{"col":7,"line":77},"endLoc":{"col":1,"line":108},"startBody":{"col":7,"line":77},"endBody":{"col":1,"line":108}}}},\n    docs: {\n      page() {\n        return (\n          <div\n            style={{\n              margin: \'auto\',\n              background: \'rgba(0, 0, 0, 0.03)\',\n              borderRadius: 10,\n              padding: 30,\n            }}\n          >\n            示例过多，docs page 已在此处禁用，请在页面上方切换到「Canvas」模式\n          </div>\n        )\n      },\n    },\n  },\n}\n\nexport const 滚动容器为window = function 滚动容器为window() {\n  const { dataSource, isLoading } = useAllDataSource()\n  return (\n    <BaseTable\n      isLoading={isLoading}\n      dataSource={dataSource}\n      columns={[\n        {\n          lock: true,\n          width: 80,\n          name: \'index\',\n          getValue(record: any, rowIndex: number) {\n            return rowIndex\n          },\n        },\n        cols.updateTime,\n        cols.provinceName,\n        cols.cityName,\n        ...cols.indCols,\n      ]}\n    />\n  )\n};\n\nexport const 滚动容器为指定高度的div = function 滚动容器为指定高度的div() {\n  const { dataSource, isLoading } = useAllDataSource()\n  return (\n    <BaseTable\n      style={{ height: 400, overflow: \'auto\' }}\n      useOuterBorder\n      isLoading={isLoading}\n      dataSource={dataSource}\n      columns={[\n        {\n          lock: true,\n          width: 80,\n          name: \'index\',\n          getValue(record: any, rowIndex: number) {\n            return rowIndex\n          },\n        },\n        cols.updateTime,\n        cols.provinceName,\n        cols.cityName,\n        ...cols.indCols,\n      ]}\n    />\n  )\n};\n\nexport const 双向虚拟滚动 = function 双向虚拟滚动() {\n  const { dataSource, isLoading } = useAllDataSource()\n  const repeatedColumns: ArtColumn[] = []\n\n  for (let i = 0; i < 1000; i++) {\n    for (const col of cols.indCols) {\n      repeatedColumns.push({ ...col, name: `copy-${i} ${col.name}` })\n    }\n  }\n\n  return (\n    <BaseTable\n      isLoading={isLoading}\n      useVirtual={true}\n      dataSource={[dataSource, dataSource, dataSource, dataSource, dataSource].flat()}\n      columns={[\n        {\n          lock: true,\n          width: 80,\n          name: \'index\',\n          getValue(record: any, rowIndex: number) {\n            return rowIndex\n          },\n        },\n        cols.updateTime,\n        cols.provinceName,\n        cols.cityName,\n        ...repeatedColumns,\n      ]}\n    />\n  )\n};',locationsMap:{"示例-大数据测试--滚动容器为window":{startLoc:{col:27,line:35},endLoc:{col:1,line:57},startBody:{col:27,line:35},endBody:{col:1,line:57}},"示例-大数据测试--滚动容器为指定高度的div":{startLoc:{col:29,line:59},endLoc:{col:1,line:83},startBody:{col:29,line:59},endBody:{col:1,line:83}},"示例-大数据测试--双向虚拟滚动":{startLoc:{col:22,line:85},endLoc:{col:1,line:116},startBody:{col:22,line:85},endBody:{col:1,line:116}}}},storySource:{source:"import { BaseTable, ArtColumn } from 'ali-react-table'\nimport React from 'react'\nimport { cols, useAllDataSource } from '../assets/ncov19-assets'\n\nexport default {\n  title: '示例 / 大数据测试',\n  parameters: {\n    docs: {\n      page() {\n        return (\n          <div\n            style={{\n              margin: 'auto',\n              background: 'rgba(0, 0, 0, 0.03)',\n              borderRadius: 10,\n              padding: 30,\n            }}\n          >\n            示例过多，docs page 已在此处禁用，请在页面上方切换到「Canvas」模式\n          </div>\n        )\n      },\n    },\n  },\n}\n\nexport function 滚动容器为window() {\n  const { dataSource, isLoading } = useAllDataSource()\n  return (\n    <BaseTable\n      isLoading={isLoading}\n      dataSource={dataSource}\n      columns={[\n        {\n          lock: true,\n          width: 80,\n          name: 'index',\n          getValue(record: any, rowIndex: number) {\n            return rowIndex\n          },\n        },\n        cols.updateTime,\n        cols.provinceName,\n        cols.cityName,\n        ...cols.indCols,\n      ]}\n    />\n  )\n}\n\nexport function 滚动容器为指定高度的div() {\n  const { dataSource, isLoading } = useAllDataSource()\n  return (\n    <BaseTable\n      style={{ height: 400, overflow: 'auto' }}\n      useOuterBorder\n      isLoading={isLoading}\n      dataSource={dataSource}\n      columns={[\n        {\n          lock: true,\n          width: 80,\n          name: 'index',\n          getValue(record: any, rowIndex: number) {\n            return rowIndex\n          },\n        },\n        cols.updateTime,\n        cols.provinceName,\n        cols.cityName,\n        ...cols.indCols,\n      ]}\n    />\n  )\n}\n\nexport function 双向虚拟滚动() {\n  const { dataSource, isLoading } = useAllDataSource()\n  const repeatedColumns: ArtColumn[] = []\n\n  for (let i = 0; i < 1000; i++) {\n    for (const col of cols.indCols) {\n      repeatedColumns.push({ ...col, name: `copy-${i} ${col.name}` })\n    }\n  }\n\n  return (\n    <BaseTable\n      isLoading={isLoading}\n      useVirtual={true}\n      dataSource={[dataSource, dataSource, dataSource, dataSource, dataSource].flat()}\n      columns={[\n        {\n          lock: true,\n          width: 80,\n          name: 'index',\n          getValue(record: any, rowIndex: number) {\n            return rowIndex\n          },\n        },\n        cols.updateTime,\n        cols.provinceName,\n        cols.cityName,\n        ...repeatedColumns,\n      ]}\n    />\n  )\n}\n",locationsMap:{"示例-大数据测试--滚动容器为window":{startLoc:{col:7,line:27},endLoc:{col:1,line:49},startBody:{col:7,line:27},endBody:{col:1,line:49}},"示例-大数据测试--滚动容器为指定高度的div":{startLoc:{col:7,line:51},endLoc:{col:1,line:75},startBody:{col:7,line:51},endBody:{col:1,line:75}},"示例-大数据测试--双向虚拟滚动":{startLoc:{col:7,line:77},endLoc:{col:1,line:108},startBody:{col:7,line:77},endBody:{col:1,line:108}}}},docs:{page:()=>react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div",{style:{margin:"auto",background:"rgba(0, 0, 0, 0.03)",borderRadius:10,padding:30}},"示例过多，docs page 已在此处禁用，请在页面上方切换到「Canvas」模式")}}};const 滚动容器为window=function 滚动容器为window(){const{dataSource:dataSource,isLoading:isLoading}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_2__.c)();return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_0__.a,{isLoading:isLoading,dataSource:dataSource,columns:[{lock:!0,width:80,name:"index",getValue:(record,rowIndex)=>rowIndex},_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_2__.a.updateTime,_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_2__.a.provinceName,_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_2__.a.cityName,..._assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_2__.a.indCols]})},滚动容器为指定高度的div=function 滚动容器为指定高度的div(){const{dataSource:dataSource,isLoading:isLoading}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_2__.c)();return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_0__.a,{style:{height:400,overflow:"auto"},useOuterBorder:!0,isLoading:isLoading,dataSource:dataSource,columns:[{lock:!0,width:80,name:"index",getValue:(record,rowIndex)=>rowIndex},_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_2__.a.updateTime,_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_2__.a.provinceName,_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_2__.a.cityName,..._assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_2__.a.indCols]})},双向虚拟滚动=function 双向虚拟滚动(){const{dataSource:dataSource,isLoading:isLoading}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_2__.c)(),repeatedColumns=[];for(let i=0;i<1e3;i++)for(const col of _assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_2__.a.indCols)repeatedColumns.push({...col,name:`copy-${i} ${col.name}`});return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_0__.a,{isLoading:isLoading,useVirtual:!0,dataSource:[dataSource,dataSource,dataSource,dataSource,dataSource].flat(),columns:[{lock:!0,width:80,name:"index",getValue:(record,rowIndex)=>rowIndex},_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_2__.a.updateTime,_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_2__.a.provinceName,_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_2__.a.cityName,...repeatedColumns]})}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"示例",(function(){return 示例}));var ali_react_table__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(32),ali_react_table__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(56),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(61),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(50),ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(89),ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(220),react__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__),rxjs__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(175),_assets_cdn_data__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(63);__webpack_exports__.default={parameters:{storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import { ArtColumn, BaseTable, isLeafNode } from 'ali-react-table'\\nimport { applyTransforms, commonTransforms } from 'ali-react-table/biz'\\nimport { buildDrillTree, buildRecordMap, DrillNode } from 'ali-react-table/pivot'\\nimport React, { useEffect, useState } from 'react'\\nimport { identity } from 'rxjs'\\nimport { getAppTrafficData } from '../assets/cdn-data'\\n\\nexport default { title: '示例 / 业务示例-数据报表' }\\n\\nconst amount = (v: any) => Number(v).toFixed(2)\\nconst ratio = (v: any) => `${(Number(v) * 100).toFixed(2)}%`\\n\\nexport function 示例() {\\n  const indicatorTree: ArtColumn[] = [\\n    {\\n      name: 'APP指标',\\n      code: 'app_qty_pbt',\\n      render: String,\\n      children: [\\n        { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio },\\n        {\\n          code: 'all_app_trd_amt_1d',\\n          name: 'APP成交金额汇总',\\n          render(value: any, record: any, recordIndex: number) {\\n            return amount(value)\\n          },\\n          getCellProps(value: any, record: any, recordIndex: number) {\\n            if (value > 30) {\\n              return { style: { color: 'red' } }\\n            }\\n          },\\n        },\\n        { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数', render: amount },\\n      ],\\n    },\\n    {\\n      name: '转换率',\\n      code: 'all_imp2pay_rate',\\n      render: ratio,\\n      children: [\\n        { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率', render: ratio },\\n        { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率', render: ratio },\\n        { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率', render: ratio },\\n        { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率', render: ratio },\\n      ],\\n    },\\n  ]\\n\\n  const mainCol: ArtColumn = {\\n    name: '指标',\\n    width: 200,\\n    lock: true,\\n    render(value: any, record: any, recordIndex: number) {\\n      return record.name\\n    },\\n  }\\n\\n  const [state, setState] = useState({\\n    isLoading: true,\\n    columns: [] as ArtColumn[],\\n  })\\n\\n  useEffect(() => {\\n    getAppTrafficData().then((data) => {\\n      console.log('明细数据:', data)\\n      const codes = ['city_name', 'shop_name']\\n      const topTree = buildDrillTree(data, codes)\\n      const recordMap = buildRecordMap({ data, codes })\\n      console.log('构建的 RecordMap（低配版 matrix）', recordMap)\\n\\n      // 动态生成表格列\\n      const columns = convertDrillTreeToColumns(recordMap, topTree)\\n      setState({ isLoading: false, columns })\\n    })\\n  }, [])\\n\\n  const [openKeys, onChangeOpenKeys] = useState(['APP指标', '转换率'])\\n\\n  const renderData = applyTransforms(\\n    // 使用 indicatorTree 作为 dataSource，因为现在表格行和指标树是对应的\\n    { columns: [mainCol, ...state.columns], dataSource: indicatorTree },\\n    commonTransforms.treeMode({ primaryKey: 'name', openKeys, onChangeOpenKeys, indentSize: 20 }),\\n  )\\n\\n  console.log('组件状态 state:', state)\\n  console.log('渲染数据 renderData:', renderData)\\n\\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\\n\\n  function convertDrillTreeToColumns(recordMap: Map<string, any>, nodes: DrillNode[]): ArtColumn[] {\\n    const result: ArtColumn[] = []\\n    for (const node of nodes) {\\n      result.push({\\n        name: node.value,\\n        code: node.key,\\n        render(_v, { code, render }) {\\n          const record = recordMap.get(node.key)\\n          return (render ?? identity)(record?.[code])\\n        },\\n        getCellProps(_v, { code, getCellProps }) {\\n          const record = recordMap.get(node.key)\\n          if (getCellProps != null) {\\n            return getCellProps(record?.[code])\\n          }\\n        },\\n        width: 150,\\n        children: isLeafNode(node) ? null : convertDrillTreeToColumns(recordMap, node.children),\\n      })\\n    }\\n    return result\\n  }\\n}\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"示例-业务示例-数据报表--示例\":{\"startLoc\":{\"col\":7,\"line\":13},\"endLoc\":{\"col\":1,\"line\":112},\"startBody\":{\"col\":7,\"line\":13},\"endBody\":{\"col\":1,\"line\":112}}};\n    \nimport { ArtColumn, BaseTable, isLeafNode } from 'ali-react-table'\nimport { applyTransforms, commonTransforms } from 'ali-react-table/biz'\nimport { buildDrillTree, buildRecordMap, DrillNode } from 'ali-react-table/pivot'\nimport React, { useEffect, useState } from 'react'\nimport { identity } from 'rxjs'\nimport { getAppTrafficData } from '../assets/cdn-data'\n\nexport default {parameters: {\"storySource\":{\"source\":\"import { ArtColumn, BaseTable, isLeafNode } from 'ali-react-table'\\nimport { applyTransforms, commonTransforms } from 'ali-react-table/biz'\\nimport { buildDrillTree, buildRecordMap, DrillNode } from 'ali-react-table/pivot'\\nimport React, { useEffect, useState } from 'react'\\nimport { identity } from 'rxjs'\\nimport { getAppTrafficData } from '../assets/cdn-data'\\n\\nexport default { title: '示例 / 业务示例-数据报表' }\\n\\nconst amount = (v: any) => Number(v).toFixed(2)\\nconst ratio = (v: any) => `${(Number(v) * 100).toFixed(2)}%`\\n\\nexport function 示例() {\\n  const indicatorTree: ArtColumn[] = [\\n    {\\n      name: 'APP指标',\\n      code: 'app_qty_pbt',\\n      render: String,\\n      children: [\\n        { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio },\\n        {\\n          code: 'all_app_trd_amt_1d',\\n          name: 'APP成交金额汇总',\\n          render(value: any, record: any, recordIndex: number) {\\n            return amount(value)\\n          },\\n          getCellProps(value: any, record: any, recordIndex: number) {\\n            if (value > 30) {\\n              return { style: { color: 'red' } }\\n            }\\n          },\\n        },\\n        { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数', render: amount },\\n      ],\\n    },\\n    {\\n      name: '转换率',\\n      code: 'all_imp2pay_rate',\\n      render: ratio,\\n      children: [\\n        { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率', render: ratio },\\n        { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率', render: ratio },\\n        { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率', render: ratio },\\n        { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率', render: ratio },\\n      ],\\n    },\\n  ]\\n\\n  const mainCol: ArtColumn = {\\n    name: '指标',\\n    width: 200,\\n    lock: true,\\n    render(value: any, record: any, recordIndex: number) {\\n      return record.name\\n    },\\n  }\\n\\n  const [state, setState] = useState({\\n    isLoading: true,\\n    columns: [] as ArtColumn[],\\n  })\\n\\n  useEffect(() => {\\n    getAppTrafficData().then((data) => {\\n      console.log('明细数据:', data)\\n      const codes = ['city_name', 'shop_name']\\n      const topTree = buildDrillTree(data, codes)\\n      const recordMap = buildRecordMap({ data, codes })\\n      console.log('构建的 RecordMap（低配版 matrix）', recordMap)\\n\\n      // 动态生成表格列\\n      const columns = convertDrillTreeToColumns(recordMap, topTree)\\n      setState({ isLoading: false, columns })\\n    })\\n  }, [])\\n\\n  const [openKeys, onChangeOpenKeys] = useState(['APP指标', '转换率'])\\n\\n  const renderData = applyTransforms(\\n    // 使用 indicatorTree 作为 dataSource，因为现在表格行和指标树是对应的\\n    { columns: [mainCol, ...state.columns], dataSource: indicatorTree },\\n    commonTransforms.treeMode({ primaryKey: 'name', openKeys, onChangeOpenKeys, indentSize: 20 }),\\n  )\\n\\n  console.log('组件状态 state:', state)\\n  console.log('渲染数据 renderData:', renderData)\\n\\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\\n\\n  function convertDrillTreeToColumns(recordMap: Map<string, any>, nodes: DrillNode[]): ArtColumn[] {\\n    const result: ArtColumn[] = []\\n    for (const node of nodes) {\\n      result.push({\\n        name: node.value,\\n        code: node.key,\\n        render(_v, { code, render }) {\\n          const record = recordMap.get(node.key)\\n          return (render ?? identity)(record?.[code])\\n        },\\n        getCellProps(_v, { code, getCellProps }) {\\n          const record = recordMap.get(node.key)\\n          if (getCellProps != null) {\\n            return getCellProps(record?.[code])\\n          }\\n        },\\n        width: 150,\\n        children: isLeafNode(node) ? null : convertDrillTreeToColumns(recordMap, node.children),\\n      })\\n    }\\n    return result\\n  }\\n}\\n\",\"locationsMap\":{\"示例-业务示例-数据报表--示例\":{\"startLoc\":{\"col\":7,\"line\":13},\"endLoc\":{\"col\":1,\"line\":112},\"startBody\":{\"col\":7,\"line\":13},\"endBody\":{\"col\":1,\"line\":112}}}},}, title: '示例 / 业务示例-数据报表' }\n\nconst amount = (v: any) => Number(v).toFixed(2)\nconst ratio = (v: any) => `${(Number(v) * 100).toFixed(2)}%`\n\nexport const 示例 = function 示例() {\n  const indicatorTree: ArtColumn[] = [\n    {\n      name: 'APP指标',\n      code: 'app_qty_pbt',\n      render: String,\n      children: [\n        { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio },\n        {\n          code: 'all_app_trd_amt_1d',\n          name: 'APP成交金额汇总',\n          render(value: any, record: any, recordIndex: number) {\n            return amount(value)\n          },\n          getCellProps(value: any, record: any, recordIndex: number) {\n            if (value > 30) {\n              return { style: { color: 'red' } }\n            }\n          },\n        },\n        { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数', render: amount },\n      ],\n    },\n    {\n      name: '转换率',\n      code: 'all_imp2pay_rate',\n      render: ratio,\n      children: [\n        { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率', render: ratio },\n        { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率', render: ratio },\n        { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率', render: ratio },\n        { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率', render: ratio },\n      ],\n    },\n  ]\n\n  const mainCol: ArtColumn = {\n    name: '指标',\n    width: 200,\n    lock: true,\n    render(value: any, record: any, recordIndex: number) {\n      return record.name\n    },\n  }\n\n  const [state, setState] = useState({\n    isLoading: true,\n    columns: [] as ArtColumn[],\n  })\n\n  useEffect(() => {\n    getAppTrafficData().then((data) => {\n      console.log('明细数据:', data)\n      const codes = ['city_name', 'shop_name']\n      const topTree = buildDrillTree(data, codes)\n      const recordMap = buildRecordMap({ data, codes })\n      console.log('构建的 RecordMap（低配版 matrix）', recordMap)\n\n      // 动态生成表格列\n      const columns = convertDrillTreeToColumns(recordMap, topTree)\n      setState({ isLoading: false, columns })\n    })\n  }, [])\n\n  const [openKeys, onChangeOpenKeys] = useState(['APP指标', '转换率'])\n\n  const renderData = applyTransforms(\n    // 使用 indicatorTree 作为 dataSource，因为现在表格行和指标树是对应的\n    { columns: [mainCol, ...state.columns], dataSource: indicatorTree },\n    commonTransforms.treeMode({ primaryKey: 'name', openKeys, onChangeOpenKeys, indentSize: 20 }),\n  )\n\n  console.log('组件状态 state:', state)\n  console.log('渲染数据 renderData:', renderData)\n\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\n\n  function convertDrillTreeToColumns(recordMap: Map<string, any>, nodes: DrillNode[]): ArtColumn[] {\n    const result: ArtColumn[] = []\n    for (const node of nodes) {\n      result.push({\n        name: node.value,\n        code: node.key,\n        render(_v, { code, render }) {\n          const record = recordMap.get(node.key)\n          return (render ?? identity)(record?.[code])\n        },\n        getCellProps(_v, { code, getCellProps }) {\n          const record = recordMap.get(node.key)\n          if (getCellProps != null) {\n            return getCellProps(record?.[code])\n          }\n        },\n        width: 150,\n        children: isLeafNode(node) ? null : convertDrillTreeToColumns(recordMap, node.children),\n      })\n    }\n    return result\n  }\n};",locationsMap:{"示例-业务示例-数据报表--示例":{startLoc:{col:18,line:21},endLoc:{col:1,line:120},startBody:{col:18,line:21},endBody:{col:1,line:120}}}},storySource:{source:"import { ArtColumn, BaseTable, isLeafNode } from 'ali-react-table'\nimport { applyTransforms, commonTransforms } from 'ali-react-table/biz'\nimport { buildDrillTree, buildRecordMap, DrillNode } from 'ali-react-table/pivot'\nimport React, { useEffect, useState } from 'react'\nimport { identity } from 'rxjs'\nimport { getAppTrafficData } from '../assets/cdn-data'\n\nexport default { title: '示例 / 业务示例-数据报表' }\n\nconst amount = (v: any) => Number(v).toFixed(2)\nconst ratio = (v: any) => `${(Number(v) * 100).toFixed(2)}%`\n\nexport function 示例() {\n  const indicatorTree: ArtColumn[] = [\n    {\n      name: 'APP指标',\n      code: 'app_qty_pbt',\n      render: String,\n      children: [\n        { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio },\n        {\n          code: 'all_app_trd_amt_1d',\n          name: 'APP成交金额汇总',\n          render(value: any, record: any, recordIndex: number) {\n            return amount(value)\n          },\n          getCellProps(value: any, record: any, recordIndex: number) {\n            if (value > 30) {\n              return { style: { color: 'red' } }\n            }\n          },\n        },\n        { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数', render: amount },\n      ],\n    },\n    {\n      name: '转换率',\n      code: 'all_imp2pay_rate',\n      render: ratio,\n      children: [\n        { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率', render: ratio },\n        { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率', render: ratio },\n        { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率', render: ratio },\n        { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率', render: ratio },\n      ],\n    },\n  ]\n\n  const mainCol: ArtColumn = {\n    name: '指标',\n    width: 200,\n    lock: true,\n    render(value: any, record: any, recordIndex: number) {\n      return record.name\n    },\n  }\n\n  const [state, setState] = useState({\n    isLoading: true,\n    columns: [] as ArtColumn[],\n  })\n\n  useEffect(() => {\n    getAppTrafficData().then((data) => {\n      console.log('明细数据:', data)\n      const codes = ['city_name', 'shop_name']\n      const topTree = buildDrillTree(data, codes)\n      const recordMap = buildRecordMap({ data, codes })\n      console.log('构建的 RecordMap（低配版 matrix）', recordMap)\n\n      // 动态生成表格列\n      const columns = convertDrillTreeToColumns(recordMap, topTree)\n      setState({ isLoading: false, columns })\n    })\n  }, [])\n\n  const [openKeys, onChangeOpenKeys] = useState(['APP指标', '转换率'])\n\n  const renderData = applyTransforms(\n    // 使用 indicatorTree 作为 dataSource，因为现在表格行和指标树是对应的\n    { columns: [mainCol, ...state.columns], dataSource: indicatorTree },\n    commonTransforms.treeMode({ primaryKey: 'name', openKeys, onChangeOpenKeys, indentSize: 20 }),\n  )\n\n  console.log('组件状态 state:', state)\n  console.log('渲染数据 renderData:', renderData)\n\n  return <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\n\n  function convertDrillTreeToColumns(recordMap: Map<string, any>, nodes: DrillNode[]): ArtColumn[] {\n    const result: ArtColumn[] = []\n    for (const node of nodes) {\n      result.push({\n        name: node.value,\n        code: node.key,\n        render(_v, { code, render }) {\n          const record = recordMap.get(node.key)\n          return (render ?? identity)(record?.[code])\n        },\n        getCellProps(_v, { code, getCellProps }) {\n          const record = recordMap.get(node.key)\n          if (getCellProps != null) {\n            return getCellProps(record?.[code])\n          }\n        },\n        width: 150,\n        children: isLeafNode(node) ? null : convertDrillTreeToColumns(recordMap, node.children),\n      })\n    }\n    return result\n  }\n}\n",locationsMap:{"示例-业务示例-数据报表--示例":{startLoc:{col:7,line:13},endLoc:{col:1,line:112},startBody:{col:7,line:13},endBody:{col:1,line:112}}}}},title:"示例 / 业务示例-数据报表"};const amount=v=>Number(v).toFixed(2),ratio=v=>(100*Number(v)).toFixed(2)+"%",示例=function 示例(){const indicatorTree=[{name:"APP指标",code:"app_qty_pbt",render:String,children:[{code:"imp_uv_dau_pct",name:"曝光UV占DAU比例",render:ratio},{code:"all_app_trd_amt_1d",name:"APP成交金额汇总",render:(value,record,recordIndex)=>amount(value),getCellProps(value,record,recordIndex){if(value>30)return{style:{color:"red"}}}},{code:"app_trd_usr_cnt_1d",name:"APP成交用户数",render:amount}]},{name:"转换率",code:"all_imp2pay_rate",render:ratio,children:[{code:"all_imp2pay_rate",name:"整体曝光至成交转化率",render:ratio},{code:"search_imp2pay_rate",name:"搜索曝光至成交转化率",render:ratio},{code:"classis_imp2pay_rate",name:"分类曝光至成交转化率",render:ratio},{code:"cart_imp2pay_rate",name:"购物车曝光至成交转化率",render:ratio}]}],mainCol={name:"指标",width:200,lock:!0,render:(value,record,recordIndex)=>record.name},[state,setState]=Object(react__WEBPACK_IMPORTED_MODULE_6__.useState)({isLoading:!0,columns:[]});Object(react__WEBPACK_IMPORTED_MODULE_6__.useEffect)(()=>{Object(_assets_cdn_data__WEBPACK_IMPORTED_MODULE_8__.a)().then(data=>{console.log("明细数据:",data);const codes=["city_name","shop_name"],topTree=Object(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_4__.a)(data,codes),recordMap=Object(ali_react_table_pivot__WEBPACK_IMPORTED_MODULE_5__.a)({data:data,codes:codes});console.log("构建的 RecordMap（低配版 matrix）",recordMap);const columns=function convertDrillTreeToColumns(recordMap,nodes){const result=[];for(const node of nodes)result.push({name:node.value,code:node.key,render(_v,{code:code,render:render}){const record=recordMap.get(node.key);return(null!=render?render:rxjs__WEBPACK_IMPORTED_MODULE_7__.a)(null==record?void 0:record[code])},getCellProps(_v,{code:code,getCellProps:getCellProps}){const record=recordMap.get(node.key);if(null!=getCellProps)return getCellProps(null==record?void 0:record[code])},width:150,children:Object(ali_react_table__WEBPACK_IMPORTED_MODULE_1__.a)(node)?null:convertDrillTreeToColumns(recordMap,node.children)});return result}(recordMap,topTree);setState({isLoading:!1,columns:columns})})},[]);const[openKeys,onChangeOpenKeys]=Object(react__WEBPACK_IMPORTED_MODULE_6__.useState)(["APP指标","转换率"]),renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__.a)({columns:[mainCol,...state.columns],dataSource:indicatorTree},ali_react_table_biz__WEBPACK_IMPORTED_MODULE_3__.a.treeMode({primaryKey:"name",openKeys:openKeys,onChangeOpenKeys:onChangeOpenKeys,indentSize:20}));return console.log("组件状态 state:",state),console.log("渲染数据 renderData:",renderData),react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_0__.a,{dataSource:renderData.dataSource,columns:renderData.columns,isLoading:state.isLoading})}},,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"RankTable",(function(){return RankTable}));var ali_react_table__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(32),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__),styled_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(29),_assets_format__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(17);__webpack_exports__.default={parameters:{storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import { BaseTable } from 'ali-react-table'\\nimport React from 'react'\\nimport styled from 'styled-components'\\nimport { amount, lfl } from '../assets/format'\\n\\nexport default { title: '示例 / 业务示例-商品排行榜' }\\n\\nconst StyledBaseTable = styled(BaseTable)`\\n  --border-color: none;\\n  --header-bgcolor: none;\\n  --row-height: 36px;\\n\\n  .art-table-header {\\n    border-top: 1px solid #dfe3e8;\\n    border-bottom: 1px solid #dfe3e8;\\n  }\\n\\n  .art-table-header-cell {\\n    height: 48px;\\n  }\\n`\\n\\nexport function RankTable() {\\n  return (\\n    <StyledBaseTable\\n      style={{ paddingRight: 16 }}\\n      columns={[\\n        { name: '排名', code: 'rank', width: 50 },\\n        { name: '商品名称', code: 'sku_name' },\\n        { name: '指标', code: 'value', render: amount, width: 100, align: 'right' },\\n        { name: '环比', code: 'rated', render: lfl, width: 100, align: 'right' },\\n        { name: '周比', code: 'ratew', render: lfl, width: 100, align: 'right' },\\n      ]}\\n      dataSource={[\\n        { rank: 1, sku_name: '青浦白鹤红颜草莓300g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\\n        { rank: 2, sku_name: '凤达草鸡蛋12枚', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\\n        { rank: 3, sku_name: 'Dole进口甜香蕉650g', value: 1234567, rated: 0, ratew: -0.087654 },\\n        { rank: 4, sku_name: '崇明芦笋350g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\\n        { rank: 5, sku_name: '北海道原味吐司面包210g', value: 1234567, rated: -0.0123456, ratew: -0.087654 },\\n        { rank: 6, sku_name: '盒马珍珠生虾仁150g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\\n        { rank: 7, sku_name: '洛川红富士苹果4个', value: 1234567, rated: -0.0123456, ratew: -0.087654 },\\n        { rank: 8, sku_name: '湾仔码头大白菜猪肉水饺300g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\\n        { rank: 9, sku_name: '牛奶小蛋糕', value: 1234567, rated: 0.0123456, ratew: 0 },\\n        { rank: 10, sku_name: '六记雄潮汕牛肉丸250g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\\n      ]}\\n    />\\n  )\\n}\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"示例-业务示例-商品排行榜--rank-table\":{\"startLoc\":{\"col\":7,\"line\":23},\"endLoc\":{\"col\":1,\"line\":48},\"startBody\":{\"col\":7,\"line\":23},\"endBody\":{\"col\":1,\"line\":48}}};\n    \nimport { BaseTable } from 'ali-react-table'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { amount, lfl } from '../assets/format'\n\nexport default {parameters: {\"storySource\":{\"source\":\"import { BaseTable } from 'ali-react-table'\\nimport React from 'react'\\nimport styled from 'styled-components'\\nimport { amount, lfl } from '../assets/format'\\n\\nexport default { title: '示例 / 业务示例-商品排行榜' }\\n\\nconst StyledBaseTable = styled(BaseTable)`\\n  --border-color: none;\\n  --header-bgcolor: none;\\n  --row-height: 36px;\\n\\n  .art-table-header {\\n    border-top: 1px solid #dfe3e8;\\n    border-bottom: 1px solid #dfe3e8;\\n  }\\n\\n  .art-table-header-cell {\\n    height: 48px;\\n  }\\n`\\n\\nexport function RankTable() {\\n  return (\\n    <StyledBaseTable\\n      style={{ paddingRight: 16 }}\\n      columns={[\\n        { name: '排名', code: 'rank', width: 50 },\\n        { name: '商品名称', code: 'sku_name' },\\n        { name: '指标', code: 'value', render: amount, width: 100, align: 'right' },\\n        { name: '环比', code: 'rated', render: lfl, width: 100, align: 'right' },\\n        { name: '周比', code: 'ratew', render: lfl, width: 100, align: 'right' },\\n      ]}\\n      dataSource={[\\n        { rank: 1, sku_name: '青浦白鹤红颜草莓300g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\\n        { rank: 2, sku_name: '凤达草鸡蛋12枚', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\\n        { rank: 3, sku_name: 'Dole进口甜香蕉650g', value: 1234567, rated: 0, ratew: -0.087654 },\\n        { rank: 4, sku_name: '崇明芦笋350g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\\n        { rank: 5, sku_name: '北海道原味吐司面包210g', value: 1234567, rated: -0.0123456, ratew: -0.087654 },\\n        { rank: 6, sku_name: '盒马珍珠生虾仁150g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\\n        { rank: 7, sku_name: '洛川红富士苹果4个', value: 1234567, rated: -0.0123456, ratew: -0.087654 },\\n        { rank: 8, sku_name: '湾仔码头大白菜猪肉水饺300g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\\n        { rank: 9, sku_name: '牛奶小蛋糕', value: 1234567, rated: 0.0123456, ratew: 0 },\\n        { rank: 10, sku_name: '六记雄潮汕牛肉丸250g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\\n      ]}\\n    />\\n  )\\n}\\n\",\"locationsMap\":{\"示例-业务示例-商品排行榜--rank-table\":{\"startLoc\":{\"col\":7,\"line\":23},\"endLoc\":{\"col\":1,\"line\":48},\"startBody\":{\"col\":7,\"line\":23},\"endBody\":{\"col\":1,\"line\":48}}}},}, title: '示例 / 业务示例-商品排行榜' }\n\nconst StyledBaseTable = styled(BaseTable)`\n  --border-color: none;\n  --header-bgcolor: none;\n  --row-height: 36px;\n\n  .art-table-header {\n    border-top: 1px solid #dfe3e8;\n    border-bottom: 1px solid #dfe3e8;\n  }\n\n  .art-table-header-cell {\n    height: 48px;\n  }\n`\n\nexport const RankTable = function RankTable() {\n  return (\n    <StyledBaseTable\n      style={{ paddingRight: 16 }}\n      columns={[\n        { name: '排名', code: 'rank', width: 50 },\n        { name: '商品名称', code: 'sku_name' },\n        { name: '指标', code: 'value', render: amount, width: 100, align: 'right' },\n        { name: '环比', code: 'rated', render: lfl, width: 100, align: 'right' },\n        { name: '周比', code: 'ratew', render: lfl, width: 100, align: 'right' },\n      ]}\n      dataSource={[\n        { rank: 1, sku_name: '青浦白鹤红颜草莓300g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\n        { rank: 2, sku_name: '凤达草鸡蛋12枚', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\n        { rank: 3, sku_name: 'Dole进口甜香蕉650g', value: 1234567, rated: 0, ratew: -0.087654 },\n        { rank: 4, sku_name: '崇明芦笋350g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\n        { rank: 5, sku_name: '北海道原味吐司面包210g', value: 1234567, rated: -0.0123456, ratew: -0.087654 },\n        { rank: 6, sku_name: '盒马珍珠生虾仁150g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\n        { rank: 7, sku_name: '洛川红富士苹果4个', value: 1234567, rated: -0.0123456, ratew: -0.087654 },\n        { rank: 8, sku_name: '湾仔码头大白菜猪肉水饺300g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\n        { rank: 9, sku_name: '牛奶小蛋糕', value: 1234567, rated: 0.0123456, ratew: 0 },\n        { rank: 10, sku_name: '六记雄潮汕牛肉丸250g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\n      ]}\n    />\n  )\n};",locationsMap:{"示例-业务示例-商品排行榜--rank-table":{startLoc:{col:25,line:31},endLoc:{col:1,line:56},startBody:{col:25,line:31},endBody:{col:1,line:56}}}},storySource:{source:"import { BaseTable } from 'ali-react-table'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { amount, lfl } from '../assets/format'\n\nexport default { title: '示例 / 业务示例-商品排行榜' }\n\nconst StyledBaseTable = styled(BaseTable)`\n  --border-color: none;\n  --header-bgcolor: none;\n  --row-height: 36px;\n\n  .art-table-header {\n    border-top: 1px solid #dfe3e8;\n    border-bottom: 1px solid #dfe3e8;\n  }\n\n  .art-table-header-cell {\n    height: 48px;\n  }\n`\n\nexport function RankTable() {\n  return (\n    <StyledBaseTable\n      style={{ paddingRight: 16 }}\n      columns={[\n        { name: '排名', code: 'rank', width: 50 },\n        { name: '商品名称', code: 'sku_name' },\n        { name: '指标', code: 'value', render: amount, width: 100, align: 'right' },\n        { name: '环比', code: 'rated', render: lfl, width: 100, align: 'right' },\n        { name: '周比', code: 'ratew', render: lfl, width: 100, align: 'right' },\n      ]}\n      dataSource={[\n        { rank: 1, sku_name: '青浦白鹤红颜草莓300g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\n        { rank: 2, sku_name: '凤达草鸡蛋12枚', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\n        { rank: 3, sku_name: 'Dole进口甜香蕉650g', value: 1234567, rated: 0, ratew: -0.087654 },\n        { rank: 4, sku_name: '崇明芦笋350g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\n        { rank: 5, sku_name: '北海道原味吐司面包210g', value: 1234567, rated: -0.0123456, ratew: -0.087654 },\n        { rank: 6, sku_name: '盒马珍珠生虾仁150g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\n        { rank: 7, sku_name: '洛川红富士苹果4个', value: 1234567, rated: -0.0123456, ratew: -0.087654 },\n        { rank: 8, sku_name: '湾仔码头大白菜猪肉水饺300g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\n        { rank: 9, sku_name: '牛奶小蛋糕', value: 1234567, rated: 0.0123456, ratew: 0 },\n        { rank: 10, sku_name: '六记雄潮汕牛肉丸250g', value: 1234567, rated: 0.0123456, ratew: 0.087654 },\n      ]}\n    />\n  )\n}\n",locationsMap:{"示例-业务示例-商品排行榜--rank-table":{startLoc:{col:7,line:23},endLoc:{col:1,line:48},startBody:{col:7,line:23},endBody:{col:1,line:48}}}}},title:"示例 / 业务示例-商品排行榜"};const StyledBaseTable=Object(styled_components__WEBPACK_IMPORTED_MODULE_2__.b)(ali_react_table__WEBPACK_IMPORTED_MODULE_0__.a)`
  --border-color: none;
  --header-bgcolor: none;
  --row-height: 36px;

  .art-table-header {
    border-top: 1px solid #dfe3e8;
    border-bottom: 1px solid #dfe3e8;
  }

  .art-table-header-cell {
    height: 48px;
  }
`,RankTable=function RankTable(){return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(StyledBaseTable,{style:{paddingRight:16},columns:[{name:"排名",code:"rank",width:50},{name:"商品名称",code:"sku_name"},{name:"指标",code:"value",render:_assets_format__WEBPACK_IMPORTED_MODULE_3__.a,width:100,align:"right"},{name:"环比",code:"rated",render:_assets_format__WEBPACK_IMPORTED_MODULE_3__.b,width:100,align:"right"},{name:"周比",code:"ratew",render:_assets_format__WEBPACK_IMPORTED_MODULE_3__.b,width:100,align:"right"}],dataSource:[{rank:1,sku_name:"青浦白鹤红颜草莓300g",value:1234567,rated:.0123456,ratew:.087654},{rank:2,sku_name:"凤达草鸡蛋12枚",value:1234567,rated:.0123456,ratew:.087654},{rank:3,sku_name:"Dole进口甜香蕉650g",value:1234567,rated:0,ratew:-.087654},{rank:4,sku_name:"崇明芦笋350g",value:1234567,rated:.0123456,ratew:.087654},{rank:5,sku_name:"北海道原味吐司面包210g",value:1234567,rated:-.0123456,ratew:-.087654},{rank:6,sku_name:"盒马珍珠生虾仁150g",value:1234567,rated:.0123456,ratew:.087654},{rank:7,sku_name:"洛川红富士苹果4个",value:1234567,rated:-.0123456,ratew:-.087654},{rank:8,sku_name:"湾仔码头大白菜猪肉水饺300g",value:1234567,rated:.0123456,ratew:.087654},{rank:9,sku_name:"牛奶小蛋糕",value:1234567,rated:.0123456,ratew:0},{rank:10,sku_name:"六记雄潮汕牛肉丸250g",value:1234567,rated:.0123456,ratew:.087654}]})}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"RemainMatrix",(function(){return RemainMatrix}));var ali_react_table__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(32),ali_react_table__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(21),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(68),d3__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(508),react__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__),styled_components__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(29),_assets_format__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(17);const COLORS=["#E8F3FF","#D6E9FF","#ADD1FF","#85B6FF","#5790F2","#2E6BE6","#1D4DBF","#0F3499","#061F73","#03124D"],data=[{date:"1月04号",user_cnt:300,day1:.4,day2:.4,day3:.35,day4:.4,day5:.35,day6:.3,day7:.25},{date:"1月05号",user_cnt:350,day1:.4,day2:.36,day3:.45,day4:.3,day5:.3,day6:.2,day7:-1},{date:"1月06号",user_cnt:400,day1:.4,day2:.4,day3:.5,day4:.4,day5:.3,day6:-1,day7:-1},{date:"1月07号",user_cnt:350,day1:.45,day2:.4,day3:.3,day4:.2,day5:-1,day6:-1,day7:-1},{date:"1月08号",user_cnt:400,day1:.5,day2:.5,day3:.4,day4:-1,day5:-1,day6:-1,day7:-1},{date:"1月09号",user_cnt:500,day1:.6,day2:.48,day3:-1,day4:-1,day5:-1,day6:-1,day7:-1},{date:"1月10号",user_cnt:400,day1:.52,day2:-1,day3:-1,day4:-1,day5:-1,day6:-1,day7:-1}],colorIdx=d3__WEBPACK_IMPORTED_MODULE_3__.a().domain([.2,.6]).range(COLORS.map((c,i)=>i));__webpack_exports__.default={parameters:{storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import { ArtColumn, BaseTable, Classes } from 'ali-react-table'\\nimport { proto } from 'ali-react-table/biz'\\nimport * as d3 from 'd3'\\nimport React from 'react'\\nimport styled from 'styled-components'\\nimport { amount, ratio } from '../assets/format'\\n\\nconst COLORS = [\\n  '#E8F3FF',\\n  '#D6E9FF',\\n  '#ADD1FF',\\n  '#85B6FF',\\n  '#5790F2',\\n  // 从这里开始字体颜色要变为白色\\n  '#2E6BE6',\\n  '#1D4DBF',\\n  '#0F3499',\\n  '#061F73',\\n  '#03124D',\\n]\\n\\nconst data = [\\n  { date: '1月04号', user_cnt: 300, day1: 0.4, day2: 0.4, day3: 0.35, day4: 0.4, day5: 0.35, day6: 0.3, day7: 0.25 },\\n  { date: '1月05号', user_cnt: 350, day1: 0.4, day2: 0.36, day3: 0.45, day4: 0.3, day5: 0.3, day6: 0.2, day7: -1 },\\n  { date: '1月06号', user_cnt: 400, day1: 0.4, day2: 0.4, day3: 0.5, day4: 0.4, day5: 0.3, day6: -1, day7: -1 },\\n  { date: '1月07号', user_cnt: 350, day1: 0.45, day2: 0.4, day3: 0.3, day4: 0.2, day5: -1, day6: -1, day7: -1 },\\n  { date: '1月08号', user_cnt: 400, day1: 0.5, day2: 0.5, day3: 0.4, day4: -1, day5: -1, day6: -1, day7: -1 },\\n  { date: '1月09号', user_cnt: 500, day1: 0.6, day2: 0.48, day3: -1, day4: -1, day5: -1, day6: -1, day7: -1 },\\n  { date: '1月10号', user_cnt: 400, day1: 0.52, day2: -1, day3: -1, day4: -1, day5: -1, day6: -1, day7: -1 },\\n]\\n\\nconst colorIdx = d3\\n  .scaleQuantize()\\n  .domain([0.2, 0.6])\\n  .range(COLORS.map((c, i) => i))\\n\\nexport default { title: '示例 / 业务示例-用户留存矩阵' }\\n\\nconst StyledBaseTable = styled(BaseTable)`\\n  --border-color: none;\\n  --header-bgcolor: none;\\n\\n  .${Classes.tableHeader} {\\n    border-top: 1px solid #dfe3e8;\\n    border-bottom: 1px solid #dfe3e8;\\n  }\\n\\n  .${Classes.tableHeaderCell} {\\n    height: 48px;\\n  }\\n`\\n\\nexport function RemainMatrix() {\\n  const remainCol = proto.array<ArtColumn>({\\n    align: 'right',\\n    render: remainRateWithCount,\\n    getCellProps: getRemainCellProps,\\n  })\\n  return (\\n    <StyledBaseTable\\n      defaultColumnWidth={100}\\n      columns={[\\n        { code: 'date', name: '日期' },\\n        { code: 'user_cnt', name: '用户数' },\\n        ...remainCol([\\n          { code: 'day1', name: '第一日' },\\n          { code: 'day2', name: '第二日' },\\n          { code: 'day3', name: '第三日' },\\n          { code: 'day4', name: '第四日' },\\n          { code: 'day5', name: '第五日' },\\n          { code: 'day6', name: '第六日' },\\n          { code: 'day7', name: '第七日' },\\n        ]),\\n      ]}\\n      dataSource={data}\\n    />\\n  )\\n\\n  function getRemainCellProps(rate: any) {\\n    if (rate == -1) {\\n      return\\n    }\\n    const i = colorIdx(rate)\\n    return {\\n      style: {\\n        backgroundColor: COLORS[i],\\n        color: i <= 4 ? '#03124D' : 'white',\\n      },\\n    }\\n  }\\n\\n  function remainRateWithCount(rate: any, record: any) {\\n    if (rate == -1) {\\n      return null\\n    }\\n    return (\\n      <div style={{ lineHeight: '20px' }}>\\n        <div>{ratio(rate)}</div>\\n        <div>{amount(rate * record.user_cnt)}</div>\\n      </div>\\n    )\\n  }\\n}\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"示例-业务示例-用户留存矩阵--remain-matrix\":{\"startLoc\":{\"col\":7,\"line\":53},\"endLoc\":{\"col\":1,\"line\":103},\"startBody\":{\"col\":7,\"line\":53},\"endBody\":{\"col\":1,\"line\":103}}};\n    \nimport { ArtColumn, BaseTable, Classes } from 'ali-react-table'\nimport { proto } from 'ali-react-table/biz'\nimport * as d3 from 'd3'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { amount, ratio } from '../assets/format'\n\nconst COLORS = [\n  '#E8F3FF',\n  '#D6E9FF',\n  '#ADD1FF',\n  '#85B6FF',\n  '#5790F2',\n  // 从这里开始字体颜色要变为白色\n  '#2E6BE6',\n  '#1D4DBF',\n  '#0F3499',\n  '#061F73',\n  '#03124D',\n]\n\nconst data = [\n  { date: '1月04号', user_cnt: 300, day1: 0.4, day2: 0.4, day3: 0.35, day4: 0.4, day5: 0.35, day6: 0.3, day7: 0.25 },\n  { date: '1月05号', user_cnt: 350, day1: 0.4, day2: 0.36, day3: 0.45, day4: 0.3, day5: 0.3, day6: 0.2, day7: -1 },\n  { date: '1月06号', user_cnt: 400, day1: 0.4, day2: 0.4, day3: 0.5, day4: 0.4, day5: 0.3, day6: -1, day7: -1 },\n  { date: '1月07号', user_cnt: 350, day1: 0.45, day2: 0.4, day3: 0.3, day4: 0.2, day5: -1, day6: -1, day7: -1 },\n  { date: '1月08号', user_cnt: 400, day1: 0.5, day2: 0.5, day3: 0.4, day4: -1, day5: -1, day6: -1, day7: -1 },\n  { date: '1月09号', user_cnt: 500, day1: 0.6, day2: 0.48, day3: -1, day4: -1, day5: -1, day6: -1, day7: -1 },\n  { date: '1月10号', user_cnt: 400, day1: 0.52, day2: -1, day3: -1, day4: -1, day5: -1, day6: -1, day7: -1 },\n]\n\nconst colorIdx = d3\n  .scaleQuantize()\n  .domain([0.2, 0.6])\n  .range(COLORS.map((c, i) => i))\n\nexport default {parameters: {\"storySource\":{\"source\":\"import { ArtColumn, BaseTable, Classes } from 'ali-react-table'\\nimport { proto } from 'ali-react-table/biz'\\nimport * as d3 from 'd3'\\nimport React from 'react'\\nimport styled from 'styled-components'\\nimport { amount, ratio } from '../assets/format'\\n\\nconst COLORS = [\\n  '#E8F3FF',\\n  '#D6E9FF',\\n  '#ADD1FF',\\n  '#85B6FF',\\n  '#5790F2',\\n  // 从这里开始字体颜色要变为白色\\n  '#2E6BE6',\\n  '#1D4DBF',\\n  '#0F3499',\\n  '#061F73',\\n  '#03124D',\\n]\\n\\nconst data = [\\n  { date: '1月04号', user_cnt: 300, day1: 0.4, day2: 0.4, day3: 0.35, day4: 0.4, day5: 0.35, day6: 0.3, day7: 0.25 },\\n  { date: '1月05号', user_cnt: 350, day1: 0.4, day2: 0.36, day3: 0.45, day4: 0.3, day5: 0.3, day6: 0.2, day7: -1 },\\n  { date: '1月06号', user_cnt: 400, day1: 0.4, day2: 0.4, day3: 0.5, day4: 0.4, day5: 0.3, day6: -1, day7: -1 },\\n  { date: '1月07号', user_cnt: 350, day1: 0.45, day2: 0.4, day3: 0.3, day4: 0.2, day5: -1, day6: -1, day7: -1 },\\n  { date: '1月08号', user_cnt: 400, day1: 0.5, day2: 0.5, day3: 0.4, day4: -1, day5: -1, day6: -1, day7: -1 },\\n  { date: '1月09号', user_cnt: 500, day1: 0.6, day2: 0.48, day3: -1, day4: -1, day5: -1, day6: -1, day7: -1 },\\n  { date: '1月10号', user_cnt: 400, day1: 0.52, day2: -1, day3: -1, day4: -1, day5: -1, day6: -1, day7: -1 },\\n]\\n\\nconst colorIdx = d3\\n  .scaleQuantize()\\n  .domain([0.2, 0.6])\\n  .range(COLORS.map((c, i) => i))\\n\\nexport default { title: '示例 / 业务示例-用户留存矩阵' }\\n\\nconst StyledBaseTable = styled(BaseTable)`\\n  --border-color: none;\\n  --header-bgcolor: none;\\n\\n  .${Classes.tableHeader} {\\n    border-top: 1px solid #dfe3e8;\\n    border-bottom: 1px solid #dfe3e8;\\n  }\\n\\n  .${Classes.tableHeaderCell} {\\n    height: 48px;\\n  }\\n`\\n\\nexport function RemainMatrix() {\\n  const remainCol = proto.array<ArtColumn>({\\n    align: 'right',\\n    render: remainRateWithCount,\\n    getCellProps: getRemainCellProps,\\n  })\\n  return (\\n    <StyledBaseTable\\n      defaultColumnWidth={100}\\n      columns={[\\n        { code: 'date', name: '日期' },\\n        { code: 'user_cnt', name: '用户数' },\\n        ...remainCol([\\n          { code: 'day1', name: '第一日' },\\n          { code: 'day2', name: '第二日' },\\n          { code: 'day3', name: '第三日' },\\n          { code: 'day4', name: '第四日' },\\n          { code: 'day5', name: '第五日' },\\n          { code: 'day6', name: '第六日' },\\n          { code: 'day7', name: '第七日' },\\n        ]),\\n      ]}\\n      dataSource={data}\\n    />\\n  )\\n\\n  function getRemainCellProps(rate: any) {\\n    if (rate == -1) {\\n      return\\n    }\\n    const i = colorIdx(rate)\\n    return {\\n      style: {\\n        backgroundColor: COLORS[i],\\n        color: i <= 4 ? '#03124D' : 'white',\\n      },\\n    }\\n  }\\n\\n  function remainRateWithCount(rate: any, record: any) {\\n    if (rate == -1) {\\n      return null\\n    }\\n    return (\\n      <div style={{ lineHeight: '20px' }}>\\n        <div>{ratio(rate)}</div>\\n        <div>{amount(rate * record.user_cnt)}</div>\\n      </div>\\n    )\\n  }\\n}\\n\",\"locationsMap\":{\"示例-业务示例-用户留存矩阵--remain-matrix\":{\"startLoc\":{\"col\":7,\"line\":53},\"endLoc\":{\"col\":1,\"line\":103},\"startBody\":{\"col\":7,\"line\":53},\"endBody\":{\"col\":1,\"line\":103}}}},}, title: '示例 / 业务示例-用户留存矩阵' }\n\nconst StyledBaseTable = styled(BaseTable)`\n  --border-color: none;\n  --header-bgcolor: none;\n\n  .${Classes.tableHeader} {\n    border-top: 1px solid #dfe3e8;\n    border-bottom: 1px solid #dfe3e8;\n  }\n\n  .${Classes.tableHeaderCell} {\n    height: 48px;\n  }\n`\n\nexport const RemainMatrix = function RemainMatrix() {\n  const remainCol = proto.array<ArtColumn>({\n    align: 'right',\n    render: remainRateWithCount,\n    getCellProps: getRemainCellProps,\n  })\n  return (\n    <StyledBaseTable\n      defaultColumnWidth={100}\n      columns={[\n        { code: 'date', name: '日期' },\n        { code: 'user_cnt', name: '用户数' },\n        ...remainCol([\n          { code: 'day1', name: '第一日' },\n          { code: 'day2', name: '第二日' },\n          { code: 'day3', name: '第三日' },\n          { code: 'day4', name: '第四日' },\n          { code: 'day5', name: '第五日' },\n          { code: 'day6', name: '第六日' },\n          { code: 'day7', name: '第七日' },\n        ]),\n      ]}\n      dataSource={data}\n    />\n  )\n\n  function getRemainCellProps(rate: any) {\n    if (rate == -1) {\n      return\n    }\n    const i = colorIdx(rate)\n    return {\n      style: {\n        backgroundColor: COLORS[i],\n        color: i <= 4 ? '#03124D' : 'white',\n      },\n    }\n  }\n\n  function remainRateWithCount(rate: any, record: any) {\n    if (rate == -1) {\n      return null\n    }\n    return (\n      <div style={{ lineHeight: '20px' }}>\n        <div>{ratio(rate)}</div>\n        <div>{amount(rate * record.user_cnt)}</div>\n      </div>\n    )\n  }\n};",locationsMap:{"示例-业务示例-用户留存矩阵--remain-matrix":{startLoc:{col:28,line:61},endLoc:{col:1,line:111},startBody:{col:28,line:61},endBody:{col:1,line:111}}}},storySource:{source:"import { ArtColumn, BaseTable, Classes } from 'ali-react-table'\nimport { proto } from 'ali-react-table/biz'\nimport * as d3 from 'd3'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { amount, ratio } from '../assets/format'\n\nconst COLORS = [\n  '#E8F3FF',\n  '#D6E9FF',\n  '#ADD1FF',\n  '#85B6FF',\n  '#5790F2',\n  // 从这里开始字体颜色要变为白色\n  '#2E6BE6',\n  '#1D4DBF',\n  '#0F3499',\n  '#061F73',\n  '#03124D',\n]\n\nconst data = [\n  { date: '1月04号', user_cnt: 300, day1: 0.4, day2: 0.4, day3: 0.35, day4: 0.4, day5: 0.35, day6: 0.3, day7: 0.25 },\n  { date: '1月05号', user_cnt: 350, day1: 0.4, day2: 0.36, day3: 0.45, day4: 0.3, day5: 0.3, day6: 0.2, day7: -1 },\n  { date: '1月06号', user_cnt: 400, day1: 0.4, day2: 0.4, day3: 0.5, day4: 0.4, day5: 0.3, day6: -1, day7: -1 },\n  { date: '1月07号', user_cnt: 350, day1: 0.45, day2: 0.4, day3: 0.3, day4: 0.2, day5: -1, day6: -1, day7: -1 },\n  { date: '1月08号', user_cnt: 400, day1: 0.5, day2: 0.5, day3: 0.4, day4: -1, day5: -1, day6: -1, day7: -1 },\n  { date: '1月09号', user_cnt: 500, day1: 0.6, day2: 0.48, day3: -1, day4: -1, day5: -1, day6: -1, day7: -1 },\n  { date: '1月10号', user_cnt: 400, day1: 0.52, day2: -1, day3: -1, day4: -1, day5: -1, day6: -1, day7: -1 },\n]\n\nconst colorIdx = d3\n  .scaleQuantize()\n  .domain([0.2, 0.6])\n  .range(COLORS.map((c, i) => i))\n\nexport default { title: '示例 / 业务示例-用户留存矩阵' }\n\nconst StyledBaseTable = styled(BaseTable)`\n  --border-color: none;\n  --header-bgcolor: none;\n\n  .${Classes.tableHeader} {\n    border-top: 1px solid #dfe3e8;\n    border-bottom: 1px solid #dfe3e8;\n  }\n\n  .${Classes.tableHeaderCell} {\n    height: 48px;\n  }\n`\n\nexport function RemainMatrix() {\n  const remainCol = proto.array<ArtColumn>({\n    align: 'right',\n    render: remainRateWithCount,\n    getCellProps: getRemainCellProps,\n  })\n  return (\n    <StyledBaseTable\n      defaultColumnWidth={100}\n      columns={[\n        { code: 'date', name: '日期' },\n        { code: 'user_cnt', name: '用户数' },\n        ...remainCol([\n          { code: 'day1', name: '第一日' },\n          { code: 'day2', name: '第二日' },\n          { code: 'day3', name: '第三日' },\n          { code: 'day4', name: '第四日' },\n          { code: 'day5', name: '第五日' },\n          { code: 'day6', name: '第六日' },\n          { code: 'day7', name: '第七日' },\n        ]),\n      ]}\n      dataSource={data}\n    />\n  )\n\n  function getRemainCellProps(rate: any) {\n    if (rate == -1) {\n      return\n    }\n    const i = colorIdx(rate)\n    return {\n      style: {\n        backgroundColor: COLORS[i],\n        color: i <= 4 ? '#03124D' : 'white',\n      },\n    }\n  }\n\n  function remainRateWithCount(rate: any, record: any) {\n    if (rate == -1) {\n      return null\n    }\n    return (\n      <div style={{ lineHeight: '20px' }}>\n        <div>{ratio(rate)}</div>\n        <div>{amount(rate * record.user_cnt)}</div>\n      </div>\n    )\n  }\n}\n",locationsMap:{"示例-业务示例-用户留存矩阵--remain-matrix":{startLoc:{col:7,line:53},endLoc:{col:1,line:103},startBody:{col:7,line:53},endBody:{col:1,line:103}}}}},title:"示例 / 业务示例-用户留存矩阵"};const StyledBaseTable=Object(styled_components__WEBPACK_IMPORTED_MODULE_5__.b)(ali_react_table__WEBPACK_IMPORTED_MODULE_0__.a)`
  --border-color: none;
  --header-bgcolor: none;

  .${ali_react_table__WEBPACK_IMPORTED_MODULE_1__.a.tableHeader} {
    border-top: 1px solid #dfe3e8;
    border-bottom: 1px solid #dfe3e8;
  }

  .${ali_react_table__WEBPACK_IMPORTED_MODULE_1__.a.tableHeaderCell} {
    height: 48px;
  }
`,RemainMatrix=function RemainMatrix(){const remainCol=ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__.a.array({align:"right",render:function remainRateWithCount(rate,record){if(-1==rate)return null;return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",{style:{lineHeight:"20px"}},react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",null,Object(_assets_format__WEBPACK_IMPORTED_MODULE_6__.c)(rate)),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",null,Object(_assets_format__WEBPACK_IMPORTED_MODULE_6__.a)(rate*record.user_cnt)))},getCellProps:function getRemainCellProps(rate){if(-1==rate)return;const i=colorIdx(rate);return{style:{backgroundColor:COLORS[i],color:i<=4?"#03124D":"white"}}}});return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(StyledBaseTable,{defaultColumnWidth:100,columns:[{code:"date",name:"日期"},{code:"user_cnt",name:"用户数"},...remainCol([{code:"day1",name:"第一日"},{code:"day2",name:"第二日"},{code:"day3",name:"第三日"},{code:"day4",name:"第四日"},{code:"day5",name:"第五日"},{code:"day6",name:"第六日"},{code:"day7",name:"第七日"}])],dataSource:data})}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"单选",(function(){return 单选})),__webpack_require__.d(__webpack_exports__,"多选",(function(){return 多选}));var _alifd_next__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(88),_alifd_next__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(77),ali_react_table__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(32),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(61),react__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__),_src_common_utils_internals__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(59),_assets_fusion_style__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(66),_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(19);__webpack_exports__.default={parameters:{storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import { Checkbox, Radio } from '@alifd/next'\\nimport { ArtColumn, BaseTable, BaseTableProps } from 'ali-react-table'\\nimport { applyTransforms, TableTransform } from 'ali-react-table/biz'\\nimport React, { useState } from 'react'\\nimport { safeGetRowKey } from '../../src/common-utils/internals'\\nimport { FusionStyles } from '../assets/fusion-style'\\nimport { testProvColumns, useProvinceDataSource } from '../assets/ncov19-assets'\\n\\nexport default {\\n  title: '示例 / 单选与多选',\\n}\\n\\nexport function 单选() {\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n\\n  const [value, onChange] = useState('')\\n\\n  const singleSelectColumn: ArtColumn = {\\n    name: '',\\n    width: 60,\\n    align: 'center',\\n    render(_: any, record: any) {\\n      const key = record.provinceName\\n      return <Radio checked={value === key} onChange={() => onChange(key)} />\\n    },\\n  }\\n\\n  const renderData = applyTransforms({\\n    dataSource: dataSource.slice(0, 10),\\n    columns: [singleSelectColumn, ...testProvColumns],\\n  })\\n\\n  return (\\n    <>\\n      <FusionStyles />\\n      <div style={{ lineHeight: '24px' }}>当前选中的 value 为 {value || '[空]'}</div>\\n      <BaseTable\\n        primaryKey=\\\"provinceName\\\"\\n        isLoading={isLoading}\\n        dataSource={renderData.dataSource}\\n        columns={renderData.columns}\\n        getRowProps={(record) => {\\n          const key = record.provinceName\\n          return {\\n            style: {\\n              backgroundColor: key === value ? '#f5f5f5' : undefined,\\n              cursor: 'pointer',\\n            },\\n            onClick() {\\n              onChange(key)\\n            },\\n          }\\n        }}\\n      />\\n    </>\\n  )\\n}\\n\\nfunction multiSelect({\\n  primaryKey,\\n  value,\\n  onChange,\\n}: {\\n  primaryKey: BaseTableProps['primaryKey']\\n  value: { keys: string[]; lastKey: string }\\n  onChange(next: { keys: string[]; lastKey: string }, keys: string[], action: 'check' | 'uncheck'): void\\n}): TableTransform {\\n  return ({ columns, dataSource }) => {\\n    const checkedKeySet = new Set(value.keys)\\n\\n    const allKeys = dataSource.map((record, rowIndex) => {\\n      return safeGetRowKey(primaryKey, record, rowIndex)\\n    })\\n\\n    const isAllChecked = allKeys.length === value.keys.length\\n\\n    const title = (\\n      <Checkbox\\n        checked={isAllChecked}\\n        indeterminate={0 < value.keys.length && value.keys.length < allKeys.length}\\n        onChange={(_: any) => {\\n          if (isAllChecked) {\\n            onChange({ keys: [], lastKey: null }, value.keys, 'uncheck')\\n          } else {\\n            onChange({ keys: allKeys, lastKey: null }, allKeys, 'check')\\n          }\\n        }}\\n      />\\n    )\\n\\n    const checkboxColumn: ArtColumn = {\\n      name: '是否选中',\\n      title,\\n      width: 60,\\n      align: 'center',\\n\\n      render(_: any, record: any, rowIndex: number) {\\n        const key = safeGetRowKey(primaryKey, record, rowIndex)\\n        const checked = checkedKeySet.has(key)\\n        return (\\n          <Checkbox\\n            checked={checked}\\n            onChange={(_: any, e: React.MouseEvent) => {\\n              onCheckboxChange(checked, key, e.nativeEvent.shiftKey)\\n            }}\\n          />\\n        )\\n      },\\n    }\\n\\n    return { columns: [checkboxColumn].concat(columns), dataSource }\\n\\n    function onCheckboxChange(prevChecked: boolean, key: string, batch: boolean) {\\n      let batchKeys = [key]\\n\\n      if (batch && value.lastKey) {\\n        const lastIdx = allKeys.indexOf(value.lastKey)\\n        const cntIdx = allKeys.indexOf(key)\\n        const [start, end] = lastIdx < cntIdx ? [lastIdx, cntIdx] : [cntIdx, lastIdx]\\n        batchKeys = allKeys.slice(start, end + 1)\\n      }\\n\\n      if (prevChecked) {\\n        const batchKeySet = new Set(batchKeys)\\n        onChange(\\n          {\\n            keys: value.keys.filter((v) => !batchKeySet.has(v)),\\n            lastKey: key,\\n          },\\n          batchKeys,\\n          'uncheck',\\n        )\\n      } else {\\n        onChange(\\n          {\\n            keys: value.keys.concat(batchKeys.filter((k) => !checkedKeySet.has(k))),\\n            lastKey: key,\\n          },\\n          batchKeys,\\n          'check',\\n        )\\n      }\\n    }\\n  }\\n}\\n\\nexport function 多选() {\\n  const [value, onChange] = useState({ keys: [] as string[], lastKey: '' })\\n\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n\\n  const renderData = applyTransforms(\\n    { dataSource: dataSource.slice(0, 10), columns: testProvColumns },\\n    multiSelect({ primaryKey: 'provinceName', value, onChange }),\\n  )\\n\\n  return (\\n    <>\\n      <FusionStyles />\\n      <div style={{ lineHeight: '24px' }}>交互提示：按住 shift 键来来批量选中多行</div>\\n      <div style={{ lineHeight: '24px' }}>当前选中的 value 为 {value.keys.join(',') || '[空]'}</div>\\n      <BaseTable\\n        primaryKey=\\\"provinceName\\\"\\n        isLoading={isLoading}\\n        dataSource={renderData.dataSource}\\n        columns={renderData.columns}\\n      />\\n    </>\\n  )\\n}\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"示例-单选与多选--单选\":{\"startLoc\":{\"col\":7,\"line\":13},\"endLoc\":{\"col\":1,\"line\":57},\"startBody\":{\"col\":7,\"line\":13},\"endBody\":{\"col\":1,\"line\":57}},\"示例-单选与多选--多选\":{\"startLoc\":{\"col\":7,\"line\":147},\"endLoc\":{\"col\":1,\"line\":170},\"startBody\":{\"col\":7,\"line\":147},\"endBody\":{\"col\":1,\"line\":170}}};\n    \nimport { Checkbox, Radio } from '@alifd/next'\nimport { ArtColumn, BaseTable, BaseTableProps } from 'ali-react-table'\nimport { applyTransforms, TableTransform } from 'ali-react-table/biz'\nimport React, { useState } from 'react'\nimport { safeGetRowKey } from '../../src/common-utils/internals'\nimport { FusionStyles } from '../assets/fusion-style'\nimport { testProvColumns, useProvinceDataSource } from '../assets/ncov19-assets'\n\nexport default {parameters: {\"storySource\":{\"source\":\"import { Checkbox, Radio } from '@alifd/next'\\nimport { ArtColumn, BaseTable, BaseTableProps } from 'ali-react-table'\\nimport { applyTransforms, TableTransform } from 'ali-react-table/biz'\\nimport React, { useState } from 'react'\\nimport { safeGetRowKey } from '../../src/common-utils/internals'\\nimport { FusionStyles } from '../assets/fusion-style'\\nimport { testProvColumns, useProvinceDataSource } from '../assets/ncov19-assets'\\n\\nexport default {\\n  title: '示例 / 单选与多选',\\n}\\n\\nexport function 单选() {\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n\\n  const [value, onChange] = useState('')\\n\\n  const singleSelectColumn: ArtColumn = {\\n    name: '',\\n    width: 60,\\n    align: 'center',\\n    render(_: any, record: any) {\\n      const key = record.provinceName\\n      return <Radio checked={value === key} onChange={() => onChange(key)} />\\n    },\\n  }\\n\\n  const renderData = applyTransforms({\\n    dataSource: dataSource.slice(0, 10),\\n    columns: [singleSelectColumn, ...testProvColumns],\\n  })\\n\\n  return (\\n    <>\\n      <FusionStyles />\\n      <div style={{ lineHeight: '24px' }}>当前选中的 value 为 {value || '[空]'}</div>\\n      <BaseTable\\n        primaryKey=\\\"provinceName\\\"\\n        isLoading={isLoading}\\n        dataSource={renderData.dataSource}\\n        columns={renderData.columns}\\n        getRowProps={(record) => {\\n          const key = record.provinceName\\n          return {\\n            style: {\\n              backgroundColor: key === value ? '#f5f5f5' : undefined,\\n              cursor: 'pointer',\\n            },\\n            onClick() {\\n              onChange(key)\\n            },\\n          }\\n        }}\\n      />\\n    </>\\n  )\\n}\\n\\nfunction multiSelect({\\n  primaryKey,\\n  value,\\n  onChange,\\n}: {\\n  primaryKey: BaseTableProps['primaryKey']\\n  value: { keys: string[]; lastKey: string }\\n  onChange(next: { keys: string[]; lastKey: string }, keys: string[], action: 'check' | 'uncheck'): void\\n}): TableTransform {\\n  return ({ columns, dataSource }) => {\\n    const checkedKeySet = new Set(value.keys)\\n\\n    const allKeys = dataSource.map((record, rowIndex) => {\\n      return safeGetRowKey(primaryKey, record, rowIndex)\\n    })\\n\\n    const isAllChecked = allKeys.length === value.keys.length\\n\\n    const title = (\\n      <Checkbox\\n        checked={isAllChecked}\\n        indeterminate={0 < value.keys.length && value.keys.length < allKeys.length}\\n        onChange={(_: any) => {\\n          if (isAllChecked) {\\n            onChange({ keys: [], lastKey: null }, value.keys, 'uncheck')\\n          } else {\\n            onChange({ keys: allKeys, lastKey: null }, allKeys, 'check')\\n          }\\n        }}\\n      />\\n    )\\n\\n    const checkboxColumn: ArtColumn = {\\n      name: '是否选中',\\n      title,\\n      width: 60,\\n      align: 'center',\\n\\n      render(_: any, record: any, rowIndex: number) {\\n        const key = safeGetRowKey(primaryKey, record, rowIndex)\\n        const checked = checkedKeySet.has(key)\\n        return (\\n          <Checkbox\\n            checked={checked}\\n            onChange={(_: any, e: React.MouseEvent) => {\\n              onCheckboxChange(checked, key, e.nativeEvent.shiftKey)\\n            }}\\n          />\\n        )\\n      },\\n    }\\n\\n    return { columns: [checkboxColumn].concat(columns), dataSource }\\n\\n    function onCheckboxChange(prevChecked: boolean, key: string, batch: boolean) {\\n      let batchKeys = [key]\\n\\n      if (batch && value.lastKey) {\\n        const lastIdx = allKeys.indexOf(value.lastKey)\\n        const cntIdx = allKeys.indexOf(key)\\n        const [start, end] = lastIdx < cntIdx ? [lastIdx, cntIdx] : [cntIdx, lastIdx]\\n        batchKeys = allKeys.slice(start, end + 1)\\n      }\\n\\n      if (prevChecked) {\\n        const batchKeySet = new Set(batchKeys)\\n        onChange(\\n          {\\n            keys: value.keys.filter((v) => !batchKeySet.has(v)),\\n            lastKey: key,\\n          },\\n          batchKeys,\\n          'uncheck',\\n        )\\n      } else {\\n        onChange(\\n          {\\n            keys: value.keys.concat(batchKeys.filter((k) => !checkedKeySet.has(k))),\\n            lastKey: key,\\n          },\\n          batchKeys,\\n          'check',\\n        )\\n      }\\n    }\\n  }\\n}\\n\\nexport function 多选() {\\n  const [value, onChange] = useState({ keys: [] as string[], lastKey: '' })\\n\\n  const { isLoading, dataSource } = useProvinceDataSource()\\n\\n  const renderData = applyTransforms(\\n    { dataSource: dataSource.slice(0, 10), columns: testProvColumns },\\n    multiSelect({ primaryKey: 'provinceName', value, onChange }),\\n  )\\n\\n  return (\\n    <>\\n      <FusionStyles />\\n      <div style={{ lineHeight: '24px' }}>交互提示：按住 shift 键来来批量选中多行</div>\\n      <div style={{ lineHeight: '24px' }}>当前选中的 value 为 {value.keys.join(',') || '[空]'}</div>\\n      <BaseTable\\n        primaryKey=\\\"provinceName\\\"\\n        isLoading={isLoading}\\n        dataSource={renderData.dataSource}\\n        columns={renderData.columns}\\n      />\\n    </>\\n  )\\n}\\n\",\"locationsMap\":{\"示例-单选与多选--单选\":{\"startLoc\":{\"col\":7,\"line\":13},\"endLoc\":{\"col\":1,\"line\":57},\"startBody\":{\"col\":7,\"line\":13},\"endBody\":{\"col\":1,\"line\":57}},\"示例-单选与多选--多选\":{\"startLoc\":{\"col\":7,\"line\":147},\"endLoc\":{\"col\":1,\"line\":170},\"startBody\":{\"col\":7,\"line\":147},\"endBody\":{\"col\":1,\"line\":170}}}},},\n  title: '示例 / 单选与多选',\n}\n\nexport const 单选 = function 单选() {\n  const { isLoading, dataSource } = useProvinceDataSource()\n\n  const [value, onChange] = useState('')\n\n  const singleSelectColumn: ArtColumn = {\n    name: '',\n    width: 60,\n    align: 'center',\n    render(_: any, record: any) {\n      const key = record.provinceName\n      return <Radio checked={value === key} onChange={() => onChange(key)} />\n    },\n  }\n\n  const renderData = applyTransforms({\n    dataSource: dataSource.slice(0, 10),\n    columns: [singleSelectColumn, ...testProvColumns],\n  })\n\n  return (\n    <>\n      <FusionStyles />\n      <div style={{ lineHeight: '24px' }}>当前选中的 value 为 {value || '[空]'}</div>\n      <BaseTable\n        primaryKey=\"provinceName\"\n        isLoading={isLoading}\n        dataSource={renderData.dataSource}\n        columns={renderData.columns}\n        getRowProps={(record) => {\n          const key = record.provinceName\n          return {\n            style: {\n              backgroundColor: key === value ? '#f5f5f5' : undefined,\n              cursor: 'pointer',\n            },\n            onClick() {\n              onChange(key)\n            },\n          }\n        }}\n      />\n    </>\n  )\n};\n\nfunction multiSelect({\n  primaryKey,\n  value,\n  onChange,\n}: {\n  primaryKey: BaseTableProps['primaryKey']\n  value: { keys: string[]; lastKey: string }\n  onChange(next: { keys: string[]; lastKey: string }, keys: string[], action: 'check' | 'uncheck'): void\n}): TableTransform {\n  return ({ columns, dataSource }) => {\n    const checkedKeySet = new Set(value.keys)\n\n    const allKeys = dataSource.map((record, rowIndex) => {\n      return safeGetRowKey(primaryKey, record, rowIndex)\n    })\n\n    const isAllChecked = allKeys.length === value.keys.length\n\n    const title = (\n      <Checkbox\n        checked={isAllChecked}\n        indeterminate={0 < value.keys.length && value.keys.length < allKeys.length}\n        onChange={(_: any) => {\n          if (isAllChecked) {\n            onChange({ keys: [], lastKey: null }, value.keys, 'uncheck')\n          } else {\n            onChange({ keys: allKeys, lastKey: null }, allKeys, 'check')\n          }\n        }}\n      />\n    )\n\n    const checkboxColumn: ArtColumn = {\n      name: '是否选中',\n      title,\n      width: 60,\n      align: 'center',\n\n      render(_: any, record: any, rowIndex: number) {\n        const key = safeGetRowKey(primaryKey, record, rowIndex)\n        const checked = checkedKeySet.has(key)\n        return (\n          <Checkbox\n            checked={checked}\n            onChange={(_: any, e: React.MouseEvent) => {\n              onCheckboxChange(checked, key, e.nativeEvent.shiftKey)\n            }}\n          />\n        )\n      },\n    }\n\n    return { columns: [checkboxColumn].concat(columns), dataSource }\n\n    function onCheckboxChange(prevChecked: boolean, key: string, batch: boolean) {\n      let batchKeys = [key]\n\n      if (batch && value.lastKey) {\n        const lastIdx = allKeys.indexOf(value.lastKey)\n        const cntIdx = allKeys.indexOf(key)\n        const [start, end] = lastIdx < cntIdx ? [lastIdx, cntIdx] : [cntIdx, lastIdx]\n        batchKeys = allKeys.slice(start, end + 1)\n      }\n\n      if (prevChecked) {\n        const batchKeySet = new Set(batchKeys)\n        onChange(\n          {\n            keys: value.keys.filter((v) => !batchKeySet.has(v)),\n            lastKey: key,\n          },\n          batchKeys,\n          'uncheck',\n        )\n      } else {\n        onChange(\n          {\n            keys: value.keys.concat(batchKeys.filter((k) => !checkedKeySet.has(k))),\n            lastKey: key,\n          },\n          batchKeys,\n          'check',\n        )\n      }\n    }\n  }\n}\n\nexport const 多选 = function 多选() {\n  const [value, onChange] = useState({ keys: [] as string[], lastKey: '' })\n\n  const { isLoading, dataSource } = useProvinceDataSource()\n\n  const renderData = applyTransforms(\n    { dataSource: dataSource.slice(0, 10), columns: testProvColumns },\n    multiSelect({ primaryKey: 'provinceName', value, onChange }),\n  )\n\n  return (\n    <>\n      <FusionStyles />\n      <div style={{ lineHeight: '24px' }}>交互提示：按住 shift 键来来批量选中多行</div>\n      <div style={{ lineHeight: '24px' }}>当前选中的 value 为 {value.keys.join(',') || '[空]'}</div>\n      <BaseTable\n        primaryKey=\"provinceName\"\n        isLoading={isLoading}\n        dataSource={renderData.dataSource}\n        columns={renderData.columns}\n      />\n    </>\n  )\n};",locationsMap:{"示例-单选与多选--单选":{startLoc:{col:18,line:21},endLoc:{col:1,line:65},startBody:{col:18,line:21},endBody:{col:1,line:65}},"示例-单选与多选--多选":{startLoc:{col:18,line:155},endLoc:{col:1,line:178},startBody:{col:18,line:155},endBody:{col:1,line:178}}}},storySource:{source:"import { Checkbox, Radio } from '@alifd/next'\nimport { ArtColumn, BaseTable, BaseTableProps } from 'ali-react-table'\nimport { applyTransforms, TableTransform } from 'ali-react-table/biz'\nimport React, { useState } from 'react'\nimport { safeGetRowKey } from '../../src/common-utils/internals'\nimport { FusionStyles } from '../assets/fusion-style'\nimport { testProvColumns, useProvinceDataSource } from '../assets/ncov19-assets'\n\nexport default {\n  title: '示例 / 单选与多选',\n}\n\nexport function 单选() {\n  const { isLoading, dataSource } = useProvinceDataSource()\n\n  const [value, onChange] = useState('')\n\n  const singleSelectColumn: ArtColumn = {\n    name: '',\n    width: 60,\n    align: 'center',\n    render(_: any, record: any) {\n      const key = record.provinceName\n      return <Radio checked={value === key} onChange={() => onChange(key)} />\n    },\n  }\n\n  const renderData = applyTransforms({\n    dataSource: dataSource.slice(0, 10),\n    columns: [singleSelectColumn, ...testProvColumns],\n  })\n\n  return (\n    <>\n      <FusionStyles />\n      <div style={{ lineHeight: '24px' }}>当前选中的 value 为 {value || '[空]'}</div>\n      <BaseTable\n        primaryKey=\"provinceName\"\n        isLoading={isLoading}\n        dataSource={renderData.dataSource}\n        columns={renderData.columns}\n        getRowProps={(record) => {\n          const key = record.provinceName\n          return {\n            style: {\n              backgroundColor: key === value ? '#f5f5f5' : undefined,\n              cursor: 'pointer',\n            },\n            onClick() {\n              onChange(key)\n            },\n          }\n        }}\n      />\n    </>\n  )\n}\n\nfunction multiSelect({\n  primaryKey,\n  value,\n  onChange,\n}: {\n  primaryKey: BaseTableProps['primaryKey']\n  value: { keys: string[]; lastKey: string }\n  onChange(next: { keys: string[]; lastKey: string }, keys: string[], action: 'check' | 'uncheck'): void\n}): TableTransform {\n  return ({ columns, dataSource }) => {\n    const checkedKeySet = new Set(value.keys)\n\n    const allKeys = dataSource.map((record, rowIndex) => {\n      return safeGetRowKey(primaryKey, record, rowIndex)\n    })\n\n    const isAllChecked = allKeys.length === value.keys.length\n\n    const title = (\n      <Checkbox\n        checked={isAllChecked}\n        indeterminate={0 < value.keys.length && value.keys.length < allKeys.length}\n        onChange={(_: any) => {\n          if (isAllChecked) {\n            onChange({ keys: [], lastKey: null }, value.keys, 'uncheck')\n          } else {\n            onChange({ keys: allKeys, lastKey: null }, allKeys, 'check')\n          }\n        }}\n      />\n    )\n\n    const checkboxColumn: ArtColumn = {\n      name: '是否选中',\n      title,\n      width: 60,\n      align: 'center',\n\n      render(_: any, record: any, rowIndex: number) {\n        const key = safeGetRowKey(primaryKey, record, rowIndex)\n        const checked = checkedKeySet.has(key)\n        return (\n          <Checkbox\n            checked={checked}\n            onChange={(_: any, e: React.MouseEvent) => {\n              onCheckboxChange(checked, key, e.nativeEvent.shiftKey)\n            }}\n          />\n        )\n      },\n    }\n\n    return { columns: [checkboxColumn].concat(columns), dataSource }\n\n    function onCheckboxChange(prevChecked: boolean, key: string, batch: boolean) {\n      let batchKeys = [key]\n\n      if (batch && value.lastKey) {\n        const lastIdx = allKeys.indexOf(value.lastKey)\n        const cntIdx = allKeys.indexOf(key)\n        const [start, end] = lastIdx < cntIdx ? [lastIdx, cntIdx] : [cntIdx, lastIdx]\n        batchKeys = allKeys.slice(start, end + 1)\n      }\n\n      if (prevChecked) {\n        const batchKeySet = new Set(batchKeys)\n        onChange(\n          {\n            keys: value.keys.filter((v) => !batchKeySet.has(v)),\n            lastKey: key,\n          },\n          batchKeys,\n          'uncheck',\n        )\n      } else {\n        onChange(\n          {\n            keys: value.keys.concat(batchKeys.filter((k) => !checkedKeySet.has(k))),\n            lastKey: key,\n          },\n          batchKeys,\n          'check',\n        )\n      }\n    }\n  }\n}\n\nexport function 多选() {\n  const [value, onChange] = useState({ keys: [] as string[], lastKey: '' })\n\n  const { isLoading, dataSource } = useProvinceDataSource()\n\n  const renderData = applyTransforms(\n    { dataSource: dataSource.slice(0, 10), columns: testProvColumns },\n    multiSelect({ primaryKey: 'provinceName', value, onChange }),\n  )\n\n  return (\n    <>\n      <FusionStyles />\n      <div style={{ lineHeight: '24px' }}>交互提示：按住 shift 键来来批量选中多行</div>\n      <div style={{ lineHeight: '24px' }}>当前选中的 value 为 {value.keys.join(',') || '[空]'}</div>\n      <BaseTable\n        primaryKey=\"provinceName\"\n        isLoading={isLoading}\n        dataSource={renderData.dataSource}\n        columns={renderData.columns}\n      />\n    </>\n  )\n}\n",locationsMap:{"示例-单选与多选--单选":{startLoc:{col:7,line:13},endLoc:{col:1,line:57},startBody:{col:7,line:13},endBody:{col:1,line:57}},"示例-单选与多选--多选":{startLoc:{col:7,line:147},endLoc:{col:1,line:170},startBody:{col:7,line:147},endBody:{col:1,line:170}}}}},title:"示例 / 单选与多选"};const 单选=function 单选(){const{isLoading:isLoading,dataSource:dataSource}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_7__.e)(),[value,onChange]=Object(react__WEBPACK_IMPORTED_MODULE_4__.useState)(""),singleSelectColumn={name:"",width:60,align:"center",render(_,record){const key=record.provinceName;return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_0__.a,{checked:value===key,onChange:()=>onChange(key)})}},renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_3__.a)({dataSource:dataSource.slice(0,10),columns:[singleSelectColumn,..._assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_7__.b]});return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment,null,react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(_assets_fusion_style__WEBPACK_IMPORTED_MODULE_6__.a,null),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",{style:{lineHeight:"24px"}},"当前选中的 value 为 ",value||"[空]"),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_2__.a,{primaryKey:"provinceName",isLoading:isLoading,dataSource:renderData.dataSource,columns:renderData.columns,getRowProps:record=>{const key=record.provinceName;return{style:{backgroundColor:key===value?"#f5f5f5":void 0,cursor:"pointer"},onClick(){onChange(key)}}}}))};function multiSelect({primaryKey:primaryKey,value:value,onChange:onChange}){return({columns:columns,dataSource:dataSource})=>{const checkedKeySet=new Set(value.keys),allKeys=dataSource.map((record,rowIndex)=>Object(_src_common_utils_internals__WEBPACK_IMPORTED_MODULE_5__.b)(primaryKey,record,rowIndex)),isAllChecked=allKeys.length===value.keys.length;return{columns:[{name:"是否选中",title:react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_1__.a,{checked:isAllChecked,indeterminate:0<value.keys.length&&value.keys.length<allKeys.length,onChange:_=>{isAllChecked?onChange({keys:[],lastKey:null},value.keys,"uncheck"):onChange({keys:allKeys,lastKey:null},allKeys,"check")}}),width:60,align:"center",render(_,record,rowIndex){const key=Object(_src_common_utils_internals__WEBPACK_IMPORTED_MODULE_5__.b)(primaryKey,record,rowIndex),checked=checkedKeySet.has(key);return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_1__.a,{checked:checked,onChange:(_,e)=>{!function onCheckboxChange(prevChecked,key,batch){let batchKeys=[key];if(batch&&value.lastKey){const lastIdx=allKeys.indexOf(value.lastKey),cntIdx=allKeys.indexOf(key),[start,end]=lastIdx<cntIdx?[lastIdx,cntIdx]:[cntIdx,lastIdx];batchKeys=allKeys.slice(start,end+1)}if(prevChecked){const batchKeySet=new Set(batchKeys);onChange({keys:value.keys.filter(v=>!batchKeySet.has(v)),lastKey:key},batchKeys,"uncheck")}else onChange({keys:value.keys.concat(batchKeys.filter(k=>!checkedKeySet.has(k))),lastKey:key},batchKeys,"check")}(checked,key,e.nativeEvent.shiftKey)}})}}].concat(columns),dataSource:dataSource}}}const 多选=function 多选(){const[value,onChange]=Object(react__WEBPACK_IMPORTED_MODULE_4__.useState)({keys:[],lastKey:""}),{isLoading:isLoading,dataSource:dataSource}=Object(_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_7__.e)(),renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_3__.a)({dataSource:dataSource.slice(0,10),columns:_assets_ncov19_assets__WEBPACK_IMPORTED_MODULE_7__.b},multiSelect({primaryKey:"provinceName",value:value,onChange:onChange}));return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment,null,react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(_assets_fusion_style__WEBPACK_IMPORTED_MODULE_6__.a,null),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",{style:{lineHeight:"24px"}},"交互提示：按住 shift 键来来批量选中多行"),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",{style:{lineHeight:"24px"}},"当前选中的 value 为 ",value.keys.join(",")||"[空]"),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_2__.a,{primaryKey:"provinceName",isLoading:isLoading,dataSource:renderData.dataSource,columns:renderData.columns}))}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"表格操作栏示例",(function(){return 表格操作栏示例}));var _alifd_next__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(87),ali_react_table__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(32),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(68),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(128),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(173),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(61),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(50),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(511),react__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_8__),_assets_cdn_data__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(63),_assets_format__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(17),_assets_fusion_style__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(66);__webpack_exports__.default={parameters:{storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import * as fusion from '@alifd/next'\\nimport { ArtColumn, BaseTable } from 'ali-react-table'\\nimport {\\n  applyTransforms,\\n  commonTransforms,\\n  exportTableAsExcel,\\n  proto,\\n  transformColumn,\\n  useOperationBar,\\n} from 'ali-react-table/biz'\\nimport React, { useEffect, useState } from 'react'\\nimport { getAppTrafficData } from '../assets/cdn-data'\\nimport { amount, ratio } from '../assets/format'\\nimport { FusionStyles } from '../assets/fusion-style'\\n\\nexport default { title: '示例 / 表格操作栏示例' }\\n\\nexport function 表格操作栏示例() {\\n  // 例如 proto 创建若干列配置的「原型」，方便后续书写列配置\\n  const groupProto = proto.array<ArtColumn>({\\n    name: proto.string,\\n    children: proto.array({\\n      name: proto.string,\\n      width: 150,\\n      features: proto.object({ defaultVisible: true }),\\n    }),\\n  })\\n\\n  const appIndProto = proto.array<ArtColumn>({\\n    width: 120,\\n    align: 'right',\\n    features: { defaultVisible: true, lfl: true },\\n  })\\n\\n  const rateIndProto = proto.array<ArtColumn>({\\n    width: 120,\\n    align: 'right',\\n    render: ratio,\\n    features: { defaultVisible: true, lfl: true },\\n  })\\n\\n  const cateFieldProto = proto.array<ArtColumn>({ width: 120 })\\n\\n  // 列配置\\n  const columns: ArtColumn[] = groupProto([\\n    {\\n      name: '商品信息',\\n      features: { flatten: true },\\n      children: [\\n        { code: 'order', name: '序号', width: 100, lock: true, features: { order: true, enforceVisible: true } },\\n        { code: 'sku_code', name: 'SKU code' },\\n        { code: 'sku_name', name: 'SKU名称' },\\n      ],\\n    },\\n    {\\n      name: '机构信息',\\n      features: { flatten: true },\\n      children: [\\n        { code: 'city_name', name: '城市' },\\n        { code: 'shop_name', name: '门店', features: { defaultVisible: true } },\\n      ],\\n    },\\n    {\\n      name: '类目信息',\\n      children: cateFieldProto([\\n        { code: 'merge_cate_level1_name', name: '一级类目' },\\n        { code: 'merge_cate_level2_name', name: '二级类目' },\\n        { code: 'merge_cate_level3_name', name: '三级类目' },\\n      ]),\\n    },\\n    {\\n      name: 'APP指标',\\n      children: appIndProto([\\n        { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio },\\n        { code: 'app_trd_amt_1d', name: 'APP成交金额', render: amount },\\n        { code: 'app_qty_pbt', name: 'APP件单价' },\\n        { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总' },\\n        { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数' },\\n        { code: 'appout_shop_num', name: '缺货门店数', render: amount },\\n        { code: 'all_time_len', name: '店均缺货时长', render: amount },\\n        { code: 'bad_rmk_rate', name: '订单差评率', render: ratio },\\n      ]),\\n    },\\n    {\\n      name: '转换率',\\n      children: rateIndProto([\\n        { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率' },\\n        { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率' },\\n        { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率' },\\n        { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率' },\\n        { code: 'my_page_imp2pay_rate', name: '我的曝光至成交转化率' },\\n        { code: 'pq_act_imp2pay_rate', name: '活动页曝光至成交转化率' },\\n        { code: 'other_imp2pay_rate', name: '其他曝光至成交转化率' },\\n      ]),\\n    },\\n  ])\\n\\n  // 自定义的 transform，为 features.lfl 为 true 的列添加对应的 环比列\\n  function transformLfl(showLfl: boolean) {\\n    return transformColumn((col) => {\\n      if (showLfl && col.features?.lfl) {\\n        return [col, { ...col, name: '环比', render: (value) => `lfl_of_${value}` }]\\n      }\\n      return col\\n    })\\n  }\\n\\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\\n\\n  useEffect(() => {\\n    getAppTrafficData().then((data) => {\\n      setState({ isLoading: false, data: data.slice(0, 8) })\\n    })\\n  }, [])\\n\\n  const operationBar = useOperationBar({\\n    actionColor: '#5e85f7',\\n    features: [\\n      { type: 'toggle', key: 'lfl', title: '展示环比', transform: transformLfl },\\n      { type: 'separator' },\\n      { type: 'export', onExport },\\n      { type: 'custom-columns' },\\n      { type: 'custom', node: `共 ${state.isLoading ? '-' : state.data.length} 条数据` },\\n    ],\\n    components: fusion,\\n    columns,\\n  })\\n\\n  const [hoverColIndex, onChangeHoverColIndex] = useState(-1)\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource: state.data },\\n    ...operationBar.transforms,\\n    commonTransforms.orderField(),\\n    commonTransforms.flatten(),\\n    commonTransforms.columnHover({\\n      hoverColIndex,\\n      onChangeHoverColIndex,\\n    }),\\n  )\\n\\n  return (\\n    <div>\\n      <FusionStyles />\\n      <operationBar.view>{operationBar.nodes}</operationBar.view>\\n      <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\\n    </div>\\n  )\\n\\n  function onExport() {\\n    return exportTableAsExcel(require('xlsx'), state.data, renderData.columns, 'export.xlsx')\\n  }\\n}\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"示例-表格操作栏示例--表格操作栏示例\":{\"startLoc\":{\"col\":7,\"line\":18},\"endLoc\":{\"col\":1,\"line\":153},\"startBody\":{\"col\":7,\"line\":18},\"endBody\":{\"col\":1,\"line\":153}}};\n    \nimport * as fusion from '@alifd/next'\nimport { ArtColumn, BaseTable } from 'ali-react-table'\nimport {\n  applyTransforms,\n  commonTransforms,\n  exportTableAsExcel,\n  proto,\n  transformColumn,\n  useOperationBar,\n} from 'ali-react-table/biz'\nimport React, { useEffect, useState } from 'react'\nimport { getAppTrafficData } from '../assets/cdn-data'\nimport { amount, ratio } from '../assets/format'\nimport { FusionStyles } from '../assets/fusion-style'\n\nexport default {parameters: {\"storySource\":{\"source\":\"import * as fusion from '@alifd/next'\\nimport { ArtColumn, BaseTable } from 'ali-react-table'\\nimport {\\n  applyTransforms,\\n  commonTransforms,\\n  exportTableAsExcel,\\n  proto,\\n  transformColumn,\\n  useOperationBar,\\n} from 'ali-react-table/biz'\\nimport React, { useEffect, useState } from 'react'\\nimport { getAppTrafficData } from '../assets/cdn-data'\\nimport { amount, ratio } from '../assets/format'\\nimport { FusionStyles } from '../assets/fusion-style'\\n\\nexport default { title: '示例 / 表格操作栏示例' }\\n\\nexport function 表格操作栏示例() {\\n  // 例如 proto 创建若干列配置的「原型」，方便后续书写列配置\\n  const groupProto = proto.array<ArtColumn>({\\n    name: proto.string,\\n    children: proto.array({\\n      name: proto.string,\\n      width: 150,\\n      features: proto.object({ defaultVisible: true }),\\n    }),\\n  })\\n\\n  const appIndProto = proto.array<ArtColumn>({\\n    width: 120,\\n    align: 'right',\\n    features: { defaultVisible: true, lfl: true },\\n  })\\n\\n  const rateIndProto = proto.array<ArtColumn>({\\n    width: 120,\\n    align: 'right',\\n    render: ratio,\\n    features: { defaultVisible: true, lfl: true },\\n  })\\n\\n  const cateFieldProto = proto.array<ArtColumn>({ width: 120 })\\n\\n  // 列配置\\n  const columns: ArtColumn[] = groupProto([\\n    {\\n      name: '商品信息',\\n      features: { flatten: true },\\n      children: [\\n        { code: 'order', name: '序号', width: 100, lock: true, features: { order: true, enforceVisible: true } },\\n        { code: 'sku_code', name: 'SKU code' },\\n        { code: 'sku_name', name: 'SKU名称' },\\n      ],\\n    },\\n    {\\n      name: '机构信息',\\n      features: { flatten: true },\\n      children: [\\n        { code: 'city_name', name: '城市' },\\n        { code: 'shop_name', name: '门店', features: { defaultVisible: true } },\\n      ],\\n    },\\n    {\\n      name: '类目信息',\\n      children: cateFieldProto([\\n        { code: 'merge_cate_level1_name', name: '一级类目' },\\n        { code: 'merge_cate_level2_name', name: '二级类目' },\\n        { code: 'merge_cate_level3_name', name: '三级类目' },\\n      ]),\\n    },\\n    {\\n      name: 'APP指标',\\n      children: appIndProto([\\n        { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio },\\n        { code: 'app_trd_amt_1d', name: 'APP成交金额', render: amount },\\n        { code: 'app_qty_pbt', name: 'APP件单价' },\\n        { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总' },\\n        { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数' },\\n        { code: 'appout_shop_num', name: '缺货门店数', render: amount },\\n        { code: 'all_time_len', name: '店均缺货时长', render: amount },\\n        { code: 'bad_rmk_rate', name: '订单差评率', render: ratio },\\n      ]),\\n    },\\n    {\\n      name: '转换率',\\n      children: rateIndProto([\\n        { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率' },\\n        { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率' },\\n        { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率' },\\n        { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率' },\\n        { code: 'my_page_imp2pay_rate', name: '我的曝光至成交转化率' },\\n        { code: 'pq_act_imp2pay_rate', name: '活动页曝光至成交转化率' },\\n        { code: 'other_imp2pay_rate', name: '其他曝光至成交转化率' },\\n      ]),\\n    },\\n  ])\\n\\n  // 自定义的 transform，为 features.lfl 为 true 的列添加对应的 环比列\\n  function transformLfl(showLfl: boolean) {\\n    return transformColumn((col) => {\\n      if (showLfl && col.features?.lfl) {\\n        return [col, { ...col, name: '环比', render: (value) => `lfl_of_${value}` }]\\n      }\\n      return col\\n    })\\n  }\\n\\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\\n\\n  useEffect(() => {\\n    getAppTrafficData().then((data) => {\\n      setState({ isLoading: false, data: data.slice(0, 8) })\\n    })\\n  }, [])\\n\\n  const operationBar = useOperationBar({\\n    actionColor: '#5e85f7',\\n    features: [\\n      { type: 'toggle', key: 'lfl', title: '展示环比', transform: transformLfl },\\n      { type: 'separator' },\\n      { type: 'export', onExport },\\n      { type: 'custom-columns' },\\n      { type: 'custom', node: `共 ${state.isLoading ? '-' : state.data.length} 条数据` },\\n    ],\\n    components: fusion,\\n    columns,\\n  })\\n\\n  const [hoverColIndex, onChangeHoverColIndex] = useState(-1)\\n\\n  const renderData = applyTransforms(\\n    { columns, dataSource: state.data },\\n    ...operationBar.transforms,\\n    commonTransforms.orderField(),\\n    commonTransforms.flatten(),\\n    commonTransforms.columnHover({\\n      hoverColIndex,\\n      onChangeHoverColIndex,\\n    }),\\n  )\\n\\n  return (\\n    <div>\\n      <FusionStyles />\\n      <operationBar.view>{operationBar.nodes}</operationBar.view>\\n      <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\\n    </div>\\n  )\\n\\n  function onExport() {\\n    return exportTableAsExcel(require('xlsx'), state.data, renderData.columns, 'export.xlsx')\\n  }\\n}\\n\",\"locationsMap\":{\"示例-表格操作栏示例--表格操作栏示例\":{\"startLoc\":{\"col\":7,\"line\":18},\"endLoc\":{\"col\":1,\"line\":153},\"startBody\":{\"col\":7,\"line\":18},\"endBody\":{\"col\":1,\"line\":153}}}},}, title: '示例 / 表格操作栏示例' }\n\nexport const 表格操作栏示例 = function 表格操作栏示例() {\n  // 例如 proto 创建若干列配置的「原型」，方便后续书写列配置\n  const groupProto = proto.array<ArtColumn>({\n    name: proto.string,\n    children: proto.array({\n      name: proto.string,\n      width: 150,\n      features: proto.object({ defaultVisible: true }),\n    }),\n  })\n\n  const appIndProto = proto.array<ArtColumn>({\n    width: 120,\n    align: 'right',\n    features: { defaultVisible: true, lfl: true },\n  })\n\n  const rateIndProto = proto.array<ArtColumn>({\n    width: 120,\n    align: 'right',\n    render: ratio,\n    features: { defaultVisible: true, lfl: true },\n  })\n\n  const cateFieldProto = proto.array<ArtColumn>({ width: 120 })\n\n  // 列配置\n  const columns: ArtColumn[] = groupProto([\n    {\n      name: '商品信息',\n      features: { flatten: true },\n      children: [\n        { code: 'order', name: '序号', width: 100, lock: true, features: { order: true, enforceVisible: true } },\n        { code: 'sku_code', name: 'SKU code' },\n        { code: 'sku_name', name: 'SKU名称' },\n      ],\n    },\n    {\n      name: '机构信息',\n      features: { flatten: true },\n      children: [\n        { code: 'city_name', name: '城市' },\n        { code: 'shop_name', name: '门店', features: { defaultVisible: true } },\n      ],\n    },\n    {\n      name: '类目信息',\n      children: cateFieldProto([\n        { code: 'merge_cate_level1_name', name: '一级类目' },\n        { code: 'merge_cate_level2_name', name: '二级类目' },\n        { code: 'merge_cate_level3_name', name: '三级类目' },\n      ]),\n    },\n    {\n      name: 'APP指标',\n      children: appIndProto([\n        { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio },\n        { code: 'app_trd_amt_1d', name: 'APP成交金额', render: amount },\n        { code: 'app_qty_pbt', name: 'APP件单价' },\n        { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总' },\n        { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数' },\n        { code: 'appout_shop_num', name: '缺货门店数', render: amount },\n        { code: 'all_time_len', name: '店均缺货时长', render: amount },\n        { code: 'bad_rmk_rate', name: '订单差评率', render: ratio },\n      ]),\n    },\n    {\n      name: '转换率',\n      children: rateIndProto([\n        { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率' },\n        { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率' },\n        { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率' },\n        { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率' },\n        { code: 'my_page_imp2pay_rate', name: '我的曝光至成交转化率' },\n        { code: 'pq_act_imp2pay_rate', name: '活动页曝光至成交转化率' },\n        { code: 'other_imp2pay_rate', name: '其他曝光至成交转化率' },\n      ]),\n    },\n  ])\n\n  // 自定义的 transform，为 features.lfl 为 true 的列添加对应的 环比列\n  function transformLfl(showLfl: boolean) {\n    return transformColumn((col) => {\n      if (showLfl && col.features?.lfl) {\n        return [col, { ...col, name: '环比', render: (value) => `lfl_of_${value}` }]\n      }\n      return col\n    })\n  }\n\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\n\n  useEffect(() => {\n    getAppTrafficData().then((data) => {\n      setState({ isLoading: false, data: data.slice(0, 8) })\n    })\n  }, [])\n\n  const operationBar = useOperationBar({\n    actionColor: '#5e85f7',\n    features: [\n      { type: 'toggle', key: 'lfl', title: '展示环比', transform: transformLfl },\n      { type: 'separator' },\n      { type: 'export', onExport },\n      { type: 'custom-columns' },\n      { type: 'custom', node: `共 ${state.isLoading ? '-' : state.data.length} 条数据` },\n    ],\n    components: fusion,\n    columns,\n  })\n\n  const [hoverColIndex, onChangeHoverColIndex] = useState(-1)\n\n  const renderData = applyTransforms(\n    { columns, dataSource: state.data },\n    ...operationBar.transforms,\n    commonTransforms.orderField(),\n    commonTransforms.flatten(),\n    commonTransforms.columnHover({\n      hoverColIndex,\n      onChangeHoverColIndex,\n    }),\n  )\n\n  return (\n    <div>\n      <FusionStyles />\n      <operationBar.view>{operationBar.nodes}</operationBar.view>\n      <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\n    </div>\n  )\n\n  function onExport() {\n    return exportTableAsExcel(require('xlsx'), state.data, renderData.columns, 'export.xlsx')\n  }\n};",locationsMap:{"示例-表格操作栏示例--表格操作栏示例":{startLoc:{col:23,line:26},endLoc:{col:1,line:161},startBody:{col:23,line:26},endBody:{col:1,line:161}}}},storySource:{source:"import * as fusion from '@alifd/next'\nimport { ArtColumn, BaseTable } from 'ali-react-table'\nimport {\n  applyTransforms,\n  commonTransforms,\n  exportTableAsExcel,\n  proto,\n  transformColumn,\n  useOperationBar,\n} from 'ali-react-table/biz'\nimport React, { useEffect, useState } from 'react'\nimport { getAppTrafficData } from '../assets/cdn-data'\nimport { amount, ratio } from '../assets/format'\nimport { FusionStyles } from '../assets/fusion-style'\n\nexport default { title: '示例 / 表格操作栏示例' }\n\nexport function 表格操作栏示例() {\n  // 例如 proto 创建若干列配置的「原型」，方便后续书写列配置\n  const groupProto = proto.array<ArtColumn>({\n    name: proto.string,\n    children: proto.array({\n      name: proto.string,\n      width: 150,\n      features: proto.object({ defaultVisible: true }),\n    }),\n  })\n\n  const appIndProto = proto.array<ArtColumn>({\n    width: 120,\n    align: 'right',\n    features: { defaultVisible: true, lfl: true },\n  })\n\n  const rateIndProto = proto.array<ArtColumn>({\n    width: 120,\n    align: 'right',\n    render: ratio,\n    features: { defaultVisible: true, lfl: true },\n  })\n\n  const cateFieldProto = proto.array<ArtColumn>({ width: 120 })\n\n  // 列配置\n  const columns: ArtColumn[] = groupProto([\n    {\n      name: '商品信息',\n      features: { flatten: true },\n      children: [\n        { code: 'order', name: '序号', width: 100, lock: true, features: { order: true, enforceVisible: true } },\n        { code: 'sku_code', name: 'SKU code' },\n        { code: 'sku_name', name: 'SKU名称' },\n      ],\n    },\n    {\n      name: '机构信息',\n      features: { flatten: true },\n      children: [\n        { code: 'city_name', name: '城市' },\n        { code: 'shop_name', name: '门店', features: { defaultVisible: true } },\n      ],\n    },\n    {\n      name: '类目信息',\n      children: cateFieldProto([\n        { code: 'merge_cate_level1_name', name: '一级类目' },\n        { code: 'merge_cate_level2_name', name: '二级类目' },\n        { code: 'merge_cate_level3_name', name: '三级类目' },\n      ]),\n    },\n    {\n      name: 'APP指标',\n      children: appIndProto([\n        { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio },\n        { code: 'app_trd_amt_1d', name: 'APP成交金额', render: amount },\n        { code: 'app_qty_pbt', name: 'APP件单价' },\n        { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总' },\n        { code: 'app_trd_usr_cnt_1d', name: 'APP成交用户数' },\n        { code: 'appout_shop_num', name: '缺货门店数', render: amount },\n        { code: 'all_time_len', name: '店均缺货时长', render: amount },\n        { code: 'bad_rmk_rate', name: '订单差评率', render: ratio },\n      ]),\n    },\n    {\n      name: '转换率',\n      children: rateIndProto([\n        { code: 'all_imp2pay_rate', name: '整体曝光至成交转化率' },\n        { code: 'search_imp2pay_rate', name: '搜索曝光至成交转化率' },\n        { code: 'classis_imp2pay_rate', name: '分类曝光至成交转化率' },\n        { code: 'cart_imp2pay_rate', name: '购物车曝光至成交转化率' },\n        { code: 'my_page_imp2pay_rate', name: '我的曝光至成交转化率' },\n        { code: 'pq_act_imp2pay_rate', name: '活动页曝光至成交转化率' },\n        { code: 'other_imp2pay_rate', name: '其他曝光至成交转化率' },\n      ]),\n    },\n  ])\n\n  // 自定义的 transform，为 features.lfl 为 true 的列添加对应的 环比列\n  function transformLfl(showLfl: boolean) {\n    return transformColumn((col) => {\n      if (showLfl && col.features?.lfl) {\n        return [col, { ...col, name: '环比', render: (value) => `lfl_of_${value}` }]\n      }\n      return col\n    })\n  }\n\n  const [state, setState] = useState({ isLoading: true, data: [] as any[] })\n\n  useEffect(() => {\n    getAppTrafficData().then((data) => {\n      setState({ isLoading: false, data: data.slice(0, 8) })\n    })\n  }, [])\n\n  const operationBar = useOperationBar({\n    actionColor: '#5e85f7',\n    features: [\n      { type: 'toggle', key: 'lfl', title: '展示环比', transform: transformLfl },\n      { type: 'separator' },\n      { type: 'export', onExport },\n      { type: 'custom-columns' },\n      { type: 'custom', node: `共 ${state.isLoading ? '-' : state.data.length} 条数据` },\n    ],\n    components: fusion,\n    columns,\n  })\n\n  const [hoverColIndex, onChangeHoverColIndex] = useState(-1)\n\n  const renderData = applyTransforms(\n    { columns, dataSource: state.data },\n    ...operationBar.transforms,\n    commonTransforms.orderField(),\n    commonTransforms.flatten(),\n    commonTransforms.columnHover({\n      hoverColIndex,\n      onChangeHoverColIndex,\n    }),\n  )\n\n  return (\n    <div>\n      <FusionStyles />\n      <operationBar.view>{operationBar.nodes}</operationBar.view>\n      <BaseTable dataSource={renderData.dataSource} columns={renderData.columns} isLoading={state.isLoading} />\n    </div>\n  )\n\n  function onExport() {\n    return exportTableAsExcel(require('xlsx'), state.data, renderData.columns, 'export.xlsx')\n  }\n}\n",locationsMap:{"示例-表格操作栏示例--表格操作栏示例":{startLoc:{col:7,line:18},endLoc:{col:1,line:153},startBody:{col:7,line:18},endBody:{col:1,line:153}}}}},title:"示例 / 表格操作栏示例"};const 表格操作栏示例=function 表格操作栏示例(){const groupProto=ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__.a.array({name:ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__.a.string,children:ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__.a.array({name:ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__.a.string,width:150,features:ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__.a.object({defaultVisible:!0})})}),appIndProto=ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__.a.array({width:120,align:"right",features:{defaultVisible:!0,lfl:!0}}),rateIndProto=ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__.a.array({width:120,align:"right",render:_assets_format__WEBPACK_IMPORTED_MODULE_10__.c,features:{defaultVisible:!0,lfl:!0}}),columns=groupProto([{name:"商品信息",features:{flatten:!0},children:[{code:"order",name:"序号",width:100,lock:!0,features:{order:!0,enforceVisible:!0}},{code:"sku_code",name:"SKU code"},{code:"sku_name",name:"SKU名称"}]},{name:"机构信息",features:{flatten:!0},children:[{code:"city_name",name:"城市"},{code:"shop_name",name:"门店",features:{defaultVisible:!0}}]},{name:"类目信息",children:ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__.a.array({width:120})([{code:"merge_cate_level1_name",name:"一级类目"},{code:"merge_cate_level2_name",name:"二级类目"},{code:"merge_cate_level3_name",name:"三级类目"}])},{name:"APP指标",children:appIndProto([{code:"imp_uv_dau_pct",name:"曝光UV占DAU比例",render:_assets_format__WEBPACK_IMPORTED_MODULE_10__.c},{code:"app_trd_amt_1d",name:"APP成交金额",render:_assets_format__WEBPACK_IMPORTED_MODULE_10__.a},{code:"app_qty_pbt",name:"APP件单价"},{code:"all_app_trd_amt_1d",name:"APP成交金额汇总"},{code:"app_trd_usr_cnt_1d",name:"APP成交用户数"},{code:"appout_shop_num",name:"缺货门店数",render:_assets_format__WEBPACK_IMPORTED_MODULE_10__.a},{code:"all_time_len",name:"店均缺货时长",render:_assets_format__WEBPACK_IMPORTED_MODULE_10__.a},{code:"bad_rmk_rate",name:"订单差评率",render:_assets_format__WEBPACK_IMPORTED_MODULE_10__.c}])},{name:"转换率",children:rateIndProto([{code:"all_imp2pay_rate",name:"整体曝光至成交转化率"},{code:"search_imp2pay_rate",name:"搜索曝光至成交转化率"},{code:"classis_imp2pay_rate",name:"分类曝光至成交转化率"},{code:"cart_imp2pay_rate",name:"购物车曝光至成交转化率"},{code:"my_page_imp2pay_rate",name:"我的曝光至成交转化率"},{code:"pq_act_imp2pay_rate",name:"活动页曝光至成交转化率"},{code:"other_imp2pay_rate",name:"其他曝光至成交转化率"}])}]);const[state,setState]=Object(react__WEBPACK_IMPORTED_MODULE_8__.useState)({isLoading:!0,data:[]});Object(react__WEBPACK_IMPORTED_MODULE_8__.useEffect)(()=>{Object(_assets_cdn_data__WEBPACK_IMPORTED_MODULE_9__.a)().then(data=>{setState({isLoading:!1,data:data.slice(0,8)})})},[]);const operationBar=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_4__.a)({actionColor:"#5e85f7",features:[{type:"toggle",key:"lfl",title:"展示环比",transform:function transformLfl(showLfl){return Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_3__.a)(col=>{var _a;return showLfl&&(null===(_a=col.features)||void 0===_a?void 0:_a.lfl)?[col,{...col,name:"环比",render:value=>"lfl_of_"+value}]:col})}},{type:"separator"},{type:"export",onExport:function onExport(){return Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_7__.a)(__webpack_require__(484),state.data,renderData.columns,"export.xlsx")}},{type:"custom-columns"},{type:"custom",node:`共 ${state.isLoading?"-":state.data.length} 条数据`}],components:_alifd_next__WEBPACK_IMPORTED_MODULE_0__,columns:columns}),[hoverColIndex,onChangeHoverColIndex]=Object(react__WEBPACK_IMPORTED_MODULE_8__.useState)(-1),renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_5__.a)({columns:columns,dataSource:state.data},...operationBar.transforms,ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a.orderField(),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a.flatten(),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_6__.a.columnHover({hoverColIndex:hoverColIndex,onChangeHoverColIndex:onChangeHoverColIndex}));return react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement(_assets_fusion_style__WEBPACK_IMPORTED_MODULE_11__.a,null),react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement(operationBar.view,null,operationBar.nodes),react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement(ali_react_table__WEBPACK_IMPORTED_MODULE_1__.a,{dataSource:renderData.dataSource,columns:renderData.columns,isLoading:state.isLoading}))}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"TreeTableWithLastOpenMark",(function(){return TreeTableWithLastOpenMark}));var ali_react_table__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(32),ali_react_table__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(21),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(61),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(50),react__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__),styled_components__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(29),_assets_cdn_data__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(63),_assets_format__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(17);__webpack_exports__.default={parameters:{storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import { ArtColumn, BaseTable, Classes } from 'ali-react-table'\\nimport { applyTransforms, commonTransforms } from 'ali-react-table/biz'\\nimport React, { useEffect, useState } from 'react'\\nimport styled from 'styled-components'\\nimport { getAppTrafficData } from '../assets/cdn-data'\\nimport { ratio } from '../assets/format'\\n\\nexport default { title: '示例 / 树状表格中的最近展开标记' }\\n\\nconst StyledBaseTable = styled(BaseTable)`\\n  .${Classes.tableRow}.last-open {\\n    background: rgba(128, 243, 87, 0.32);\\n\\n    .expansion-icon {\\n      fill: #4de247;\\n    }\\n  }\\n\\n  .${Classes.tableRow}.last-collapse {\\n    background: rgba(253, 32, 32, 0.32);\\n\\n    .expansion-icon {\\n      fill: #e54950;\\n    }\\n  }\\n`\\n\\nexport function TreeTableWithLastOpenMark() {\\n  const columns: ArtColumn[] = [\\n    { code: 'name', name: '数据维度', lock: true, width: 200 },\\n    { code: 'shop_name', name: '门店' },\\n    { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio, align: 'right' },\\n    { code: 'app_qty_pbt', name: 'APP件单价', align: 'right' },\\n    { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总', align: 'right' },\\n  ]\\n\\n  const [state, setState] = useState({\\n    isLoading: true,\\n    data: [] as any[],\\n    lastOpenKey: '',\\n    lastCollapseKey: '',\\n  })\\n\\n  useEffect(() => {\\n    getAppTrafficData().then((data) => {\\n      setState({ isLoading: false, data, lastOpenKey: '', lastCollapseKey: '' })\\n    })\\n  }, [])\\n\\n  const [openKeys, onChangeOpenKeys] = useState([])\\n\\n  // 注意 renderData 要用起来\\n  const renderData = applyTransforms(\\n    { columns: columns, dataSource: state.data },\\n\\n    // 从平铺的数据中，根据 id/parent_id 字段构建出树状结构\\n    commonTransforms.buildTree('id', 'parent_id'),\\n\\n    commonTransforms.treeMode({\\n      primaryKey: 'id',\\n      openKeys,\\n      onChangeOpenKeys(nextKeys, key, action) {\\n        onChangeOpenKeys(nextKeys)\\n        if (action === 'expand') {\\n          setState({ ...state, lastOpenKey: key, lastCollapseKey: '' })\\n        } else {\\n          setState({ ...state, lastOpenKey: '', lastCollapseKey: key })\\n        }\\n      },\\n    }),\\n  )\\n\\n  return (\\n    <StyledBaseTable\\n      dataSource={renderData.dataSource}\\n      columns={renderData.columns}\\n      isLoading={state.isLoading}\\n      getRowProps={(record) => {\\n        if (record.id === state.lastOpenKey) {\\n          return { className: 'last-open' }\\n        } else if (record.id === state.lastCollapseKey) {\\n          return { className: 'last-collapse' }\\n        }\\n      }}\\n    />\\n  )\\n}\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"示例-树状表格中的最近展开标记--tree-table-with-last-open-mark\":{\"startLoc\":{\"col\":7,\"line\":28},\"endLoc\":{\"col\":1,\"line\":87},\"startBody\":{\"col\":7,\"line\":28},\"endBody\":{\"col\":1,\"line\":87}}};\n    \nimport { ArtColumn, BaseTable, Classes } from 'ali-react-table'\nimport { applyTransforms, commonTransforms } from 'ali-react-table/biz'\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { getAppTrafficData } from '../assets/cdn-data'\nimport { ratio } from '../assets/format'\n\nexport default {parameters: {\"storySource\":{\"source\":\"import { ArtColumn, BaseTable, Classes } from 'ali-react-table'\\nimport { applyTransforms, commonTransforms } from 'ali-react-table/biz'\\nimport React, { useEffect, useState } from 'react'\\nimport styled from 'styled-components'\\nimport { getAppTrafficData } from '../assets/cdn-data'\\nimport { ratio } from '../assets/format'\\n\\nexport default { title: '示例 / 树状表格中的最近展开标记' }\\n\\nconst StyledBaseTable = styled(BaseTable)`\\n  .${Classes.tableRow}.last-open {\\n    background: rgba(128, 243, 87, 0.32);\\n\\n    .expansion-icon {\\n      fill: #4de247;\\n    }\\n  }\\n\\n  .${Classes.tableRow}.last-collapse {\\n    background: rgba(253, 32, 32, 0.32);\\n\\n    .expansion-icon {\\n      fill: #e54950;\\n    }\\n  }\\n`\\n\\nexport function TreeTableWithLastOpenMark() {\\n  const columns: ArtColumn[] = [\\n    { code: 'name', name: '数据维度', lock: true, width: 200 },\\n    { code: 'shop_name', name: '门店' },\\n    { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio, align: 'right' },\\n    { code: 'app_qty_pbt', name: 'APP件单价', align: 'right' },\\n    { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总', align: 'right' },\\n  ]\\n\\n  const [state, setState] = useState({\\n    isLoading: true,\\n    data: [] as any[],\\n    lastOpenKey: '',\\n    lastCollapseKey: '',\\n  })\\n\\n  useEffect(() => {\\n    getAppTrafficData().then((data) => {\\n      setState({ isLoading: false, data, lastOpenKey: '', lastCollapseKey: '' })\\n    })\\n  }, [])\\n\\n  const [openKeys, onChangeOpenKeys] = useState([])\\n\\n  // 注意 renderData 要用起来\\n  const renderData = applyTransforms(\\n    { columns: columns, dataSource: state.data },\\n\\n    // 从平铺的数据中，根据 id/parent_id 字段构建出树状结构\\n    commonTransforms.buildTree('id', 'parent_id'),\\n\\n    commonTransforms.treeMode({\\n      primaryKey: 'id',\\n      openKeys,\\n      onChangeOpenKeys(nextKeys, key, action) {\\n        onChangeOpenKeys(nextKeys)\\n        if (action === 'expand') {\\n          setState({ ...state, lastOpenKey: key, lastCollapseKey: '' })\\n        } else {\\n          setState({ ...state, lastOpenKey: '', lastCollapseKey: key })\\n        }\\n      },\\n    }),\\n  )\\n\\n  return (\\n    <StyledBaseTable\\n      dataSource={renderData.dataSource}\\n      columns={renderData.columns}\\n      isLoading={state.isLoading}\\n      getRowProps={(record) => {\\n        if (record.id === state.lastOpenKey) {\\n          return { className: 'last-open' }\\n        } else if (record.id === state.lastCollapseKey) {\\n          return { className: 'last-collapse' }\\n        }\\n      }}\\n    />\\n  )\\n}\\n\",\"locationsMap\":{\"示例-树状表格中的最近展开标记--tree-table-with-last-open-mark\":{\"startLoc\":{\"col\":7,\"line\":28},\"endLoc\":{\"col\":1,\"line\":87},\"startBody\":{\"col\":7,\"line\":28},\"endBody\":{\"col\":1,\"line\":87}}}},}, title: '示例 / 树状表格中的最近展开标记' }\n\nconst StyledBaseTable = styled(BaseTable)`\n  .${Classes.tableRow}.last-open {\n    background: rgba(128, 243, 87, 0.32);\n\n    .expansion-icon {\n      fill: #4de247;\n    }\n  }\n\n  .${Classes.tableRow}.last-collapse {\n    background: rgba(253, 32, 32, 0.32);\n\n    .expansion-icon {\n      fill: #e54950;\n    }\n  }\n`\n\nexport const TreeTableWithLastOpenMark = function TreeTableWithLastOpenMark() {\n  const columns: ArtColumn[] = [\n    { code: 'name', name: '数据维度', lock: true, width: 200 },\n    { code: 'shop_name', name: '门店' },\n    { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio, align: 'right' },\n    { code: 'app_qty_pbt', name: 'APP件单价', align: 'right' },\n    { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总', align: 'right' },\n  ]\n\n  const [state, setState] = useState({\n    isLoading: true,\n    data: [] as any[],\n    lastOpenKey: '',\n    lastCollapseKey: '',\n  })\n\n  useEffect(() => {\n    getAppTrafficData().then((data) => {\n      setState({ isLoading: false, data, lastOpenKey: '', lastCollapseKey: '' })\n    })\n  }, [])\n\n  const [openKeys, onChangeOpenKeys] = useState([])\n\n  // 注意 renderData 要用起来\n  const renderData = applyTransforms(\n    { columns: columns, dataSource: state.data },\n\n    // 从平铺的数据中，根据 id/parent_id 字段构建出树状结构\n    commonTransforms.buildTree('id', 'parent_id'),\n\n    commonTransforms.treeMode({\n      primaryKey: 'id',\n      openKeys,\n      onChangeOpenKeys(nextKeys, key, action) {\n        onChangeOpenKeys(nextKeys)\n        if (action === 'expand') {\n          setState({ ...state, lastOpenKey: key, lastCollapseKey: '' })\n        } else {\n          setState({ ...state, lastOpenKey: '', lastCollapseKey: key })\n        }\n      },\n    }),\n  )\n\n  return (\n    <StyledBaseTable\n      dataSource={renderData.dataSource}\n      columns={renderData.columns}\n      isLoading={state.isLoading}\n      getRowProps={(record) => {\n        if (record.id === state.lastOpenKey) {\n          return { className: 'last-open' }\n        } else if (record.id === state.lastCollapseKey) {\n          return { className: 'last-collapse' }\n        }\n      }}\n    />\n  )\n};",locationsMap:{"示例-树状表格中的最近展开标记--tree-table-with-last-open-mark":{startLoc:{col:41,line:36},endLoc:{col:1,line:95},startBody:{col:41,line:36},endBody:{col:1,line:95}}}},storySource:{source:"import { ArtColumn, BaseTable, Classes } from 'ali-react-table'\nimport { applyTransforms, commonTransforms } from 'ali-react-table/biz'\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { getAppTrafficData } from '../assets/cdn-data'\nimport { ratio } from '../assets/format'\n\nexport default { title: '示例 / 树状表格中的最近展开标记' }\n\nconst StyledBaseTable = styled(BaseTable)`\n  .${Classes.tableRow}.last-open {\n    background: rgba(128, 243, 87, 0.32);\n\n    .expansion-icon {\n      fill: #4de247;\n    }\n  }\n\n  .${Classes.tableRow}.last-collapse {\n    background: rgba(253, 32, 32, 0.32);\n\n    .expansion-icon {\n      fill: #e54950;\n    }\n  }\n`\n\nexport function TreeTableWithLastOpenMark() {\n  const columns: ArtColumn[] = [\n    { code: 'name', name: '数据维度', lock: true, width: 200 },\n    { code: 'shop_name', name: '门店' },\n    { code: 'imp_uv_dau_pct', name: '曝光UV占DAU比例', render: ratio, align: 'right' },\n    { code: 'app_qty_pbt', name: 'APP件单价', align: 'right' },\n    { code: 'all_app_trd_amt_1d', name: 'APP成交金额汇总', align: 'right' },\n  ]\n\n  const [state, setState] = useState({\n    isLoading: true,\n    data: [] as any[],\n    lastOpenKey: '',\n    lastCollapseKey: '',\n  })\n\n  useEffect(() => {\n    getAppTrafficData().then((data) => {\n      setState({ isLoading: false, data, lastOpenKey: '', lastCollapseKey: '' })\n    })\n  }, [])\n\n  const [openKeys, onChangeOpenKeys] = useState([])\n\n  // 注意 renderData 要用起来\n  const renderData = applyTransforms(\n    { columns: columns, dataSource: state.data },\n\n    // 从平铺的数据中，根据 id/parent_id 字段构建出树状结构\n    commonTransforms.buildTree('id', 'parent_id'),\n\n    commonTransforms.treeMode({\n      primaryKey: 'id',\n      openKeys,\n      onChangeOpenKeys(nextKeys, key, action) {\n        onChangeOpenKeys(nextKeys)\n        if (action === 'expand') {\n          setState({ ...state, lastOpenKey: key, lastCollapseKey: '' })\n        } else {\n          setState({ ...state, lastOpenKey: '', lastCollapseKey: key })\n        }\n      },\n    }),\n  )\n\n  return (\n    <StyledBaseTable\n      dataSource={renderData.dataSource}\n      columns={renderData.columns}\n      isLoading={state.isLoading}\n      getRowProps={(record) => {\n        if (record.id === state.lastOpenKey) {\n          return { className: 'last-open' }\n        } else if (record.id === state.lastCollapseKey) {\n          return { className: 'last-collapse' }\n        }\n      }}\n    />\n  )\n}\n",locationsMap:{"示例-树状表格中的最近展开标记--tree-table-with-last-open-mark":{startLoc:{col:7,line:28},endLoc:{col:1,line:87},startBody:{col:7,line:28},endBody:{col:1,line:87}}}}},title:"示例 / 树状表格中的最近展开标记"};const StyledBaseTable=Object(styled_components__WEBPACK_IMPORTED_MODULE_5__.b)(ali_react_table__WEBPACK_IMPORTED_MODULE_0__.a)`
  .${ali_react_table__WEBPACK_IMPORTED_MODULE_1__.a.tableRow}.last-open {
    background: rgba(128, 243, 87, 0.32);

    .expansion-icon {
      fill: #4de247;
    }
  }

  .${ali_react_table__WEBPACK_IMPORTED_MODULE_1__.a.tableRow}.last-collapse {
    background: rgba(253, 32, 32, 0.32);

    .expansion-icon {
      fill: #e54950;
    }
  }
`,TreeTableWithLastOpenMark=function TreeTableWithLastOpenMark(){const columns=[{code:"name",name:"数据维度",lock:!0,width:200},{code:"shop_name",name:"门店"},{code:"imp_uv_dau_pct",name:"曝光UV占DAU比例",render:_assets_format__WEBPACK_IMPORTED_MODULE_7__.c,align:"right"},{code:"app_qty_pbt",name:"APP件单价",align:"right"},{code:"all_app_trd_amt_1d",name:"APP成交金额汇总",align:"right"}],[state,setState]=Object(react__WEBPACK_IMPORTED_MODULE_4__.useState)({isLoading:!0,data:[],lastOpenKey:"",lastCollapseKey:""});Object(react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{Object(_assets_cdn_data__WEBPACK_IMPORTED_MODULE_6__.a)().then(data=>{setState({isLoading:!1,data:data,lastOpenKey:"",lastCollapseKey:""})})},[]);const[openKeys,onChangeOpenKeys]=Object(react__WEBPACK_IMPORTED_MODULE_4__.useState)([]),renderData=Object(ali_react_table_biz__WEBPACK_IMPORTED_MODULE_2__.a)({columns:columns,dataSource:state.data},ali_react_table_biz__WEBPACK_IMPORTED_MODULE_3__.a.buildTree("id","parent_id"),ali_react_table_biz__WEBPACK_IMPORTED_MODULE_3__.a.treeMode({primaryKey:"id",openKeys:openKeys,onChangeOpenKeys(nextKeys,key,action){onChangeOpenKeys(nextKeys),setState("expand"===action?{...state,lastOpenKey:key,lastCollapseKey:""}:{...state,lastOpenKey:"",lastCollapseKey:key})}}));return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(StyledBaseTable,{dataSource:renderData.dataSource,columns:renderData.columns,isLoading:state.isLoading,getRowProps:record=>record.id===state.lastOpenKey?{className:"last-open"}:record.id===state.lastCollapseKey?{className:"last-collapse"}:void 0})}},,function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"基本示例",(function(){return drillable_tree_table_stories_}));var cross_tree_table=__webpack_require__(911),lodashfrom_dll_reference_storybook_docs_dll=__webpack_require__(78),lodashfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(lodashfrom_dll_reference_storybook_docs_dll),mobx_module=__webpack_require__(28),mobxreact_esm=__webpack_require__(506),delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),cdn_data=__webpack_require__(63),format=__webpack_require__(17),fusion_style=__webpack_require__(66),overlay=__webpack_require__(35),input=__webpack_require__(36),es_checkbox=__webpack_require__(77),es_button=__webpack_require__(24),dialog=__webpack_require__(494),es=__webpack_require__(53),classnames=__webpack_require__(8),classnames_default=__webpack_require__.n(classnames),immer_esm=__webpack_require__(278),react_beautiful_dnd_esm=__webpack_require__(129),styled_components_browser_esm=__webpack_require__(29);const PopupDiv=styled_components_browser_esm.b.div`
  padding: 12px;
  width: 350px;
  min-height: 200px;
  max-height: 400px;
  overflow: hidden;
  background: white;
  border: 1px solid #ccc;
  display: flex;
  flex-flow: column;
`,ValueList=styled_components_browser_esm.b.ol`
  margin: 8px 0;

  > li {
    height: 24px;
    display: flex;
    align-items: center;
  }
`,CheckedDimListDiv=styled_components_browser_esm.b.div`
  font-size: 14px;

  .tag-list {
    display: flex;
    user-select: none;
    margin-left: -8px;
  }

  .tag {
    padding: 4px 8px;
    border-radius: 3px;
    background: #eee;
    margin-left: 8px;
    display: flex;
    align-items: center;

    &.active {
      background: #5484ff;
      color: #fefeff;
    }
    &.empty {
      background: #eb4626;
    }

    .filter-icon {
      cursor: pointer;
      margin-left: 4px;
      fill: currentColor;
    }
  }
`;function CheckedDimList({style:style,className:className,pivot:pivot}){const dimMap=new Map(pivot.allDimensions.map(dim=>[dim.code,dim]));return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(CheckedDimListDiv,{style:style,className:className},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(react_beautiful_dnd_esm.a,{onDragEnd:result=>{if(!result.destination)return;const i=result.source.index,j=result.destination.index,nextCodes=pivot.dimCodes.slice(),[code]=nextCodes.splice(i,1);nextCodes.splice(j,0,code),pivot.changeDimCodes(nextCodes)}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(react_beautiful_dnd_esm.c,{droppableId:"dimension-list",direction:"horizontal"},(dropProvided,snapshot)=>delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"tag-list",ref:dropProvided.innerRef},pivot.dimCodes.map((dimCode,index)=>{const allValues=pivot.dimValues[dimCode],values=pivot.filters[dimCode];return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(react_beautiful_dnd_esm.b,{key:dimCode,draggableId:dimCode,index:index},(dragProvided,snapshot)=>delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(overlay.a.Popup,{key:dimCode,trigger:delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",Object.assign({key:dimCode,ref:dragProvided.innerRef},dragProvided.draggableProps,dragProvided.dragHandleProps,{className:classnames_default()("tag",{active:values.length<allValues.length,empty:allValues.length>0&&0===values.length})}),dimMap.get(dimCode).name,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(es.g,{className:"filter-icon"})),triggerType:"click"},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(CheckedDimFilterPopup,{pivot:pivot,allValues:allValues,values:values,dimCode:dimCode})))}),dropProvided.placeholder))))}function CheckedDimFilterPopup({allValues:allValues,values:values,pivot:pivot,dimCode:dimCode}){const set=new Set(values),[rawSearch,setRawSearch]=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(""),search=rawSearch.trim(),filtered=allValues.map(value=>{if(""===search)return{value:value,title:value};const i=value.indexOf(search);return-1===i?null:{value:value,title:delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",null,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",null,value.slice(0,i)),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{style:{color:"blue"}},search),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",null,value.slice(i+search.length)))}}).filter(Boolean);return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(PopupDiv,null,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",null,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(input.a,{placeholder:"搜索",style:{width:"100%"},hasClear:!0,value:rawSearch,onChange:setRawSearch})),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{overflow:"auto"}},allValues.length>0&&0===filtered.length&&delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{margin:16,textAlign:"center"}},"没有符合查询条件的数据"),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(ValueList,null,filtered.map(({value:value,title:title})=>delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("li",{key:value},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(es_checkbox.a,{checked:set.has(value),onChange:checked=>pivot.filter(dimCode,value,checked)},title))))),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{marginTop:"auto",textAlign:"center"}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(es_button.a,{size:"small",onClick:()=>{pivot.batchFilter(dimCode,filtered.map(v=>v.value),!0)}},search?"添加到选中":"全选"),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(es_button.a,{size:"small",style:{marginLeft:8},onClick:()=>{pivot.batchFilter(dimCode,filtered.map(v=>v.value),!1)}},search?"从选中中移除":"全不选")))}const IndicatorChooseDiv=styled_components_browser_esm.b.div`
  --border-color: #edeff2;

  display: flex;
  border: 1px solid var(--border-color);
`,IndicatorsPartDiv=styled_components_browser_esm.b.div`
  width: 300px;

  .title {
    background: #eaedf2;
    color: #7f8a9c;
    padding-left: 8px;
    height: 32px;
    line-height: 32px;
  }

  .ind-list {
    height: 300px;
    overflow: auto;

    > li {
      height: 28px;
      display: flex;
      align-items: center;
    }

    .ind-item {
      padding: 0 8px;
      flex: 1 0 auto;
      height: 100%;
      display: flex;
      align-items: center;
    }

    .clickable-ind-item {
      cursor: pointer;
    }

    .draggable-ind-item {
      border-bottom: 1px solid var(--border-color);
      background: white;
      transition: box-shadow 300ms;

      &.dragging {
        border: 1px solid var(--border-color);
        box-shadow: #adadad54 0 0 5px 0.5px;
      }
    }
  }
`;function PrimaryColumnTitle({pivot:pivot}){const[visible,setVisible]=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(!1),onClose=()=>setVisible(!1),[state,setState]=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(()=>Object(mobx_module.q)(pivot));Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)(()=>{visible&&setState(Object(mobx_module.q)(pivot))},[visible]);const dimMap=new Map(pivot.allDimensions.map(dim=>[dim.code,dim]));return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)(()=>{},[visible]),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{display:"flex",alignItems:"center"}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("b",null,"数据维度"),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{style:{marginLeft:"auto",display:"flex",alignItems:"center",cursor:"pointer",userSelect:"none"},onClick:()=>setVisible(!0)},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(es.s,{style:{fill:"currentColor"}}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("span",{style:{marginLeft:4}},"设置"),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(dialog.a,{closeable:!1,title:"数据维度配置",visible:visible,onOk:()=>{pivot.changeDimCodes(state.dimCodes,pivot.dimValues),onClose()},onCancel:onClose},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(IndicatorChooseDiv,null,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(IndicatorsPartDiv,null,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"title"},"选择维度（",state.dimCodes.length,"/",pivot.allDimensions.length,"）"),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("ul",{className:"ind-list"},pivot.allDimensions.map(dim=>delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("li",{key:dim.code},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(es_checkbox.a,{className:"ind-item clickable-ind-item",checked:state.dimCodes.includes(dim.code),onChange:checked=>{setState(prev=>Object(immer_esm.a)(prev,draft=>{checked?draft.dimCodes.push(dim.code):draft.dimCodes.splice(draft.dimCodes.indexOf(dim.code),1)}))}},dim.name))))),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(IndicatorsPartDiv,{style:{borderLeft:"1px solid var(--border-color)"}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:"title"},"已选（",state.dimCodes.length,"）"),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(react_beautiful_dnd_esm.a,{onDragEnd:result=>{null!=result.destination&&setState(prev=>Object(immer_esm.a)(prev,draft=>{const i=result.source.index,j=result.destination.index,[code]=draft.dimCodes.splice(i,1);draft.dimCodes.splice(j,0,code)}))}},delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(react_beautiful_dnd_esm.c,{droppableId:"selected-dimensions",direction:"vertical"},(dropProvided,snapshot)=>delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("ul",{className:"ind-list",ref:dropProvided.innerRef},state.dimCodes.map((dimCode,index)=>delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(react_beautiful_dnd_esm.b,{key:dimCode,index:index,draggableId:dimCode},(dragProvided,snapshot)=>delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("li",Object.assign({ref:dragProvided.innerRef},dragProvided.draggableProps),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",{className:classnames_default()("ind-item draggable-ind-item",{dragging:snapshot.isDragging})},dimMap.get(dimCode).name,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",Object.assign({},dragProvided.dragHandleProps,{style:{marginLeft:"auto"}}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(es.e,{style:{fill:"currentColor"}})))))),dropProvided.placeholder))))))))}try{CheckedDimList.displayName="CheckedDimList",CheckedDimList.__docgenInfo={description:"",displayName:"CheckedDimList",props:{pivot:{defaultValue:null,description:"",name:"pivot",required:!0,type:{name:"Pivot"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"any"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/examples/drill-tree-table/designers.tsx#CheckedDimList"]={docgenInfo:CheckedDimList.__docgenInfo,name:"CheckedDimList",path:"stories/examples/drill-tree-table/designers.tsx#CheckedDimList"})}catch(__react_docgen_typescript_loader_error){}try{PrimaryColumnTitle.displayName="PrimaryColumnTitle",PrimaryColumnTitle.__docgenInfo={description:"",displayName:"PrimaryColumnTitle",props:{pivot:{defaultValue:null,description:"",name:"pivot",required:!0,type:{name:"Pivot"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/examples/drill-tree-table/designers.tsx#PrimaryColumnTitle"]={docgenInfo:PrimaryColumnTitle.__docgenInfo,name:"PrimaryColumnTitle",path:"stories/examples/drill-tree-table/designers.tsx#PrimaryColumnTitle"})}catch(__react_docgen_typescript_loader_error){}var dvt_aggregation_esm=__webpack_require__(512),buildDrillTree=__webpack_require__(89),builders=__webpack_require__(220),__decorate=function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r};let models_Pivot=(()=>{class Pivot{constructor(input={}){this.isLoading=!0,this.data=[],this.allIndicators=[],this.allDimensions=[],Object.assign(this,input),null==this.indCodes&&(this.indCodes=this.allIndicators.map(ind=>ind.code)),null==this.filters&&(this.filters=Object.fromEntries(this.dimCodes.map(dimCode=>[dimCode,[]])))}get aggregate(){return console.log("create aggregate function!"),Object(dvt_aggregation_esm.a)(this.allIndicators)}get dimValues(){return Object.fromEntries(this.allDimensions.map(dim=>[dim.code,lodashfrom_dll_reference_storybook_docs_dll_default.a.uniq(this.data.map(d=>d[dim.code]))]))}get filteredData(){const checkedValuesMap=new Map(this.allDimensions.map(dim=>[dim.code,new Set(this.filters[dim.code])]));return this.data.filter(d=>this.allDimensions.every(dim=>checkedValuesMap.get(dim.code).has(d[dim.code])))}filter(dimCode,value,checked){if(checked)this.filters[dimCode].push(value);else{const values=this.filters[dimCode];values.splice(values.indexOf(value),1)}}changeDimCodes(dimCodes,filters){this.dimCodes=dimCodes,filters&&(this.filters=filters)}batchFilter(dimCode,values,checked){if(checked){const pre=this.filters[dimCode];this.filters[dimCode]=Array.from(new Set(pre.concat(values)))}else{const removeSet=new Set(values);this.filters[dimCode]=this.filters[dimCode].filter(v=>!removeSet.has(v))}}}return __decorate([mobx_module.n],Pivot.prototype,"isLoading",void 0),__decorate([mobx_module.n.ref],Pivot.prototype,"data",void 0),__decorate([mobx_module.n],Pivot.prototype,"dimCodes",void 0),__decorate([mobx_module.n],Pivot.prototype,"allIndicators",void 0),__decorate([mobx_module.n],Pivot.prototype,"allDimensions",void 0),__decorate([mobx_module.n],Pivot.prototype,"filters",void 0),__decorate([mobx_module.n],Pivot.prototype,"indCodes",void 0),__decorate([Object(mobx_module.g)({keepAlive:!0})],Pivot.prototype,"aggregate",null),__decorate([Object(mobx_module.g)({keepAlive:!0})],Pivot.prototype,"dimValues",null),__decorate([Object(mobx_module.g)({keepAlive:!0})],Pivot.prototype,"filteredData",null),__decorate([mobx_module.f],Pivot.prototype,"filter",null),__decorate([mobx_module.f],Pivot.prototype,"changeDimCodes",null),__decorate([mobx_module.f],Pivot.prototype,"batchFilter",null),Pivot})(),models_PivotView=(()=>{class PivotView{constructor(pivot){this.pivot=pivot}get leftTree(){const pivot=this.pivot;return Object(buildDrillTree.a)(pivot.filteredData,pivot.dimCodes,{includeTopWrapper:!0,enforceExpandTotalNode:!1})}get topTree(){return this.pivot.allIndicators.map(indicator=>({key:indicator.code,value:indicator.name,align:indicator.align,data:{indicator:indicator}}))}get recordMap(){const{pivot:pivot}=this;return Object(builders.a)({data:pivot.filteredData,codes:pivot.dimCodes,aggregate:pivot.aggregate})}}return __decorate([mobx_module.g],PivotView.prototype,"leftTree",null),__decorate([Object(mobx_module.g)({keepAlive:!0})],PivotView.prototype,"topTree",null),__decorate([Object(mobx_module.g)({keepAlive:!0})],PivotView.prototype,"recordMap",null),PivotView})();mobx_module.h({enforceActions:"observed"});__webpack_exports__.default={parameters:{storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import { CrossTreeTable } from 'ali-react-table/pivot'\\nimport _ from 'lodash'\\nimport * as mobx from 'mobx'\\nimport { action } from 'mobx'\\nimport { observer } from 'mobx-react'\\nimport React, { useEffect, useState } from 'react'\\nimport { getIncomeData } from '../../assets/cdn-data'\\nimport { amount, lfl, ratio } from '../../assets/format'\\nimport { FusionStyles } from '../../assets/fusion-style'\\nimport { CheckedDimList, PrimaryColumnTitle } from './designers'\\nimport { Pivot, PivotView } from './models'\\n\\nmobx.configure({ enforceActions: 'observed' })\\n\\nexport default { title: '示例 / 支持下钻的树状表格' }\\n\\nconst ALL_DIMS = [\\n  { code: 'planet', name: '子公司' },\\n  { code: 'season', name: '季度' },\\n  { code: 'month', name: '月份' },\\n  { code: 'area', name: '门店' },\\n  { code: 'one', name: '一级类目' },\\n  { code: 'two', name: '二级类目' },\\n  { code: 'three', name: '三级类目' },\\n]\\n\\nconst INDICATORS = [\\n  {\\n    code: 'a',\\n    name: '目标收入',\\n    align: 'right' as const,\\n    render: amount,\\n    features: { sortable: true },\\n    expression: 'SUM(a)',\\n  },\\n  {\\n    code: 'b',\\n    name: '实际收入',\\n    render: amount,\\n    align: 'right' as const,\\n    features: { sortable: true },\\n    expression: 'SUM(b)',\\n  },\\n  {\\n    code: 'c',\\n    name: '上月收入',\\n    render: amount,\\n    hidden: true,\\n    align: 'right' as const,\\n    features: { sortable: true },\\n    expression: 'SUM(c)',\\n  },\\n  {\\n    code: 'lfl',\\n    name: '收入月环比',\\n    render: lfl,\\n    align: 'right' as const,\\n    features: { sortable: true },\\n    expression: '(a - c) / a',\\n  },\\n  {\\n    code: 'd',\\n    name: '重点商品收入',\\n    render: amount,\\n    align: 'right' as const,\\n    features: { sortable: true },\\n    expression: 'SUM(d)',\\n  },\\n  {\\n    code: 'rate',\\n    name: '重点商品收入占比',\\n    render: ratio,\\n    align: 'right' as const,\\n    features: { sortable: true },\\n    expression: 'd / b',\\n  },\\n]\\n\\nconst Inner = observer(() => {\\n  const [pivot] = useState(() => {\\n    return new Pivot({\\n      allDimensions: ALL_DIMS,\\n      allIndicators: INDICATORS,\\n      dimCodes: ['planet', 'area', 'season'],\\n    })\\n  })\\n\\n  const [pivotView] = useState(() => new PivotView(pivot))\\n\\n  useEffect(() => {\\n    getIncomeData().then(\\n      action((data: any[]) => {\\n        pivot.data = data\\n        pivot.isLoading = false\\n        pivot.filters = Object.fromEntries(\\n          pivot.allDimensions.map((dim) => {\\n            return [dim.code, _.uniq(data.map((d) => d[dim.code]))]\\n          }),\\n        )\\n      }),\\n    )\\n  }, [])\\n\\n  return (\\n    <div>\\n      <FusionStyles />\\n      <CheckedDimList pivot={pivot} />\\n      <CrossTreeTable\\n        style={{ marginTop: 8 }}\\n        primaryColumn={{\\n          lock: true,\\n          name: '数据维度',\\n          width: 180,\\n          title: <PrimaryColumnTitle pivot={pivot} />,\\n        }}\\n        defaultColumnWidth={120}\\n        isLoading={pivot.isLoading}\\n        leftTree={pivotView.leftTree}\\n        topTree={pivotView.topTree}\\n        getValue={(leftNode, topNode) => {\\n          const record = pivotView.recordMap.get(leftNode.key)\\n          const ind = topNode.data.indicator\\n          return record?.[ind.code]\\n        }}\\n        render={(value, leftNode, topNode) => {\\n          const ind = topNode.data.indicator\\n          return ind.render ? ind.render(value) : value\\n        }}\\n      />\\n    </div>\\n  )\\n})\\n\\nexport function 基本示例() {\\n  return <Inner />\\n}\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"示例-支持下钻的树状表格--基本示例\":{\"startLoc\":{\"col\":7,\"line\":134},\"endLoc\":{\"col\":1,\"line\":136},\"startBody\":{\"col\":7,\"line\":134},\"endBody\":{\"col\":1,\"line\":136}}};\n    \nimport { CrossTreeTable } from 'ali-react-table/pivot'\nimport _ from 'lodash'\nimport * as mobx from 'mobx'\nimport { action } from 'mobx'\nimport { observer } from 'mobx-react'\nimport React, { useEffect, useState } from 'react'\nimport { getIncomeData } from '../../assets/cdn-data'\nimport { amount, lfl, ratio } from '../../assets/format'\nimport { FusionStyles } from '../../assets/fusion-style'\nimport { CheckedDimList, PrimaryColumnTitle } from './designers'\nimport { Pivot, PivotView } from './models'\n\nmobx.configure({ enforceActions: 'observed' })\n\nexport default {parameters: {\"storySource\":{\"source\":\"import { CrossTreeTable } from 'ali-react-table/pivot'\\nimport _ from 'lodash'\\nimport * as mobx from 'mobx'\\nimport { action } from 'mobx'\\nimport { observer } from 'mobx-react'\\nimport React, { useEffect, useState } from 'react'\\nimport { getIncomeData } from '../../assets/cdn-data'\\nimport { amount, lfl, ratio } from '../../assets/format'\\nimport { FusionStyles } from '../../assets/fusion-style'\\nimport { CheckedDimList, PrimaryColumnTitle } from './designers'\\nimport { Pivot, PivotView } from './models'\\n\\nmobx.configure({ enforceActions: 'observed' })\\n\\nexport default { title: '示例 / 支持下钻的树状表格' }\\n\\nconst ALL_DIMS = [\\n  { code: 'planet', name: '子公司' },\\n  { code: 'season', name: '季度' },\\n  { code: 'month', name: '月份' },\\n  { code: 'area', name: '门店' },\\n  { code: 'one', name: '一级类目' },\\n  { code: 'two', name: '二级类目' },\\n  { code: 'three', name: '三级类目' },\\n]\\n\\nconst INDICATORS = [\\n  {\\n    code: 'a',\\n    name: '目标收入',\\n    align: 'right' as const,\\n    render: amount,\\n    features: { sortable: true },\\n    expression: 'SUM(a)',\\n  },\\n  {\\n    code: 'b',\\n    name: '实际收入',\\n    render: amount,\\n    align: 'right' as const,\\n    features: { sortable: true },\\n    expression: 'SUM(b)',\\n  },\\n  {\\n    code: 'c',\\n    name: '上月收入',\\n    render: amount,\\n    hidden: true,\\n    align: 'right' as const,\\n    features: { sortable: true },\\n    expression: 'SUM(c)',\\n  },\\n  {\\n    code: 'lfl',\\n    name: '收入月环比',\\n    render: lfl,\\n    align: 'right' as const,\\n    features: { sortable: true },\\n    expression: '(a - c) / a',\\n  },\\n  {\\n    code: 'd',\\n    name: '重点商品收入',\\n    render: amount,\\n    align: 'right' as const,\\n    features: { sortable: true },\\n    expression: 'SUM(d)',\\n  },\\n  {\\n    code: 'rate',\\n    name: '重点商品收入占比',\\n    render: ratio,\\n    align: 'right' as const,\\n    features: { sortable: true },\\n    expression: 'd / b',\\n  },\\n]\\n\\nconst Inner = observer(() => {\\n  const [pivot] = useState(() => {\\n    return new Pivot({\\n      allDimensions: ALL_DIMS,\\n      allIndicators: INDICATORS,\\n      dimCodes: ['planet', 'area', 'season'],\\n    })\\n  })\\n\\n  const [pivotView] = useState(() => new PivotView(pivot))\\n\\n  useEffect(() => {\\n    getIncomeData().then(\\n      action((data: any[]) => {\\n        pivot.data = data\\n        pivot.isLoading = false\\n        pivot.filters = Object.fromEntries(\\n          pivot.allDimensions.map((dim) => {\\n            return [dim.code, _.uniq(data.map((d) => d[dim.code]))]\\n          }),\\n        )\\n      }),\\n    )\\n  }, [])\\n\\n  return (\\n    <div>\\n      <FusionStyles />\\n      <CheckedDimList pivot={pivot} />\\n      <CrossTreeTable\\n        style={{ marginTop: 8 }}\\n        primaryColumn={{\\n          lock: true,\\n          name: '数据维度',\\n          width: 180,\\n          title: <PrimaryColumnTitle pivot={pivot} />,\\n        }}\\n        defaultColumnWidth={120}\\n        isLoading={pivot.isLoading}\\n        leftTree={pivotView.leftTree}\\n        topTree={pivotView.topTree}\\n        getValue={(leftNode, topNode) => {\\n          const record = pivotView.recordMap.get(leftNode.key)\\n          const ind = topNode.data.indicator\\n          return record?.[ind.code]\\n        }}\\n        render={(value, leftNode, topNode) => {\\n          const ind = topNode.data.indicator\\n          return ind.render ? ind.render(value) : value\\n        }}\\n      />\\n    </div>\\n  )\\n})\\n\\nexport function 基本示例() {\\n  return <Inner />\\n}\\n\",\"locationsMap\":{\"示例-支持下钻的树状表格--基本示例\":{\"startLoc\":{\"col\":7,\"line\":134},\"endLoc\":{\"col\":1,\"line\":136},\"startBody\":{\"col\":7,\"line\":134},\"endBody\":{\"col\":1,\"line\":136}}}},}, title: '示例 / 支持下钻的树状表格' }\n\nconst ALL_DIMS = [\n  { code: 'planet', name: '子公司' },\n  { code: 'season', name: '季度' },\n  { code: 'month', name: '月份' },\n  { code: 'area', name: '门店' },\n  { code: 'one', name: '一级类目' },\n  { code: 'two', name: '二级类目' },\n  { code: 'three', name: '三级类目' },\n]\n\nconst INDICATORS = [\n  {\n    code: 'a',\n    name: '目标收入',\n    align: 'right' as const,\n    render: amount,\n    features: { sortable: true },\n    expression: 'SUM(a)',\n  },\n  {\n    code: 'b',\n    name: '实际收入',\n    render: amount,\n    align: 'right' as const,\n    features: { sortable: true },\n    expression: 'SUM(b)',\n  },\n  {\n    code: 'c',\n    name: '上月收入',\n    render: amount,\n    hidden: true,\n    align: 'right' as const,\n    features: { sortable: true },\n    expression: 'SUM(c)',\n  },\n  {\n    code: 'lfl',\n    name: '收入月环比',\n    render: lfl,\n    align: 'right' as const,\n    features: { sortable: true },\n    expression: '(a - c) / a',\n  },\n  {\n    code: 'd',\n    name: '重点商品收入',\n    render: amount,\n    align: 'right' as const,\n    features: { sortable: true },\n    expression: 'SUM(d)',\n  },\n  {\n    code: 'rate',\n    name: '重点商品收入占比',\n    render: ratio,\n    align: 'right' as const,\n    features: { sortable: true },\n    expression: 'd / b',\n  },\n]\n\nconst Inner = observer(() => {\n  const [pivot] = useState(() => {\n    return new Pivot({\n      allDimensions: ALL_DIMS,\n      allIndicators: INDICATORS,\n      dimCodes: ['planet', 'area', 'season'],\n    })\n  })\n\n  const [pivotView] = useState(() => new PivotView(pivot))\n\n  useEffect(() => {\n    getIncomeData().then(\n      action((data: any[]) => {\n        pivot.data = data\n        pivot.isLoading = false\n        pivot.filters = Object.fromEntries(\n          pivot.allDimensions.map((dim) => {\n            return [dim.code, _.uniq(data.map((d) => d[dim.code]))]\n          }),\n        )\n      }),\n    )\n  }, [])\n\n  return (\n    <div>\n      <FusionStyles />\n      <CheckedDimList pivot={pivot} />\n      <CrossTreeTable\n        style={{ marginTop: 8 }}\n        primaryColumn={{\n          lock: true,\n          name: '数据维度',\n          width: 180,\n          title: <PrimaryColumnTitle pivot={pivot} />,\n        }}\n        defaultColumnWidth={120}\n        isLoading={pivot.isLoading}\n        leftTree={pivotView.leftTree}\n        topTree={pivotView.topTree}\n        getValue={(leftNode, topNode) => {\n          const record = pivotView.recordMap.get(leftNode.key)\n          const ind = topNode.data.indicator\n          return record?.[ind.code]\n        }}\n        render={(value, leftNode, topNode) => {\n          const ind = topNode.data.indicator\n          return ind.render ? ind.render(value) : value\n        }}\n      />\n    </div>\n  )\n})\n\nexport const 基本示例 = function 基本示例() {\n  return <Inner />\n};",locationsMap:{"示例-支持下钻的树状表格--基本示例":{startLoc:{col:20,line:142},endLoc:{col:1,line:144},startBody:{col:20,line:142},endBody:{col:1,line:144}}}},storySource:{source:"import { CrossTreeTable } from 'ali-react-table/pivot'\nimport _ from 'lodash'\nimport * as mobx from 'mobx'\nimport { action } from 'mobx'\nimport { observer } from 'mobx-react'\nimport React, { useEffect, useState } from 'react'\nimport { getIncomeData } from '../../assets/cdn-data'\nimport { amount, lfl, ratio } from '../../assets/format'\nimport { FusionStyles } from '../../assets/fusion-style'\nimport { CheckedDimList, PrimaryColumnTitle } from './designers'\nimport { Pivot, PivotView } from './models'\n\nmobx.configure({ enforceActions: 'observed' })\n\nexport default { title: '示例 / 支持下钻的树状表格' }\n\nconst ALL_DIMS = [\n  { code: 'planet', name: '子公司' },\n  { code: 'season', name: '季度' },\n  { code: 'month', name: '月份' },\n  { code: 'area', name: '门店' },\n  { code: 'one', name: '一级类目' },\n  { code: 'two', name: '二级类目' },\n  { code: 'three', name: '三级类目' },\n]\n\nconst INDICATORS = [\n  {\n    code: 'a',\n    name: '目标收入',\n    align: 'right' as const,\n    render: amount,\n    features: { sortable: true },\n    expression: 'SUM(a)',\n  },\n  {\n    code: 'b',\n    name: '实际收入',\n    render: amount,\n    align: 'right' as const,\n    features: { sortable: true },\n    expression: 'SUM(b)',\n  },\n  {\n    code: 'c',\n    name: '上月收入',\n    render: amount,\n    hidden: true,\n    align: 'right' as const,\n    features: { sortable: true },\n    expression: 'SUM(c)',\n  },\n  {\n    code: 'lfl',\n    name: '收入月环比',\n    render: lfl,\n    align: 'right' as const,\n    features: { sortable: true },\n    expression: '(a - c) / a',\n  },\n  {\n    code: 'd',\n    name: '重点商品收入',\n    render: amount,\n    align: 'right' as const,\n    features: { sortable: true },\n    expression: 'SUM(d)',\n  },\n  {\n    code: 'rate',\n    name: '重点商品收入占比',\n    render: ratio,\n    align: 'right' as const,\n    features: { sortable: true },\n    expression: 'd / b',\n  },\n]\n\nconst Inner = observer(() => {\n  const [pivot] = useState(() => {\n    return new Pivot({\n      allDimensions: ALL_DIMS,\n      allIndicators: INDICATORS,\n      dimCodes: ['planet', 'area', 'season'],\n    })\n  })\n\n  const [pivotView] = useState(() => new PivotView(pivot))\n\n  useEffect(() => {\n    getIncomeData().then(\n      action((data: any[]) => {\n        pivot.data = data\n        pivot.isLoading = false\n        pivot.filters = Object.fromEntries(\n          pivot.allDimensions.map((dim) => {\n            return [dim.code, _.uniq(data.map((d) => d[dim.code]))]\n          }),\n        )\n      }),\n    )\n  }, [])\n\n  return (\n    <div>\n      <FusionStyles />\n      <CheckedDimList pivot={pivot} />\n      <CrossTreeTable\n        style={{ marginTop: 8 }}\n        primaryColumn={{\n          lock: true,\n          name: '数据维度',\n          width: 180,\n          title: <PrimaryColumnTitle pivot={pivot} />,\n        }}\n        defaultColumnWidth={120}\n        isLoading={pivot.isLoading}\n        leftTree={pivotView.leftTree}\n        topTree={pivotView.topTree}\n        getValue={(leftNode, topNode) => {\n          const record = pivotView.recordMap.get(leftNode.key)\n          const ind = topNode.data.indicator\n          return record?.[ind.code]\n        }}\n        render={(value, leftNode, topNode) => {\n          const ind = topNode.data.indicator\n          return ind.render ? ind.render(value) : value\n        }}\n      />\n    </div>\n  )\n})\n\nexport function 基本示例() {\n  return <Inner />\n}\n",locationsMap:{"示例-支持下钻的树状表格--基本示例":{startLoc:{col:7,line:134},endLoc:{col:1,line:136},startBody:{col:7,line:134},endBody:{col:1,line:136}}}}},title:"示例 / 支持下钻的树状表格"};const ALL_DIMS=[{code:"planet",name:"子公司"},{code:"season",name:"季度"},{code:"month",name:"月份"},{code:"area",name:"门店"},{code:"one",name:"一级类目"},{code:"two",name:"二级类目"},{code:"three",name:"三级类目"}],INDICATORS=[{code:"a",name:"目标收入",align:"right",render:format.a,features:{sortable:!0},expression:"SUM(a)"},{code:"b",name:"实际收入",render:format.a,align:"right",features:{sortable:!0},expression:"SUM(b)"},{code:"c",name:"上月收入",render:format.a,hidden:!0,align:"right",features:{sortable:!0},expression:"SUM(c)"},{code:"lfl",name:"收入月环比",render:format.b,align:"right",features:{sortable:!0},expression:"(a - c) / a"},{code:"d",name:"重点商品收入",render:format.a,align:"right",features:{sortable:!0},expression:"SUM(d)"},{code:"rate",name:"重点商品收入占比",render:format.c,align:"right",features:{sortable:!0},expression:"d / b"}],Inner=Object(mobxreact_esm.a)(()=>{const[pivot]=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(()=>new models_Pivot({allDimensions:ALL_DIMS,allIndicators:INDICATORS,dimCodes:["planet","area","season"]})),[pivotView]=Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useState)(()=>new models_PivotView(pivot));return Object(delegated_reactfrom_dll_reference_storybook_docs_dll.useEffect)(()=>{Object(cdn_data.b)().then(Object(mobx_module.f)(data=>{pivot.data=data,pivot.isLoading=!1,pivot.filters=Object.fromEntries(pivot.allDimensions.map(dim=>[dim.code,lodashfrom_dll_reference_storybook_docs_dll_default.a.uniq(data.map(d=>d[dim.code]))]))}))},[]),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement("div",null,delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(fusion_style.a,null),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(CheckedDimList,{pivot:pivot}),delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(cross_tree_table.a,{style:{marginTop:8},primaryColumn:{lock:!0,name:"数据维度",width:180,title:delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(PrimaryColumnTitle,{pivot:pivot})},defaultColumnWidth:120,isLoading:pivot.isLoading,leftTree:pivotView.leftTree,topTree:pivotView.topTree,getValue:(leftNode,topNode)=>{const record=pivotView.recordMap.get(leftNode.key),ind=topNode.data.indicator;return null==record?void 0:record[ind.code]},render:(value,leftNode,topNode)=>{const ind=topNode.data.indicator;return ind.render?ind.render(value):value}}))}),drillable_tree_table_stories_=function 基本示例(){return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(Inner,null)}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return getTreeDepth}));var _isLeafNode__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(56);function getTreeDepth(nodes){let maxDepth=-1;return function dfs(columns,depth){for(const column of columns)Object(_isLeafNode__WEBPACK_IMPORTED_MODULE_0__.a)(column)?maxDepth=Math.max(maxDepth,depth):dfs(column.children,depth+1)}(nodes,0),maxDepth}try{getTreeDepth.displayName="getTreeDepth",getTreeDepth.__docgenInfo={description:"获取一棵树的高度/深度 (0-based)",displayName:"getTreeDepth",props:{length:{defaultValue:null,description:"Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.",name:"length",required:!0,type:{name:"number"}},toString:{defaultValue:null,description:"Returns a string representation of an array.",name:"toString",required:!1,type:{name:"() => string"}},toLocaleString:{defaultValue:null,description:"Returns a string representation of an array. The elements are converted to string using their toLocalString methods.",name:"toLocaleString",required:!1,type:{name:"() => string"}},pop:{defaultValue:null,description:"Removes the last element from an array and returns it.",name:"pop",required:!0,type:{name:"() => AbstractTreeNode"}},push:{defaultValue:null,description:"Appends new elements to an array, and returns the new length of the array.\n@param items New elements of the Array.",name:"push",required:!0,type:{name:"(...items: AbstractTreeNode[]) => number"}},concat:{defaultValue:null,description:"Combines two or more arrays.\nCombines two or more arrays.\n@param items Additional items to add to the end of array1.\n@param items Additional items to add to the end of array1.",name:"concat",required:!0,type:{name:"{ (...items: ConcatArray<AbstractTreeNode>[]): AbstractTreeNode[]; (...items: (AbstractTreeNode | ConcatArray<AbstractTreeNode>)[]): AbstractTreeNode[]; }"}},join:{defaultValue:null,description:"Adds all the elements of an array separated by the specified separator string.\n@param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.",name:"join",required:!0,type:{name:"(separator?: string) => string"}},reverse:{defaultValue:null,description:"Reverses the elements in an Array.",name:"reverse",required:!0,type:{name:"() => AbstractTreeNode[]"}},shift:{defaultValue:null,description:"Removes the first element from an array and returns it.",name:"shift",required:!0,type:{name:"() => AbstractTreeNode"}},slice:{defaultValue:null,description:"Returns a section of an array.\n@param start The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.",name:"slice",required:!0,type:{name:"(start?: number, end?: number) => AbstractTreeNode[]"}},sort:{defaultValue:null,description:"Sorts an array.\n@param compareFn Function used to determine the order of the elements. It is expected to return\ra negative value if first argument is less than second argument, zero if they're equal and a positive\rvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r```ts\r[11,2,22,1].sort((a, b) => a - b)\r```",name:"sort",required:!0,type:{name:"(compareFn?: (a: AbstractTreeNode, b: AbstractTreeNode) => number) => AbstractTreeNode[]"}},splice:{defaultValue:null,description:"Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\nRemoves elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param start The zero-based location in the array from which to start removing elements.\n@param deleteCount The number of elements to remove.\n@param items Elements to insert into the array in place of the deleted elements.",name:"splice",required:!0,type:{name:"{ (start: number, deleteCount?: number): AbstractTreeNode[]; (start: number, deleteCount: number, ...items: AbstractTreeNode[]): AbstractTreeNode[]; }"}},unshift:{defaultValue:null,description:"Inserts new elements at the start of an array.\n@param items Elements to insert at the start of the Array.",name:"unshift",required:!0,type:{name:"(...items: AbstractTreeNode[]) => number"}},indexOf:{defaultValue:null,description:"Returns the index of the first occurrence of a value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",name:"indexOf",required:!0,type:{name:"(searchElement: AbstractTreeNode, fromIndex?: number) => number"}},lastIndexOf:{defaultValue:null,description:"Returns the index of the last occurrence of a specified value in an array.\n@param searchElement The value to locate in the array.\n@param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.",name:"lastIndexOf",required:!0,type:{name:"(searchElement: AbstractTreeNode, fromIndex?: number) => number"}},every:{defaultValue:null,description:"Determines whether all the members of an array satisfy the specified test.\n@param callbackfn A function that accepts up to three arguments. The every method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value false, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",name:"every",required:!0,type:{name:"(callbackfn: (value: AbstractTreeNode, index: number, array: AbstractTreeNode[]) => unknown, thisArg?: any) => boolean"}},some:{defaultValue:null,description:"Determines whether the specified callback function returns true for any element of an array.\n@param callbackfn A function that accepts up to three arguments. The some method calls\rthe callbackfn function for each element in the array until the callbackfn returns a value\rwhich is coercible to the Boolean value true, or until the end of the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function.\rIf thisArg is omitted, undefined is used as the this value.",name:"some",required:!0,type:{name:"(callbackfn: (value: AbstractTreeNode, index: number, array: AbstractTreeNode[]) => unknown, thisArg?: any) => boolean"}},forEach:{defaultValue:null,description:"Performs the specified action for each element in an array.\n@param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"forEach",required:!0,type:{name:"(callbackfn: (value: AbstractTreeNode, index: number, array: AbstractTreeNode[]) => void, thisArg?: any) => void"}},map:{defaultValue:null,description:"Calls a defined callback function on each element of an array, and returns an array that contains the results.\n@param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"map",required:!0,type:{name:"<U>(callbackfn: (value: AbstractTreeNode, index: number, array: AbstractTreeNode[]) => U, thisArg?: any) => U[]"}},filter:{defaultValue:null,description:"Returns the elements of an array that meet the condition specified in a callback function.\nReturns the elements of an array that meet the condition specified in a callback function.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n@param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n@param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.",name:"filter",required:!0,type:{name:"{ <S extends AbstractTreeNode>(callbackfn: (value: AbstractTreeNode, index: number, array: AbstractTreeNode[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: AbstractTreeNode, index: number, array: AbstractTreeNode[]) => unknown, thisArg?: any): AbstractTreeNode[]; }"}},reduce:{defaultValue:null,description:"Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",name:"reduce",required:!0,type:{name:"{ (callbackfn: (previousValue: AbstractTreeNode, currentValue: AbstractTreeNode, currentIndex: number, array: AbstractTreeNode[]) => AbstractTreeNode): AbstractTreeNode; (callbackfn: (previousValue: AbstractTreeNode, currentValue: AbstractTreeNode, currentIndex: number, array: AbstractTreeNode[]) => AbstractTreeNode..."}},reduceRight:{defaultValue:null,description:"Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\nCalls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n@param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",name:"reduceRight",required:!0,type:{name:"{ (callbackfn: (previousValue: AbstractTreeNode, currentValue: AbstractTreeNode, currentIndex: number, array: AbstractTreeNode[]) => AbstractTreeNode): AbstractTreeNode; (callbackfn: (previousValue: AbstractTreeNode, currentValue: AbstractTreeNode, currentIndex: number, array: AbstractTreeNode[]) => AbstractTreeNode..."}},find:{defaultValue:null,description:"Returns the value of the first element in the array where predicate is true, and undefined\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found, find\rimmediately returns that element value. Otherwise, find returns undefined.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",name:"find",required:!0,type:{name:"{ <S extends AbstractTreeNode>(predicate: (this: void, value: AbstractTreeNode, index: number, obj: AbstractTreeNode[]) => value is S, thisArg?: any): S; (predicate: (value: AbstractTreeNode, index: number, obj: AbstractTreeNode[]) => unknown, thisArg?: any): AbstractTreeNode; }"}},findIndex:{defaultValue:null,description:"Returns the index of the first element in the array where predicate is true, and -1\notherwise.\n@param predicate find calls predicate once for each element of the array, in ascending\rorder, until it finds one where predicate returns true. If such an element is found,\rfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\n@param thisArg If provided, it will be used as the this value for each invocation of\rpredicate. If it is not provided, undefined is used instead.",name:"findIndex",required:!0,type:{name:"(predicate: (value: AbstractTreeNode, index: number, obj: AbstractTreeNode[]) => unknown, thisArg?: any) => number"}},fill:{defaultValue:null,description:"Returns the this object after filling the section identified by start and end with value\n@param value value to fill array section with\n@param start index to start filling the array at. If start is negative, it is treated as\rlength+start where length is the length of the array.\n@param end index to stop filling the array at. If end is negative, it is treated as\rlength+end.",name:"fill",required:!0,type:{name:"(value: AbstractTreeNode, start?: number, end?: number) => AbstractTreeNode[]"}},copyWithin:{defaultValue:null,description:"Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target\n@param target If target is negative, it is treated as length+target where length is the\rlength of the array.\n@param start If start is negative, it is treated as length+start. If end is negative, it\ris treated as length+end.\n@param end If not specified, length of the this object is used as its default value.",name:"copyWithin",required:!0,type:{name:"(target: number, start: number, end?: number) => AbstractTreeNode[]"}},"__@iterator":{defaultValue:null,description:"Iterator",name:"__@iterator",required:!0,type:{name:"() => IterableIterator<AbstractTreeNode>"}},entries:{defaultValue:null,description:"Returns an iterable of key, value pairs for every entry in the array",name:"entries",required:!0,type:{name:"() => IterableIterator<[number, AbstractTreeNode]>"}},keys:{defaultValue:null,description:"Returns an iterable of keys in the array",name:"keys",required:!0,type:{name:"() => IterableIterator<number>"}},values:{defaultValue:null,description:"Returns an iterable of values in the array",name:"values",required:!0,type:{name:"() => IterableIterator<AbstractTreeNode>"}},"__@unscopables":{defaultValue:null,description:"Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",name:"__@unscopables",required:!0,type:{name:"() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"}},includes:{defaultValue:null,description:"Determines whether an array includes a certain element, returning true or false as appropriate.\n@param searchElement The element to search for.\n@param fromIndex The position in this array at which to begin searching for searchElement.",name:"includes",required:!0,type:{name:"(searchElement: AbstractTreeNode, fromIndex?: number) => boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/common-utils/getTreeDepth.ts#getTreeDepth"]={docgenInfo:getTreeDepth.__docgenInfo,name:"getTreeDepth",path:"src/common-utils/getTreeDepth.ts#getTreeDepth"})}catch(__react_docgen_typescript_loader_error){}},,,function(module,__webpack_exports__,__webpack_require__){"use strict";var delegated_reactfrom_dll_reference_storybook_docs_dll=__webpack_require__(0),delegated_reactfrom_dll_reference_storybook_docs_dll_default=__webpack_require__.n(delegated_reactfrom_dll_reference_storybook_docs_dll),noop=__webpack_require__(909),table=__webpack_require__(32),constants=__webpack_require__(111),treeMode=__webpack_require__(171),common_utils_isLeafNode=__webpack_require__(56);function buildCrossTreeTable(options){const{leftTree:leftTree,topTree:topTree,primaryColumn:primaryColumn,openKeys:openKeys,onChangeOpenKeys:onChangeOpenKeys,indentSize:indentSize,isLeafNode:isLeafNodeOpt=common_utils_isLeafNode.a}=options;return Object(treeMode.c)({primaryKey:constants.b,openKeys:openKeys,onChangeOpenKeys:onChangeOpenKeys,indentSize:indentSize,isLeafNode:(row,nodeMeta)=>isLeafNodeOpt(row.node,nodeMeta)})({columns:function getColumns(){return[{...primaryColumn,getValue:row=>row.node.value},...function getDataPartColumns(){return function dfs(nodes,ctx){const result=[];for(const node of nodes)if(Object(common_utils_isLeafNode.a)(node))result.push(getDataColumn(node,ctx.depth));else{const{key:key,value:value,children:children,...others}=node;result.push({...others,name:value,children:dfs(children,{depth:ctx.depth+1})})}return result}(topTree,{depth:0})}()];function getDataColumn(topNode,topDepth){const{key:key,value:value,children:children,...others}=topNode;return{...others,getValue:row=>{const leftDepth=row.nodes.length-1,leftNode=row.node;return options.getValue(leftNode,topNode,leftDepth,topDepth)},name:value,children:null,render(value,row){if(options.render){const leftDepth=row.nodes.length-1,leftNode=row.node;return options.render(value,leftNode,topNode,leftDepth,topDepth)}return value},getCellProps(value,row){if(options.getCellProps){const leftDepth=row.nodes.length-1,leftNode=row.node;return options.getCellProps(value,leftNode,topNode,leftDepth,topDepth)}}}}}(),dataSource:function getDataSource(){return function dfs(nodes,ctx){const result=[];for(const node of nodes)if(!node.hidden)if(Object(common_utils_isLeafNode.a)(node))result.push({[constants.b]:node.key,node:node,nodes:[...ctx.nodes,node]});else{const nodes=[...ctx.nodes,node];ctx.nodes.push(node);const children=dfs(node.children,ctx);result.push({[constants.b]:node.key,node:node,nodes:nodes,children:children}),ctx.nodes.pop()}return result}(leftTree,{nodes:[]})}()})}try{buildCrossTreeTable.displayName="buildCrossTreeTable",buildCrossTreeTable.__docgenInfo={description:"",displayName:"buildCrossTreeTable",props:{primaryColumn:{defaultValue:null,description:"",name:"primaryColumn",required:!0,type:{name:"any"}},openKeys:{defaultValue:null,description:"",name:"openKeys",required:!0,type:{name:"string[]"}},onChangeOpenKeys:{defaultValue:null,description:"",name:"onChangeOpenKeys",required:!0,type:{name:"(nextOpenKeys: string[]) => void"}},indentSize:{defaultValue:null,description:"",name:"indentSize",required:!1,type:{name:"number"}},isLeafNode:{defaultValue:null,description:"",name:"isLeafNode",required:!1,type:{name:"(node: any, nodeMeta: { depth: number; expanded: boolean; rowKey: string; }) => boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/pivot/cross-tree-table/buildCrossTreeTable.tsx#buildCrossTreeTable"]={docgenInfo:buildCrossTreeTable.__docgenInfo,name:"buildCrossTreeTable",path:"src/pivot/cross-tree-table/buildCrossTreeTable.tsx#buildCrossTreeTable"})}catch(__react_docgen_typescript_loader_error){}let cross_tree_table_CrossTreeTable=(()=>{class CrossTreeTable extends delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.Component{constructor(props){super(props),this.onChangeOpenKeys=nextOpenKeys=>{this.props.onChangeOpenKeys(nextOpenKeys),"openKeys"in this.props||this.setState({openKeys:nextOpenKeys})},this.state={openKeys:props.defaultOpenKeys}}static getDerivedStateFromProps(nextProps){return"openKeys"in nextProps?{openKeys:nextProps.openKeys}:null}render(){const{leftTree:leftTree,topTree:topTree,getValue:getValue,getCellProps:getCellProps,primaryColumn:primaryColumn,render:render,openKeys:openKeysProp,defaultOpenKeys:defaultOpenKeys,onChangeOpenKeys:onChangeOpenKeys,indentSize:indentSize,isLeafNode:isLeafNode,...others}=this.props,openKeys=null!=openKeysProp?openKeysProp:this.state.openKeys,{dataSource:dataSource,columns:columns}=buildCrossTreeTable({leftTree:null!=leftTree?leftTree:[],topTree:null!=topTree?topTree:[],getValue:getValue,getCellProps:getCellProps,render:render,primaryColumn:primaryColumn,openKeys:openKeys,onChangeOpenKeys:this.onChangeOpenKeys,indentSize:indentSize,isLeafNode:isLeafNode});return delegated_reactfrom_dll_reference_storybook_docs_dll_default.a.createElement(table.a,Object.assign({},others,{primaryKey:constants.b,dataSource:dataSource,columns:columns}))}}return CrossTreeTable.defaultProps={defaultOpenKeys:[],onChangeOpenKeys:noop.a},CrossTreeTable})();__webpack_exports__.a=cross_tree_table_CrossTreeTable}],[[520,1,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,